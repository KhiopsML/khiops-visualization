{"version":3,"file":"chart.umd.js","sources":["../src/helpers/helpers.core.ts","../src/helpers/helpers.math.ts","../src/helpers/helpers.collection.ts","../src/helpers/helpers.extras.ts","../src/core/core.animator.js","../node_modules/@kurkle/color/dist/color.esm.js","../src/helpers/helpers.color.ts","../src/core/core.animations.defaults.js","../src/helpers/helpers.intl.ts","../src/core/core.ticks.js","../src/core/core.defaults.js","../src/core/core.layouts.defaults.js","../src/core/core.scale.defaults.js","../src/helpers/helpers.dom.ts","../src/helpers/helpers.canvas.js","../src/helpers/helpers.config.js","../src/helpers/helpers.curve.ts","../src/helpers/helpers.easing.ts","../src/helpers/helpers.interpolation.ts","../src/helpers/helpers.options.js","../src/helpers/helpers.rtl.ts","../src/helpers/helpers.segment.js","../src/core/core.interaction.js","../src/core/core.layouts.js","../src/platform/platform.base.js","../src/platform/platform.basic.js","../src/platform/platform.dom.js","../src/platform/index.js","../src/core/core.animation.js","../src/core/core.animations.js","../src/core/core.datasetController.js","../src/core/core.element.ts","../src/core/core.scale.autoskip.js","../src/core/core.scale.js","../src/core/core.typedRegistry.js","../src/core/core.registry.js","../src/core/core.plugins.js","../src/core/core.config.js","../src/core/core.controller.js","../src/core/core.adapters.ts","../src/controllers/controller.bar.js","../src/controllers/controller.doughnut.js","../src/controllers/controller.bubble.js","../src/controllers/controller.line.js","../src/controllers/controller.polarArea.js","../src/controllers/controller.pie.js","../src/controllers/controller.radar.js","../src/controllers/controller.scatter.js","../src/elements/element.arc.ts","../src/elements/element.line.js","../src/elements/element.point.ts","../src/elements/element.bar.js","../src/plugins/plugin.decimation.js","../src/plugins/plugin.filler/filler.segment.js","../src/plugins/plugin.filler/filler.helper.js","../src/plugins/plugin.filler/filler.options.js","../src/plugins/plugin.filler/filler.target.stack.js","../src/plugins/plugin.filler/simpleArc.js","../src/plugins/plugin.filler/filler.target.js","../src/plugins/plugin.filler/filler.drawing.js","../src/plugins/plugin.filler/index.js","../src/plugins/plugin.legend.js","../src/plugins/plugin.title.js","../src/plugins/plugin.subtitle.js","../src/plugins/plugin.tooltip.js","../src/scales/scale.category.js","../src/scales/scale.linearbase.js","../src/scales/scale.linear.js","../src/scales/scale.logarithmic.js","../src/scales/scale.radialLinear.js","../src/scales/scale.time.js","../src/scales/scale.timeseries.js","../src/index.umd.ts"],"sourcesContent":["/**\r\n * @namespace Chart.helpers\r\n */\r\n\r\nimport type {AnyObject} from '../../types/basic';\r\nimport type {ActiveDataPoint, ChartEvent} from '../../types';\r\n\r\n/**\r\n * An empty function that can be used, for example, for optional callback.\r\n */\r\nexport function noop() {\r\n  /* noop */\r\n}\r\n\r\n/**\r\n * Returns a unique id, sequentially generated from a global variable.\r\n */\r\nexport const uid = (() => {\r\n  let id = 0;\r\n  return () => id++;\r\n})();\r\n\r\n/**\r\n * Returns true if `value` is neither null nor undefined, else returns false.\r\n * @param value - The value to test.\r\n * @since 2.7.0\r\n */\r\nexport function isNullOrUndef(value: unknown): value is null | undefined {\r\n  return value === null || typeof value === 'undefined';\r\n}\r\n\r\n/**\r\n * Returns true if `value` is an array (including typed arrays), else returns false.\r\n * @param value - The value to test.\r\n * @function\r\n */\r\nexport function isArray<T = unknown>(value: unknown): value is T[] {\r\n  if (Array.isArray && Array.isArray(value)) {\r\n    return true;\r\n  }\r\n  const type = Object.prototype.toString.call(value);\r\n  if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Returns true if `value` is an object (excluding null), else returns false.\r\n * @param value - The value to test.\r\n * @since 2.7.0\r\n */\r\nexport function isObject(value: unknown): value is AnyObject {\r\n  return value !== null && Object.prototype.toString.call(value) === '[object Object]';\r\n}\r\n\r\n/**\r\n * Returns true if `value` is a finite number, else returns false\r\n * @param value  - The value to test.\r\n */\r\nfunction isNumberFinite(value: unknown): value is number {\r\n  return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\r\n}\r\nexport {\r\n  isNumberFinite as isFinite,\r\n};\r\n\r\n/**\r\n * Returns `value` if finite, else returns `defaultValue`.\r\n * @param value - The value to return if defined.\r\n * @param defaultValue - The value to return if `value` is not finite.\r\n */\r\nexport function finiteOrDefault(value: unknown, defaultValue: number) {\r\n  return isNumberFinite(value) ? value : defaultValue;\r\n}\r\n\r\n/**\r\n * Returns `value` if defined, else returns `defaultValue`.\r\n * @param value - The value to return if defined.\r\n * @param defaultValue - The value to return if `value` is undefined.\r\n */\r\nexport function valueOrDefault<T>(value: T | undefined, defaultValue: T) {\r\n  return typeof value === 'undefined' ? defaultValue : value;\r\n}\r\n\r\nexport const toPercentage = (value: number | string, dimension: number) =>\r\n  typeof value === 'string' && value.endsWith('%') ?\r\n    parseFloat(value) / 100\r\n    : +value / dimension;\r\n\r\nexport const toDimension = (value: number | string, dimension: number) =>\r\n  typeof value === 'string' && value.endsWith('%') ?\r\n    parseFloat(value) / 100 * dimension\r\n    : +value;\r\n\r\n/**\r\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\r\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\r\n * @param fn - The function to call.\r\n * @param args - The arguments with which `fn` should be called.\r\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\r\n */\r\nexport function callback<T extends (this: TA, ...restArgs: unknown[]) => R, TA, R>(\r\n  fn: T | undefined,\r\n  args: unknown[],\r\n  thisArg?: TA\r\n): R | undefined {\r\n  if (fn && typeof fn.call === 'function') {\r\n    return fn.apply(thisArg, args);\r\n  }\r\n}\r\n\r\n/**\r\n * Note(SB) for performance sake, this method should only be used when loopable type\r\n * is unknown or in none intensive code (not called often and small loopable). Else\r\n * it's preferable to use a regular for() loop and save extra function calls.\r\n * @param loopable - The object or array to be iterated.\r\n * @param fn - The function to call for each item.\r\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\r\n * @param [reverse] - If true, iterates backward on the loopable.\r\n */\r\nexport function each<T, TA>(\r\n  loopable: Record<string, T>,\r\n  fn: (this: TA, v: T, i: string) => void,\r\n  thisArg?: TA,\r\n  reverse?: boolean\r\n): void;\r\nexport function each<T, TA>(\r\n  loopable: T[],\r\n  fn: (this: TA, v: T, i: number) => void,\r\n  thisArg?: TA,\r\n  reverse?: boolean\r\n): void;\r\nexport function each<T, TA>(\r\n  loopable: T[] | Record<string, T>,\r\n  fn: (this: TA, v: T, i: any) => void,\r\n  thisArg?: TA,\r\n  reverse?: boolean\r\n) {\r\n  let i: number, len: number, keys: string[];\r\n  if (isArray(loopable)) {\r\n    len = loopable.length;\r\n    if (reverse) {\r\n      for (i = len - 1; i >= 0; i--) {\r\n        fn.call(thisArg, loopable[i], i);\r\n      }\r\n    } else {\r\n      for (i = 0; i < len; i++) {\r\n        fn.call(thisArg, loopable[i], i);\r\n      }\r\n    }\r\n  } else if (isObject(loopable)) {\r\n    keys = Object.keys(loopable);\r\n    len = keys.length;\r\n    for (i = 0; i < len; i++) {\r\n      fn.call(thisArg, loopable[keys[i]], keys[i]);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\r\n * @param a0 - The array to compare\r\n * @param a1 - The array to compare\r\n * @private\r\n */\r\nexport function _elementsEqual(a0: ActiveDataPoint[], a1: ActiveDataPoint[]) {\r\n  let i: number, ilen: number, v0: ActiveDataPoint, v1: ActiveDataPoint;\r\n\r\n  if (!a0 || !a1 || a0.length !== a1.length) {\r\n    return false;\r\n  }\r\n\r\n  for (i = 0, ilen = a0.length; i < ilen; ++i) {\r\n    v0 = a0[i];\r\n    v1 = a1[i];\r\n\r\n    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Returns a deep copy of `source` without keeping references on objects and arrays.\r\n * @param source - The value to clone.\r\n */\r\nexport function clone<T>(source: T): T {\r\n  if (isArray(source)) {\r\n    return source.map(clone) as unknown as T;\r\n  }\r\n\r\n  if (isObject(source)) {\r\n    const target = Object.create(null);\r\n    const keys = Object.keys(source);\r\n    const klen = keys.length;\r\n    let k = 0;\r\n\r\n    for (; k < klen; ++k) {\r\n      target[keys[k]] = clone(source[keys[k]]);\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  return source;\r\n}\r\n\r\nfunction isValidKey(key: string) {\r\n  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\r\n}\r\n\r\n/**\r\n * The default merger when Chart.helpers.merge is called without merger option.\r\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\r\n * @private\r\n */\r\nexport function _merger(key: string, target: AnyObject, source: AnyObject, options: AnyObject) {\r\n  if (!isValidKey(key)) {\r\n    return;\r\n  }\r\n\r\n  const tval = target[key];\r\n  const sval = source[key];\r\n\r\n  if (isObject(tval) && isObject(sval)) {\r\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n    merge(tval, sval, options);\r\n  } else {\r\n    target[key] = clone(sval);\r\n  }\r\n}\r\n\r\nexport interface MergeOptions {\r\n  merger?: (key: string, target: AnyObject, source: AnyObject, options?: AnyObject) => void;\r\n}\r\n\r\n/**\r\n * Recursively deep copies `source` properties into `target` with the given `options`.\r\n * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\r\n * @param target - The target object in which all sources are merged into.\r\n * @param source - Object(s) to merge into `target`.\r\n * @param [options] - Merging options:\r\n * @param [options.merger] - The merge method (key, target, source, options)\r\n * @returns The `target` object.\r\n */\r\nexport function merge<T>(target: T, source: [], options?: MergeOptions): T;\r\nexport function merge<T, S1>(target: T, source: S1, options?: MergeOptions): T & S1;\r\nexport function merge<T, S1>(target: T, source: [S1], options?: MergeOptions): T & S1;\r\nexport function merge<T, S1, S2>(target: T, source: [S1, S2], options?: MergeOptions): T & S1 & S2;\r\nexport function merge<T, S1, S2, S3>(target: T, source: [S1, S2, S3], options?: MergeOptions): T & S1 & S2 & S3;\r\nexport function merge<T, S1, S2, S3, S4>(\r\n  target: T,\r\n  source: [S1, S2, S3, S4],\r\n  options?: MergeOptions\r\n): T & S1 & S2 & S3 & S4;\r\nexport function merge<T>(target: T, source: AnyObject[], options?: MergeOptions): AnyObject;\r\nexport function merge<T>(target: T, source: AnyObject[], options?: MergeOptions): AnyObject {\r\n  const sources = isArray(source) ? source : [source];\r\n  const ilen = sources.length;\r\n\r\n  if (!isObject(target)) {\r\n    return target as AnyObject;\r\n  }\r\n\r\n  options = options || {};\r\n  const merger = options.merger || _merger;\r\n  let current: AnyObject;\r\n\r\n  for (let i = 0; i < ilen; ++i) {\r\n    current = sources[i];\r\n    if (!isObject(current)) {\r\n      continue;\r\n    }\r\n\r\n    const keys = Object.keys(current);\r\n    for (let k = 0, klen = keys.length; k < klen; ++k) {\r\n      merger(keys[k], target, current, options as AnyObject);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Recursively deep copies `source` properties into `target` *only* if not defined in target.\r\n * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\r\n * @param target - The target object in which all sources are merged into.\r\n * @param source - Object(s) to merge into `target`.\r\n * @returns The `target` object.\r\n */\r\nexport function mergeIf<T>(target: T, source: []): T;\r\nexport function mergeIf<T, S1>(target: T, source: S1): T & S1;\r\nexport function mergeIf<T, S1>(target: T, source: [S1]): T & S1;\r\nexport function mergeIf<T, S1, S2>(target: T, source: [S1, S2]): T & S1 & S2;\r\nexport function mergeIf<T, S1, S2, S3>(target: T, source: [S1, S2, S3]): T & S1 & S2 & S3;\r\nexport function mergeIf<T, S1, S2, S3, S4>(target: T, source: [S1, S2, S3, S4]): T & S1 & S2 & S3 & S4;\r\nexport function mergeIf<T>(target: T, source: AnyObject[]): AnyObject;\r\nexport function mergeIf<T>(target: T, source: AnyObject[]): AnyObject {\r\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n  return merge<T>(target, source, {merger: _mergerIf});\r\n}\r\n\r\n/**\r\n * Merges source[key] in target[key] only if target[key] is undefined.\r\n * @private\r\n */\r\nexport function _mergerIf(key: string, target: AnyObject, source: AnyObject) {\r\n  if (!isValidKey(key)) {\r\n    return;\r\n  }\r\n\r\n  const tval = target[key];\r\n  const sval = source[key];\r\n\r\n  if (isObject(tval) && isObject(sval)) {\r\n    mergeIf(tval, sval);\r\n  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\r\n    target[key] = clone(sval);\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _deprecated(scope: string, value: unknown, previous: string, current: string) {\r\n  if (value !== undefined) {\r\n    console.warn(scope + ': \"' + previous +\r\n      '\" is deprecated. Please use \"' + current + '\" instead');\r\n  }\r\n}\r\n\r\n// resolveObjectKey resolver cache\r\nconst keyResolvers = {\r\n  // Chart.helpers.core resolveObjectKey should resolve empty key to root object\r\n  '': v => v,\r\n  // default resolvers\r\n  x: o => o.x,\r\n  y: o => o.y\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _splitKey(key: string) {\r\n  const parts = key.split('.');\r\n  const keys: string[] = [];\r\n  let tmp = '';\r\n  for (const part of parts) {\r\n    tmp += part;\r\n    if (tmp.endsWith('\\\\')) {\r\n      tmp = tmp.slice(0, -1) + '.';\r\n    } else {\r\n      keys.push(tmp);\r\n      tmp = '';\r\n    }\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction _getKeyResolver(key: string) {\r\n  const keys = _splitKey(key);\r\n  return obj => {\r\n    for (const k of keys) {\r\n      if (k === '') {\r\n        // For backward compatibility:\r\n        // Chart.helpers.core resolveObjectKey should break at empty key\r\n        break;\r\n      }\r\n      obj = obj && obj[k];\r\n    }\r\n    return obj;\r\n  };\r\n}\r\n\r\nexport function resolveObjectKey(obj: AnyObject, key: string): AnyObject {\r\n  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\r\n  return resolver(obj);\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _capitalize(str: string) {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\n\r\nexport const defined = (value: unknown) => typeof value !== 'undefined';\r\n\r\nexport const isFunction = (value: unknown): value is (...args: any[]) => any => typeof value === 'function';\r\n\r\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\r\nexport const setsEqual = <T>(a: Set<T>, b: Set<T>) => {\r\n  if (a.size !== b.size) {\r\n    return false;\r\n  }\r\n\r\n  for (const item of a) {\r\n    if (!b.has(item)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * @param e - The event\r\n * @private\r\n */\r\nexport function _isClickEvent(e: ChartEvent) {\r\n  return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\r\n}\r\n","import type {Point} from '../../types/geometric';\r\nimport {isFinite as isFiniteNumber} from './helpers.core';\r\n\r\n/**\r\n * @alias Chart.helpers.math\r\n * @namespace\r\n */\r\n\r\nexport const PI = Math.PI;\r\nexport const TAU = 2 * PI;\r\nexport const PITAU = TAU + PI;\r\nexport const INFINITY = Number.POSITIVE_INFINITY;\r\nexport const RAD_PER_DEG = PI / 180;\r\nexport const HALF_PI = PI / 2;\r\nexport const QUARTER_PI = PI / 4;\r\nexport const TWO_THIRDS_PI = PI * 2 / 3;\r\n\r\nexport const log10 = Math.log10;\r\nexport const sign = Math.sign;\r\n\r\nexport function almostEquals(x: number, y: number, epsilon: number) {\r\n  return Math.abs(x - y) < epsilon;\r\n}\r\n\r\n/**\r\n * Implementation of the nice number algorithm used in determining where axis labels will go\r\n */\r\nexport function niceNum(range: number) {\r\n  const roundedRange = Math.round(range);\r\n  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\r\n  const niceRange = Math.pow(10, Math.floor(log10(range)));\r\n  const fraction = range / niceRange;\r\n  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\r\n  return niceFraction * niceRange;\r\n}\r\n\r\n/**\r\n * Returns an array of factors sorted from 1 to sqrt(value)\r\n * @private\r\n */\r\nexport function _factorize(value: number) {\r\n  const result: number[] = [];\r\n  const sqrt = Math.sqrt(value);\r\n  let i: number;\r\n\r\n  for (i = 1; i < sqrt; i++) {\r\n    if (value % i === 0) {\r\n      result.push(i);\r\n      result.push(value / i);\r\n    }\r\n  }\r\n  if (sqrt === (sqrt | 0)) { // if value is a square number\r\n    result.push(sqrt);\r\n  }\r\n\r\n  result.sort((a, b) => a - b).pop();\r\n  return result;\r\n}\r\n\r\nexport function isNumber(n: unknown): n is number {\r\n  return !isNaN(parseFloat(n as string)) && isFinite(n as number);\r\n}\r\n\r\nexport function almostWhole(x: number, epsilon: number) {\r\n  const rounded = Math.round(x);\r\n  return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _setMinAndMaxByKey(\r\n  array: Record<string, number>[],\r\n  target: { min: number, max: number },\r\n  property: string\r\n) {\r\n  let i: number, ilen: number, value: number;\r\n\r\n  for (i = 0, ilen = array.length; i < ilen; i++) {\r\n    value = array[i][property];\r\n    if (!isNaN(value)) {\r\n      target.min = Math.min(target.min, value);\r\n      target.max = Math.max(target.max, value);\r\n    }\r\n  }\r\n}\r\n\r\nexport function toRadians(degrees: number) {\r\n  return degrees * (PI / 180);\r\n}\r\n\r\nexport function toDegrees(radians: number) {\r\n  return radians * (180 / PI);\r\n}\r\n\r\n/**\r\n * Returns the number of decimal places\r\n * i.e. the number of digits after the decimal point, of the value of this Number.\r\n * @param x - A number.\r\n * @returns The number of decimal places.\r\n * @private\r\n */\r\nexport function _decimalPlaces(x: number) {\r\n  if (!isFiniteNumber(x)) {\r\n    return;\r\n  }\r\n  let e = 1;\r\n  let p = 0;\r\n  while (Math.round(x * e) / e !== x) {\r\n    e *= 10;\r\n    p++;\r\n  }\r\n  return p;\r\n}\r\n\r\n// Gets the angle from vertical upright to the point about a centre.\r\nexport function getAngleFromPoint(\r\n  centrePoint: Point,\r\n  anglePoint: Point\r\n) {\r\n  const distanceFromXCenter = anglePoint.x - centrePoint.x;\r\n  const distanceFromYCenter = anglePoint.y - centrePoint.y;\r\n  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\r\n\r\n  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\r\n\r\n  if (angle < (-0.5 * PI)) {\r\n    angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\r\n  }\r\n\r\n  return {\r\n    angle,\r\n    distance: radialDistanceFromCenter\r\n  };\r\n}\r\n\r\nexport function distanceBetweenPoints(pt1: Point, pt2: Point) {\r\n  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\r\n}\r\n\r\n/**\r\n * Shortest distance between angles, in either direction.\r\n * @private\r\n */\r\nexport function _angleDiff(a: number, b: number) {\r\n  return (a - b + PITAU) % TAU - PI;\r\n}\r\n\r\n/**\r\n * Normalize angle to be between 0 and 2*PI\r\n * @private\r\n */\r\nexport function _normalizeAngle(a: number) {\r\n  return (a % TAU + TAU) % TAU;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _angleBetween(angle: number, start: number, end: number, sameAngleIsFullCircle?: boolean) {\r\n  const a = _normalizeAngle(angle);\r\n  const s = _normalizeAngle(start);\r\n  const e = _normalizeAngle(end);\r\n  const angleToStart = _normalizeAngle(s - a);\r\n  const angleToEnd = _normalizeAngle(e - a);\r\n  const startToAngle = _normalizeAngle(a - s);\r\n  const endToAngle = _normalizeAngle(a - e);\r\n  return a === s || a === e || (sameAngleIsFullCircle && s === e)\r\n    || (angleToStart > angleToEnd && startToAngle < endToAngle);\r\n}\r\n\r\n/**\r\n * Limit `value` between `min` and `max`\r\n * @param value\r\n * @param min\r\n * @param max\r\n * @private\r\n */\r\nexport function _limitValue(value: number, min: number, max: number) {\r\n  return Math.max(min, Math.min(max, value));\r\n}\r\n\r\n/**\r\n * @param {number} value\r\n * @private\r\n */\r\nexport function _int16Range(value: number) {\r\n  return _limitValue(value, -32768, 32767);\r\n}\r\n\r\n/**\r\n * @param value\r\n * @param start\r\n * @param end\r\n * @param [epsilon]\r\n * @private\r\n */\r\nexport function _isBetween(value: number, start: number, end: number, epsilon = 1e-6) {\r\n  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\r\n}\r\n","import {_capitalize} from './helpers.core';\r\n\r\n/**\r\n * Binary search\r\n * @param table - the table search. must be sorted!\r\n * @param value - value to find\r\n * @param cmp\r\n * @private\r\n */\r\nexport function _lookup(\r\n  table: number[],\r\n  value: number,\r\n  cmp?: (value: number) => boolean\r\n): {lo: number, hi: number};\r\nexport function _lookup<T>(\r\n  table: T[],\r\n  value: number,\r\n  cmp: (value: number) => boolean\r\n): {lo: number, hi: number};\r\nexport function _lookup(\r\n  table: unknown[],\r\n  value: number,\r\n  cmp?: (value: number) => boolean\r\n) {\r\n  cmp = cmp || ((index) => table[index] < value);\r\n  let hi = table.length - 1;\r\n  let lo = 0;\r\n  let mid: number;\r\n\r\n  while (hi - lo > 1) {\r\n    mid = (lo + hi) >> 1;\r\n    if (cmp(mid)) {\r\n      lo = mid;\r\n    } else {\r\n      hi = mid;\r\n    }\r\n  }\r\n\r\n  return {lo, hi};\r\n}\r\n\r\n/**\r\n * Binary search\r\n * @param table - the table search. must be sorted!\r\n * @param key - property name for the value in each entry\r\n * @param value - value to find\r\n * @param last - lookup last index\r\n * @private\r\n */\r\nexport const _lookupByKey = (\r\n  table: Record<string, number>[],\r\n  key: string,\r\n  value: number,\r\n  last?: boolean\r\n) =>\r\n  _lookup(table, value, last\r\n    ? index => {\r\n      const ti = table[index][key];\r\n      return ti < value || ti === value && table[index + 1][key] === value;\r\n    }\r\n    : index => table[index][key] < value);\r\n\r\n/**\r\n * Reverse binary search\r\n * @param table - the table search. must be sorted!\r\n * @param key - property name for the value in each entry\r\n * @param value - value to find\r\n * @private\r\n */\r\nexport const _rlookupByKey = (\r\n  table: Record<string, number>[],\r\n  key: string,\r\n  value: number\r\n) =>\r\n  _lookup(table, value, index => table[index][key] >= value);\r\n\r\n/**\r\n * Return subset of `values` between `min` and `max` inclusive.\r\n * Values are assumed to be in sorted order.\r\n * @param values - sorted array of values\r\n * @param min - min value\r\n * @param max - max value\r\n */\r\nexport function _filterBetween(values: number[], min: number, max: number) {\r\n  let start = 0;\r\n  let end = values.length;\r\n\r\n  while (start < end && values[start] < min) {\r\n    start++;\r\n  }\r\n  while (end > start && values[end - 1] > max) {\r\n    end--;\r\n  }\r\n\r\n  return start > 0 || end < values.length\r\n    ? values.slice(start, end)\r\n    : values;\r\n}\r\n\r\nconst arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'] as const;\r\n\r\nexport interface ArrayListener<T> {\r\n  _onDataPush?(...item: T[]): void;\r\n  _onDataPop?(): void;\r\n  _onDataShift?(): void;\r\n  _onDataSplice?(index: number, deleteCount: number, ...items: T[]): void;\r\n  _onDataUnshift?(...item: T[]): void;\r\n}\r\n\r\n/**\r\n * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\r\n * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\r\n * called on the '_onData*' callbacks (e.g. _onDataPush, etc.) with same arguments.\r\n */\r\nexport function listenArrayEvents<T>(array: T[], listener: ArrayListener<T>): void;\r\nexport function listenArrayEvents(array, listener) {\r\n  if (array._chartjs) {\r\n    array._chartjs.listeners.push(listener);\r\n    return;\r\n  }\r\n\r\n  Object.defineProperty(array, '_chartjs', {\r\n    configurable: true,\r\n    enumerable: false,\r\n    value: {\r\n      listeners: [listener]\r\n    }\r\n  });\r\n\r\n  arrayEvents.forEach((key) => {\r\n    const method = '_onData' + _capitalize(key);\r\n    const base = array[key];\r\n\r\n    Object.defineProperty(array, key, {\r\n      configurable: true,\r\n      enumerable: false,\r\n      value(...args) {\r\n        const res = base.apply(this, args);\r\n\r\n        array._chartjs.listeners.forEach((object) => {\r\n          if (typeof object[method] === 'function') {\r\n            object[method](...args);\r\n          }\r\n        });\r\n\r\n        return res;\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Removes the given array event listener and cleanup extra attached properties (such as\r\n * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\r\n */\r\nexport function unlistenArrayEvents<T>(array: T[], listener: ArrayListener<T>): void;\r\nexport function unlistenArrayEvents(array, listener) {\r\n  const stub = array._chartjs;\r\n  if (!stub) {\r\n    return;\r\n  }\r\n\r\n  const listeners = stub.listeners;\r\n  const index = listeners.indexOf(listener);\r\n  if (index !== -1) {\r\n    listeners.splice(index, 1);\r\n  }\r\n\r\n  if (listeners.length > 0) {\r\n    return;\r\n  }\r\n\r\n  arrayEvents.forEach((key) => {\r\n    delete array[key];\r\n  });\r\n\r\n  delete array._chartjs;\r\n}\r\n\r\n/**\r\n * @param items\r\n */\r\nexport function _arrayUnique<T>(items: T[]) {\r\n  const set = new Set<T>();\r\n  let i: number, ilen: number;\r\n\r\n  for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n    set.add(items[i]);\r\n  }\r\n\r\n  if (set.size === ilen) {\r\n    return items;\r\n  }\r\n\r\n  return Array.from(set);\r\n}\r\n","import {type ChartMeta, type PointElement} from '../../types';\r\n\r\nimport {_limitValue} from './helpers.math';\r\nimport {_lookupByKey} from './helpers.collection';\r\n\r\nexport function fontString(pixelSize: number, fontStyle: string, fontFamily: string) {\r\n  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\r\n}\r\n\r\n/**\r\n* Request animation polyfill\r\n*/\r\nexport const requestAnimFrame = (function() {\r\n  if (typeof window === 'undefined') {\r\n    return function(callback) {\r\n      return callback();\r\n    };\r\n  }\r\n  return window.requestAnimationFrame;\r\n}());\r\n\r\n/**\r\n * Throttles calling `fn` once per animation frame\r\n * Latest arguments are used on the actual call\r\n */\r\nexport function throttled<TArgs extends Array<any>>(\r\n  fn: (...args: TArgs) => void,\r\n  thisArg: any,\r\n) {\r\n  let ticking = false;\r\n\r\n  return function(...args: TArgs) {\r\n    if (!ticking) {\r\n      ticking = true;\r\n      requestAnimFrame.call(window, () => {\r\n        ticking = false;\r\n        fn.apply(thisArg, args);\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Debounces calling `fn` for `delay` ms\r\n */\r\nexport function debounce<TArgs extends Array<any>>(fn: (...args: TArgs) => void, delay: number) {\r\n  let timeout;\r\n  return function(...args: TArgs) {\r\n    if (delay) {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(fn, delay, args);\r\n    } else {\r\n      fn.apply<any, TArgs, void>(this, args);\r\n    }\r\n    return delay;\r\n  };\r\n}\r\n\r\n/**\r\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\r\n * @private\r\n */\r\nexport const _toLeftRightCenter = (align: 'start' | 'end' | 'center') => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\r\n\r\n/**\r\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\r\n * @private\r\n */\r\nexport const _alignStartEnd = (align: 'start' | 'end' | 'center', start: number, end: number) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\r\n\r\n/**\r\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\r\n * @private\r\n */\r\nexport const _textX = (align: 'left' | 'right' | 'center', left: number, right: number, rtl: boolean) => {\r\n  const check = rtl ? 'left' : 'right';\r\n  return align === check ? right : align === 'center' ? (left + right) / 2 : left;\r\n};\r\n\r\n/**\r\n * Return start and count of visible points.\r\n * @private\r\n */\r\nexport function _getStartAndCountOfVisiblePoints(meta: ChartMeta<'line' | 'scatter'>, points: PointElement[], animationsDisabled: boolean) {\r\n  const pointCount = points.length;\r\n\r\n  let start = 0;\r\n  let count = pointCount;\r\n\r\n  if (meta._sorted) {\r\n    const {iScale, _parsed} = meta;\r\n    const axis = iScale.axis;\r\n    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\r\n\r\n    if (minDefined) {\r\n      start = _limitValue(Math.min(\r\n        // @ts-expect-error Need to type _parsed\r\n        _lookupByKey(_parsed, iScale.axis, min).lo,\r\n        // @ts-expect-error Need to fix types on _lookupByKey\r\n        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),\r\n      0, pointCount - 1);\r\n    }\r\n    if (maxDefined) {\r\n      count = _limitValue(Math.max(\r\n        // @ts-expect-error Need to type _parsed\r\n        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,\r\n        // @ts-expect-error Need to fix types on _lookupByKey\r\n        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1),\r\n      start, pointCount) - start;\r\n    } else {\r\n      count = pointCount - start;\r\n    }\r\n  }\r\n\r\n  return {start, count};\r\n}\r\n\r\n/**\r\n * Checks if the scale ranges have changed.\r\n * @param {object} meta - dataset meta.\r\n * @returns {boolean}\r\n * @private\r\n */\r\nexport function _scaleRangesChanged(meta) {\r\n  const {xScale, yScale, _scaleRanges} = meta;\r\n  const newRanges = {\r\n    xmin: xScale.min,\r\n    xmax: xScale.max,\r\n    ymin: yScale.min,\r\n    ymax: yScale.max\r\n  };\r\n  if (!_scaleRanges) {\r\n    meta._scaleRanges = newRanges;\r\n    return true;\r\n  }\r\n  const changed = _scaleRanges.xmin !== xScale.min\r\n\t\t|| _scaleRanges.xmax !== xScale.max\r\n\t\t|| _scaleRanges.ymin !== yScale.min\r\n\t\t|| _scaleRanges.ymax !== yScale.max;\r\n\r\n  Object.assign(_scaleRanges, newRanges);\r\n  return changed;\r\n}\r\n","import {requestAnimFrame} from '../helpers/helpers.extras';\r\n\r\n/**\r\n * @typedef { import(\"./core.animation\").default } Animation\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n */\r\n\r\n/**\r\n * Please use the module's default export which provides a singleton instance\r\n * Note: class is export for typedoc\r\n */\r\nexport class Animator {\r\n  constructor() {\r\n    this._request = null;\r\n    this._charts = new Map();\r\n    this._running = false;\r\n    this._lastDate = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _notify(chart, anims, date, type) {\r\n    const callbacks = anims.listeners[type];\r\n    const numSteps = anims.duration;\r\n\r\n    callbacks.forEach(fn => fn({\r\n      chart,\r\n      initial: anims.initial,\r\n      numSteps,\r\n      currentStep: Math.min(date - anims.start, numSteps)\r\n    }));\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _refresh() {\r\n    if (this._request) {\r\n      return;\r\n    }\r\n    this._running = true;\r\n\r\n    this._request = requestAnimFrame.call(window, () => {\r\n      this._update();\r\n      this._request = null;\r\n\r\n      if (this._running) {\r\n        this._refresh();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _update(date = Date.now()) {\r\n    let remaining = 0;\r\n\r\n    this._charts.forEach((anims, chart) => {\r\n      if (!anims.running || !anims.items.length) {\r\n        return;\r\n      }\r\n      const items = anims.items;\r\n      let i = items.length - 1;\r\n      let draw = false;\r\n      let item;\r\n\r\n      for (; i >= 0; --i) {\r\n        item = items[i];\r\n\r\n        if (item._active) {\r\n          if (item._total > anims.duration) {\r\n            // if the animation has been updated and its duration prolonged,\r\n            // update to total duration of current animations run (for progress event)\r\n            anims.duration = item._total;\r\n          }\r\n          item.tick(date);\r\n          draw = true;\r\n        } else {\r\n          // Remove the item by replacing it with last item and removing the last\r\n          // A lot faster than splice.\r\n          items[i] = items[items.length - 1];\r\n          items.pop();\r\n        }\r\n      }\r\n\r\n      if (draw) {\r\n        chart.draw();\r\n        this._notify(chart, anims, date, 'progress');\r\n      }\r\n\r\n      if (!items.length) {\r\n        anims.running = false;\r\n        this._notify(chart, anims, date, 'complete');\r\n        anims.initial = false;\r\n      }\r\n\r\n      remaining += items.length;\r\n    });\r\n\r\n    this._lastDate = date;\r\n\r\n    if (remaining === 0) {\r\n      this._running = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getAnims(chart) {\r\n    const charts = this._charts;\r\n    let anims = charts.get(chart);\r\n    if (!anims) {\r\n      anims = {\r\n        running: false,\r\n        initial: true,\r\n        items: [],\r\n        listeners: {\r\n          complete: [],\r\n          progress: []\r\n        }\r\n      };\r\n      charts.set(chart, anims);\r\n    }\r\n    return anims;\r\n  }\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @param {string} event - event name\r\n\t * @param {Function} cb - callback\r\n\t */\r\n  listen(chart, event, cb) {\r\n    this._getAnims(chart).listeners[event].push(cb);\r\n  }\r\n\r\n  /**\r\n\t * Add animations\r\n\t * @param {Chart} chart\r\n\t * @param {Animation[]} items - animations\r\n\t */\r\n  add(chart, items) {\r\n    if (!items || !items.length) {\r\n      return;\r\n    }\r\n    this._getAnims(chart).items.push(...items);\r\n  }\r\n\r\n  /**\r\n\t * Counts number of active animations for the chart\r\n\t * @param {Chart} chart\r\n\t */\r\n  has(chart) {\r\n    return this._getAnims(chart).items.length > 0;\r\n  }\r\n\r\n  /**\r\n\t * Start animating (all charts)\r\n\t * @param {Chart} chart\r\n\t */\r\n  start(chart) {\r\n    const anims = this._charts.get(chart);\r\n    if (!anims) {\r\n      return;\r\n    }\r\n    anims.running = true;\r\n    anims.start = Date.now();\r\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\r\n    this._refresh();\r\n  }\r\n\r\n  running(chart) {\r\n    if (!this._running) {\r\n      return false;\r\n    }\r\n    const anims = this._charts.get(chart);\r\n    if (!anims || !anims.running || !anims.items.length) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n\t * Stop all animations for the chart\r\n\t * @param {Chart} chart\r\n\t */\r\n  stop(chart) {\r\n    const anims = this._charts.get(chart);\r\n    if (!anims || !anims.items.length) {\r\n      return;\r\n    }\r\n    const items = anims.items;\r\n    let i = items.length - 1;\r\n\r\n    for (; i >= 0; --i) {\r\n      items[i].cancel();\r\n    }\r\n    anims.items = [];\r\n    this._notify(chart, anims, Date.now(), 'complete');\r\n  }\r\n\r\n  /**\r\n\t * Remove chart from Animator\r\n\t * @param {Chart} chart\r\n\t */\r\n  remove(chart) {\r\n    return this._charts.delete(chart);\r\n  }\r\n}\r\n\r\n// singleton instance\r\nexport default /* #__PURE__ */ new Animator();\r\n","/*!\n * @kurkle/color v0.2.1\n * https://github.com/kurkle/color#readme\n * (c) 2022 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","import colorLib, {Color} from '@kurkle/color';\r\n\r\nexport function isPatternOrGradient(value: unknown): value is CanvasPattern | CanvasGradient {\r\n  if (value && typeof value === 'object') {\r\n    const type = value.toString();\r\n    return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function color(value: CanvasGradient): CanvasGradient;\r\nexport function color(value: CanvasPattern): CanvasPattern;\r\nexport function color(\r\n  value:\r\n  | string\r\n  | { r: number; g: number; b: number; a: number }\r\n  | [number, number, number]\r\n  | [number, number, number, number]\r\n): Color;\r\nexport function color(value) {\r\n  return isPatternOrGradient(value) ? value : colorLib(value);\r\n}\r\n\r\nexport function getHoverColor(value: CanvasGradient): CanvasGradient;\r\nexport function getHoverColor(value: CanvasPattern): CanvasPattern;\r\nexport function getHoverColor(value: string): string;\r\nexport function getHoverColor(value) {\r\n  return isPatternOrGradient(value)\r\n    ? value\r\n    : colorLib(value).saturate(0.5).darken(0.1).hexString();\r\n}\r\n","const numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\r\nconst colors = ['color', 'borderColor', 'backgroundColor'];\r\n\r\nexport function applyAnimationsDefaults(defaults) {\r\n  defaults.set('animation', {\r\n    delay: undefined,\r\n    duration: 1000,\r\n    easing: 'easeOutQuart',\r\n    fn: undefined,\r\n    from: undefined,\r\n    loop: undefined,\r\n    to: undefined,\r\n    type: undefined,\r\n  });\r\n\r\n  defaults.describe('animation', {\r\n    _fallback: false,\r\n    _indexable: false,\r\n    _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',\r\n  });\r\n\r\n  defaults.set('animations', {\r\n    colors: {\r\n      type: 'color',\r\n      properties: colors\r\n    },\r\n    numbers: {\r\n      type: 'number',\r\n      properties: numbers\r\n    },\r\n  });\r\n\r\n  defaults.describe('animations', {\r\n    _fallback: 'animation',\r\n  });\r\n\r\n  defaults.set('transitions', {\r\n    active: {\r\n      animation: {\r\n        duration: 400\r\n      }\r\n    },\r\n    resize: {\r\n      animation: {\r\n        duration: 0\r\n      }\r\n    },\r\n    show: {\r\n      animations: {\r\n        colors: {\r\n          from: 'transparent'\r\n        },\r\n        visible: {\r\n          type: 'boolean',\r\n          duration: 0 // show immediately\r\n        },\r\n      }\r\n    },\r\n    hide: {\r\n      animations: {\r\n        colors: {\r\n          to: 'transparent'\r\n        },\r\n        visible: {\r\n          type: 'boolean',\r\n          easing: 'linear',\r\n          fn: v => v | 0 // for keeping the dataset visible all the way through the animation\r\n        },\r\n      }\r\n    }\r\n  });\r\n}\r\n","\r\nconst intlCache = new Map<string, Intl.NumberFormat>();\r\n\r\nfunction getNumberFormat(locale: string, options?: Intl.NumberFormatOptions) {\r\n  options = options || {};\r\n  const cacheKey = locale + JSON.stringify(options);\r\n  let formatter = intlCache.get(cacheKey);\r\n  if (!formatter) {\r\n    formatter = new Intl.NumberFormat(locale, options);\r\n    intlCache.set(cacheKey, formatter);\r\n  }\r\n  return formatter;\r\n}\r\n\r\nexport function formatNumber(num: number, locale: string, options?: Intl.NumberFormatOptions) {\r\n  return getNumberFormat(locale, options).format(num);\r\n}\r\n","import {isArray} from '../helpers/helpers.core';\r\nimport {formatNumber} from '../helpers/helpers.intl';\r\nimport {log10} from '../helpers/helpers.math';\r\n\r\n/**\r\n * Namespace to hold formatters for different types of ticks\r\n * @namespace Chart.Ticks.formatters\r\n */\r\nconst formatters = {\r\n  /**\r\n   * Formatter for value labels\r\n   * @method Chart.Ticks.formatters.values\r\n   * @param value the value to display\r\n   * @return {string|string[]} the label to display\r\n   */\r\n  values(value) {\r\n    return isArray(value) ? /** @type {string[]} */ (value) : '' + value;\r\n  },\r\n\r\n  /**\r\n   * Formatter for numeric ticks\r\n   * @method Chart.Ticks.formatters.numeric\r\n   * @param tickValue {number} the value to be formatted\r\n   * @param index {number} the position of the tickValue parameter in the ticks array\r\n   * @param ticks {object[]} the list of ticks being converted\r\n   * @return {string} string representation of the tickValue parameter\r\n   */\r\n  numeric(tickValue, index, ticks) {\r\n    if (tickValue === 0) {\r\n      return '0'; // never show decimal places for 0\r\n    }\r\n\r\n    const locale = this.chart.options.locale;\r\n    let notation;\r\n    let delta = tickValue; // This is used when there are less than 2 ticks as the tick interval.\r\n\r\n    if (ticks.length > 1) {\r\n      // all ticks are small or there huge numbers; use scientific notation\r\n      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\r\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\r\n        notation = 'scientific';\r\n      }\r\n\r\n      delta = calculateDelta(tickValue, ticks);\r\n    }\r\n\r\n    const logDelta = log10(Math.abs(delta));\r\n    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0); // toFixed has a max of 20 decimal places\r\n\r\n    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};\r\n    Object.assign(options, this.options.ticks.format);\r\n\r\n    return formatNumber(tickValue, locale, options);\r\n  },\r\n\r\n\r\n  /**\r\n   * Formatter for logarithmic ticks\r\n   * @method Chart.Ticks.formatters.logarithmic\r\n   * @param tickValue {number} the value to be formatted\r\n   * @param index {number} the position of the tickValue parameter in the ticks array\r\n   * @param ticks {object[]} the list of ticks being converted\r\n   * @return {string} string representation of the tickValue parameter\r\n   */\r\n  logarithmic(tickValue, index, ticks) {\r\n    if (tickValue === 0) {\r\n      return '0';\r\n    }\r\n    const remain = ticks[index].significand || (tickValue / (Math.pow(10, Math.floor(log10(tickValue)))));\r\n    if ([1, 2, 3, 5, 10, 15].includes(remain) || index > 0.8 * ticks.length) {\r\n      return formatters.numeric.call(this, tickValue, index, ticks);\r\n    }\r\n    return '';\r\n  }\r\n\r\n};\r\n\r\n\r\nfunction calculateDelta(tickValue, ticks) {\r\n  // Figure out how many digits to show\r\n  // The space between the first two ticks might be smaller than normal spacing\r\n  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\r\n\r\n  // If we have a number like 2.5 as the delta, figure out how many decimal places we need\r\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\r\n    // not an integer\r\n    delta = tickValue - Math.floor(tickValue);\r\n  }\r\n  return delta;\r\n}\r\n\r\n/**\r\n * Namespace to hold static tick generation functions\r\n * @namespace Chart.Ticks\r\n */\r\nexport default {formatters};\r\n","import {getHoverColor} from '../helpers/helpers.color';\r\nimport {isObject, merge, valueOrDefault} from '../helpers/helpers.core';\r\nimport {applyAnimationsDefaults} from './core.animations.defaults';\r\nimport {applyLayoutsDefaults} from './core.layouts.defaults';\r\nimport {applyScaleDefaults} from './core.scale.defaults';\r\n\r\nexport const overrides = Object.create(null);\r\nexport const descriptors = Object.create(null);\r\n\r\n/**\r\n * @param {object} node\r\n * @param {string} key\r\n * @return {object}\r\n */\r\nfunction getScope(node, key) {\r\n  if (!key) {\r\n    return node;\r\n  }\r\n  const keys = key.split('.');\r\n  for (let i = 0, n = keys.length; i < n; ++i) {\r\n    const k = keys[i];\r\n    node = node[k] || (node[k] = Object.create(null));\r\n  }\r\n  return node;\r\n}\r\n\r\nfunction set(root, scope, values) {\r\n  if (typeof scope === 'string') {\r\n    return merge(getScope(root, scope), values);\r\n  }\r\n  return merge(getScope(root, ''), scope);\r\n}\r\n\r\n/**\r\n * Please use the module's default export which provides a singleton instance\r\n * Note: class is exported for typedoc\r\n */\r\nexport class Defaults {\r\n  constructor(_descriptors, _appliers) {\r\n    this.animation = undefined;\r\n    this.backgroundColor = 'rgba(0,0,0,0.1)';\r\n    this.borderColor = 'rgba(0,0,0,0.1)';\r\n    this.color = '#666';\r\n    this.datasets = {};\r\n    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();\r\n    this.elements = {};\r\n    this.events = [\r\n      'mousemove',\r\n      'mouseout',\r\n      'click',\r\n      'touchstart',\r\n      'touchmove'\r\n    ];\r\n    this.font = {\r\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n      size: 12,\r\n      style: 'normal',\r\n      lineHeight: 1.2,\r\n      weight: null\r\n    };\r\n    this.hover = {};\r\n    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\r\n    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\r\n    this.hoverColor = (ctx, options) => getHoverColor(options.color);\r\n    this.indexAxis = 'x';\r\n    this.interaction = {\r\n      mode: 'nearest',\r\n      intersect: true,\r\n      includeInvisible: false\r\n    };\r\n    this.maintainAspectRatio = true;\r\n    this.onHover = null;\r\n    this.onClick = null;\r\n    this.parsing = true;\r\n    this.plugins = {};\r\n    this.responsive = true;\r\n    this.scale = undefined;\r\n    this.scales = {};\r\n    this.showLine = true;\r\n    this.drawActiveElementsOnTop = true;\r\n\r\n    this.describe(_descriptors);\r\n    this.apply(_appliers);\r\n  }\r\n\r\n  /**\r\n\t * @param {string|object} scope\r\n\t * @param {object} [values]\r\n\t */\r\n  set(scope, values) {\r\n    return set(this, scope, values);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} scope\r\n\t */\r\n  get(scope) {\r\n    return getScope(this, scope);\r\n  }\r\n\r\n  /**\r\n\t * @param {string|object} scope\r\n\t * @param {object} [values]\r\n\t */\r\n  describe(scope, values) {\r\n    return set(descriptors, scope, values);\r\n  }\r\n\r\n  override(scope, values) {\r\n    return set(overrides, scope, values);\r\n  }\r\n\r\n  /**\r\n\t * Routes the named defaults to fallback to another scope/name.\r\n\t * This routing is useful when those target values, like defaults.color, are changed runtime.\r\n\t * If the values would be copied, the runtime change would not take effect. By routing, the\r\n\t * fallback is evaluated at each access, so its always up to date.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * \tdefaults.route('elements.arc', 'backgroundColor', '', 'color')\r\n\t *   - reads the backgroundColor from defaults.color when undefined locally\r\n\t *\r\n\t * @param {string} scope Scope this route applies to.\r\n\t * @param {string} name Property name that should be routed to different namespace when not defined here.\r\n\t * @param {string} targetScope The namespace where those properties should be routed to.\r\n\t * Empty string ('') is the root of defaults.\r\n\t * @param {string} targetName The target name in the target scope the property should be routed to.\r\n\t */\r\n  route(scope, name, targetScope, targetName) {\r\n    const scopeObject = getScope(this, scope);\r\n    const targetScopeObject = getScope(this, targetScope);\r\n    const privateName = '_' + name;\r\n\r\n    Object.defineProperties(scopeObject, {\r\n      // A private property is defined to hold the actual value, when this property is set in its scope (set in the setter)\r\n      [privateName]: {\r\n        value: scopeObject[name],\r\n        writable: true\r\n      },\r\n      // The actual property is defined as getter/setter so we can do the routing when value is not locally set.\r\n      [name]: {\r\n        enumerable: true,\r\n        get() {\r\n          const local = this[privateName];\r\n          const target = targetScopeObject[targetName];\r\n          if (isObject(local)) {\r\n            return Object.assign({}, target, local);\r\n          }\r\n          return valueOrDefault(local, target);\r\n        },\r\n        set(value) {\r\n          this[privateName] = value;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  apply(appliers) {\r\n    appliers.forEach((apply) => apply(this));\r\n  }\r\n}\r\n\r\n// singleton instance\r\nexport default /* #__PURE__ */ new Defaults({\r\n  _scriptable: (name) => !name.startsWith('on'),\r\n  _indexable: (name) => name !== 'events',\r\n  hover: {\r\n    _fallback: 'interaction'\r\n  },\r\n  interaction: {\r\n    _scriptable: false,\r\n    _indexable: false,\r\n  }\r\n}, [applyAnimationsDefaults, applyLayoutsDefaults, applyScaleDefaults]);\r\n","export function applyLayoutsDefaults(defaults) {\r\n  defaults.set('layout', {\r\n    autoPadding: true,\r\n    padding: {\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0\r\n    }\r\n  });\r\n}\r\n","import Ticks from './core.ticks';\r\n\r\nexport function applyScaleDefaults(defaults) {\r\n  defaults.set('scale', {\r\n    display: true,\r\n    offset: false,\r\n    reverse: false,\r\n    beginAtZero: false,\r\n\r\n    /**\r\n     * Scale boundary strategy (bypassed by min/max time options)\r\n     * - `data`: make sure data are fully visible, ticks outside are removed\r\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\r\n     * @see https://github.com/chartjs/Chart.js/pull/4556\r\n     * @since 3.0.0\r\n     */\r\n    bounds: 'ticks',\r\n\r\n    /**\r\n     * Addition grace added to max and reduced from min data value.\r\n     * @since 3.0.0\r\n     */\r\n    grace: 0,\r\n\r\n    // grid line settings\r\n    grid: {\r\n      display: true,\r\n      lineWidth: 1,\r\n      drawOnChartArea: true,\r\n      drawTicks: true,\r\n      tickLength: 8,\r\n      tickWidth: (_ctx, options) => options.lineWidth,\r\n      tickColor: (_ctx, options) => options.color,\r\n      offset: false,\r\n    },\r\n\r\n    border: {\r\n      display: true,\r\n      dash: [],\r\n      dashOffset: 0.0,\r\n      width: 1\r\n    },\r\n\r\n    // scale title\r\n    title: {\r\n      // display property\r\n      display: false,\r\n\r\n      // actual label\r\n      text: '',\r\n\r\n      // top/bottom padding\r\n      padding: {\r\n        top: 4,\r\n        bottom: 4\r\n      }\r\n    },\r\n\r\n    // label settings\r\n    ticks: {\r\n      minRotation: 0,\r\n      maxRotation: 50,\r\n      mirror: false,\r\n      textStrokeWidth: 0,\r\n      textStrokeColor: '',\r\n      padding: 3,\r\n      display: true,\r\n      autoSkip: true,\r\n      autoSkipPadding: 3,\r\n      labelOffset: 0,\r\n      // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\r\n      callback: Ticks.formatters.values,\r\n      minor: {},\r\n      major: {},\r\n      align: 'center',\r\n      crossAlign: 'near',\r\n\r\n      showLabelBackdrop: false,\r\n      backdropColor: 'rgba(255, 255, 255, 0.75)',\r\n      backdropPadding: 2,\r\n    }\r\n  });\r\n\r\n  defaults.route('scale.ticks', 'color', '', 'color');\r\n  defaults.route('scale.grid', 'color', '', 'borderColor');\r\n  defaults.route('scale.border', 'color', '', 'borderColor');\r\n  defaults.route('scale.title', 'color', '', 'color');\r\n\r\n  defaults.describe('scale', {\r\n    _fallback: false,\r\n    _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\r\n    _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash',\r\n  });\r\n\r\n  defaults.describe('scales', {\r\n    _fallback: 'scale',\r\n  });\r\n\r\n  defaults.describe('scale.ticks', {\r\n    _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',\r\n    _indexable: (name) => name !== 'backdropPadding',\r\n  });\r\n}\r\n","import {ChartArea, Scale} from '../../types';\r\nimport Chart from '../core/core.controller';\r\nimport {ChartEvent} from '../types';\r\nimport {INFINITY} from './helpers.math';\r\n\r\n/**\r\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\r\n * necessary to avoid duplicates with `export * from './helpers`; see\r\n * https://github.com/microsoft/TypeScript/issues/46011\r\n * @typedef { import(\"../core/core.controller\").default } dom.Chart\r\n * @typedef { import('../../types').ChartEvent } ChartEvent\r\n */\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _isDomSupported(): boolean {\r\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _getParentNode(domNode: HTMLCanvasElement): HTMLCanvasElement {\r\n  let parent = domNode.parentNode;\r\n  if (parent && parent.toString() === '[object ShadowRoot]') {\r\n    parent = (parent as ShadowRoot).host;\r\n  }\r\n  return parent as HTMLCanvasElement;\r\n}\r\n\r\n/**\r\n * convert max-width/max-height values that may be percentages into a number\r\n * @private\r\n */\r\n\r\nfunction parseMaxStyle(styleValue: string | number, node: HTMLElement, parentProperty: string) {\r\n  let valueInPixels: number;\r\n  if (typeof styleValue === 'string') {\r\n    valueInPixels = parseInt(styleValue, 10);\r\n\r\n    if (styleValue.indexOf('%') !== -1) {\r\n      // percentage * size in dimension\r\n      valueInPixels = (valueInPixels / 100) * node.parentNode[parentProperty];\r\n    }\r\n  } else {\r\n    valueInPixels = styleValue;\r\n  }\r\n\r\n  return valueInPixels;\r\n}\r\n\r\nconst getComputedStyle = (element: HTMLElement): CSSStyleDeclaration =>\r\n  element.ownerDocument.defaultView.getComputedStyle(element, null);\r\n\r\nexport function getStyle(el: HTMLElement, property: string): string {\r\n  return getComputedStyle(el).getPropertyValue(property);\r\n}\r\n\r\nconst positions = ['top', 'right', 'bottom', 'left'];\r\nfunction getPositionedStyle(styles: CSSStyleDeclaration, style: string, suffix?: string): ChartArea {\r\n  const result = {} as ChartArea;\r\n  suffix = suffix ? '-' + suffix : '';\r\n  for (let i = 0; i < 4; i++) {\r\n    const pos = positions[i];\r\n    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\r\n  }\r\n  result.width = result.left + result.right;\r\n  result.height = result.top + result.bottom;\r\n  return result;\r\n}\r\n\r\nconst useOffsetPos = (x: number, y: number, target: HTMLElement | EventTarget) =>\r\n  (x > 0 || y > 0) && (!target || !(target as HTMLElement).shadowRoot);\r\n\r\n/**\r\n * @param e\r\n * @param canvas\r\n * @returns Canvas position\r\n */\r\nfunction getCanvasPosition(\r\n  e: Event | TouchEvent | MouseEvent,\r\n  canvas: HTMLCanvasElement\r\n): {\r\n    x: number;\r\n    y: number;\r\n    box: boolean;\r\n  } {\r\n  const touches = (e as TouchEvent).touches;\r\n  const source = (touches && touches.length ? touches[0] : e) as MouseEvent;\r\n  const {offsetX, offsetY} = source as MouseEvent;\r\n  let box = false;\r\n  let x, y;\r\n  if (useOffsetPos(offsetX, offsetY, e.target)) {\r\n    x = offsetX;\r\n    y = offsetY;\r\n  } else {\r\n    const rect = canvas.getBoundingClientRect();\r\n    x = source.clientX - rect.left;\r\n    y = source.clientY - rect.top;\r\n    box = true;\r\n  }\r\n  return {x, y, box};\r\n}\r\n\r\n/**\r\n * Gets an event's x, y coordinates, relative to the chart area\r\n * @param event\r\n * @param chart\r\n * @returns x and y coordinates of the event\r\n */\r\n\r\nexport function getRelativePosition(\r\n  event: Event | ChartEvent | TouchEvent | MouseEvent,\r\n  chart: Chart\r\n): { x: number; y: number } {\r\n  if ('native' in event) {\r\n    return event;\r\n  }\r\n\r\n  const {canvas, currentDevicePixelRatio} = chart;\r\n  const style = getComputedStyle(canvas);\r\n  const borderBox = style.boxSizing === 'border-box';\r\n  const paddings = getPositionedStyle(style, 'padding');\r\n  const borders = getPositionedStyle(style, 'border', 'width');\r\n  const {x, y, box} = getCanvasPosition(event, canvas);\r\n  const xOffset = paddings.left + (box && borders.left);\r\n  const yOffset = paddings.top + (box && borders.top);\r\n\r\n  let {width, height} = chart;\r\n  if (borderBox) {\r\n    width -= paddings.width + borders.width;\r\n    height -= paddings.height + borders.height;\r\n  }\r\n  return {\r\n    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\r\n    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\r\n  };\r\n}\r\n\r\nfunction getContainerSize(canvas: HTMLCanvasElement, width: number, height: number): Partial<Scale> {\r\n  let maxWidth: number, maxHeight: number;\r\n\r\n  if (width === undefined || height === undefined) {\r\n    const container = _getParentNode(canvas);\r\n    if (!container) {\r\n      width = canvas.clientWidth;\r\n      height = canvas.clientHeight;\r\n    } else {\r\n      const rect = container.getBoundingClientRect(); // this is the border box of the container\r\n      const containerStyle = getComputedStyle(container);\r\n      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\r\n      const containerPadding = getPositionedStyle(containerStyle, 'padding');\r\n      width = rect.width - containerPadding.width - containerBorder.width;\r\n      height = rect.height - containerPadding.height - containerBorder.height;\r\n      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\r\n      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\r\n    }\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    maxWidth: maxWidth || INFINITY,\r\n    maxHeight: maxHeight || INFINITY\r\n  };\r\n}\r\n\r\nconst round1 = (v: number) => Math.round(v * 10) / 10;\r\n\r\n// eslint-disable-next-line complexity\r\nexport function getMaximumSize(\r\n  canvas: HTMLCanvasElement,\r\n  bbWidth?: number,\r\n  bbHeight?: number,\r\n  aspectRatio?: number\r\n): { width: number; height: number } {\r\n  const style = getComputedStyle(canvas);\r\n  const margins = getPositionedStyle(style, 'margin');\r\n  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\r\n  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\r\n  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\r\n  let {width, height} = containerSize;\r\n\r\n  if (style.boxSizing === 'content-box') {\r\n    const borders = getPositionedStyle(style, 'border', 'width');\r\n    const paddings = getPositionedStyle(style, 'padding');\r\n    width -= paddings.width + borders.width;\r\n    height -= paddings.height + borders.height;\r\n  }\r\n  width = Math.max(0, width - margins.width);\r\n  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);\r\n  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\r\n  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\r\n  if (width && !height) {\r\n    // https://github.com/chartjs/Chart.js/issues/4659\r\n    // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\r\n    height = round1(width / 2);\r\n  }\r\n\r\n  const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\r\n\r\n  if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\r\n    height = containerSize.height;\r\n    width = round1(Math.floor(height * aspectRatio));\r\n  }\r\n\r\n  return {width, height};\r\n}\r\n\r\n/**\r\n * @param chart\r\n * @param forceRatio\r\n * @param forceStyle\r\n * @returns True if the canvas context size or transformation has changed.\r\n */\r\nexport function retinaScale(\r\n  chart: Chart,\r\n  forceRatio: number,\r\n  forceStyle?: boolean\r\n): boolean | void {\r\n  const pixelRatio = forceRatio || 1;\r\n  const deviceHeight = Math.floor(chart.height * pixelRatio);\r\n  const deviceWidth = Math.floor(chart.width * pixelRatio);\r\n\r\n  chart.height = deviceHeight / pixelRatio;\r\n  chart.width = deviceWidth / pixelRatio;\r\n\r\n  const canvas = chart.canvas;\r\n\r\n  // If no style has been set on the canvas, the render size is used as display size,\r\n  // making the chart visually bigger, so let's enforce it to the \"correct\" values.\r\n  // See https://github.com/chartjs/Chart.js/issues/3575\r\n  if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {\r\n    canvas.style.height = `${chart.height}px`;\r\n    canvas.style.width = `${chart.width}px`;\r\n  }\r\n\r\n  if (chart.currentDevicePixelRatio !== pixelRatio\r\n      || canvas.height !== deviceHeight\r\n      || canvas.width !== deviceWidth) {\r\n    chart.currentDevicePixelRatio = pixelRatio;\r\n    canvas.height = deviceHeight;\r\n    canvas.width = deviceWidth;\r\n    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Detects support for options object argument in addEventListener.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\r\n * @private\r\n */\r\nexport const supportsEventListenerOptions = (function() {\r\n  let passiveSupported = false;\r\n  try {\r\n    const options = {\r\n      get passive() { // This function will be called when the browser attempts to access the passive property.\r\n        passiveSupported = true;\r\n        return false;\r\n      }\r\n    } as EventListenerOptions;\r\n\r\n    window.addEventListener('test', null, options);\r\n    window.removeEventListener('test', null, options);\r\n  } catch (e) {\r\n    // continue regardless of error\r\n  }\r\n  return passiveSupported;\r\n}());\r\n\r\n/**\r\n * The \"used\" size is the final value of a dimension property after all calculations have\r\n * been performed. This method uses the computed style of `element` but returns undefined\r\n * if the computed style is not expressed in pixels. That can happen in some cases where\r\n * `element` has a size relative to its parent and this last one is not yet displayed,\r\n * for example because of `display: none` on a parent node.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\r\n * @returns Size in pixels or undefined if unknown.\r\n */\r\n\r\nexport function readUsedSize(\r\n  element: HTMLElement,\r\n  property: 'width' | 'height'\r\n): number | undefined {\r\n  const value = getStyle(element, property);\r\n  const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\r\n  return matches ? +matches[1] : undefined;\r\n}\r\n","import {isArray, isNullOrUndef} from './helpers.core';\r\nimport {PI, TAU, HALF_PI, QUARTER_PI, TWO_THIRDS_PI, RAD_PER_DEG} from './helpers.math';\r\n\r\n/**\r\n * Note: typedefs are auto-exported, so use a made-up `canvas` namespace where\r\n * necessary to avoid duplicates with `export * from './helpers`; see\r\n * https://github.com/microsoft/TypeScript/issues/46011\r\n * @typedef { import(\"../core/core.controller\").default } canvas.Chart\r\n * @typedef { import(\"../../types\").Point } Point\r\n */\r\n\r\n/**\r\n * @namespace Chart.helpers.canvas\r\n */\r\n\r\n/**\r\n * Converts the given font object into a CSS font string.\r\n * @param {object} font - A font object.\r\n * @return {string|null} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\r\n * @private\r\n */\r\nexport function toFontString(font) {\r\n  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\r\n    return null;\r\n  }\r\n\r\n  return (font.style ? font.style + ' ' : '')\r\n\t\t+ (font.weight ? font.weight + ' ' : '')\r\n\t\t+ font.size + 'px '\r\n\t\t+ font.family;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _measureText(ctx, data, gc, longest, string) {\r\n  let textWidth = data[string];\r\n  if (!textWidth) {\r\n    textWidth = data[string] = ctx.measureText(string).width;\r\n    gc.push(string);\r\n  }\r\n  if (textWidth > longest) {\r\n    longest = textWidth;\r\n  }\r\n  return longest;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _longestText(ctx, font, arrayOfThings, cache) {\r\n  cache = cache || {};\r\n  let data = cache.data = cache.data || {};\r\n  let gc = cache.garbageCollect = cache.garbageCollect || [];\r\n\r\n  if (cache.font !== font) {\r\n    data = cache.data = {};\r\n    gc = cache.garbageCollect = [];\r\n    cache.font = font;\r\n  }\r\n\r\n  ctx.save();\r\n\r\n  ctx.font = font;\r\n  let longest = 0;\r\n  const ilen = arrayOfThings.length;\r\n  let i, j, jlen, thing, nestedThing;\r\n  for (i = 0; i < ilen; i++) {\r\n    thing = arrayOfThings[i];\r\n\r\n    // Undefined strings and arrays should not be measured\r\n    if (thing !== undefined && thing !== null && isArray(thing) !== true) {\r\n      longest = _measureText(ctx, data, gc, longest, thing);\r\n    } else if (isArray(thing)) {\r\n      // if it is an array lets measure each element\r\n      // to do maybe simplify this function a bit so we can do this more recursively?\r\n      for (j = 0, jlen = thing.length; j < jlen; j++) {\r\n        nestedThing = thing[j];\r\n        // Undefined strings and arrays should not be measured\r\n        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\r\n          longest = _measureText(ctx, data, gc, longest, nestedThing);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ctx.restore();\r\n\r\n  const gcLen = gc.length / 2;\r\n  if (gcLen > arrayOfThings.length) {\r\n    for (i = 0; i < gcLen; i++) {\r\n      delete data[gc[i]];\r\n    }\r\n    gc.splice(0, gcLen);\r\n  }\r\n  return longest;\r\n}\r\n\r\n/**\r\n * Returns the aligned pixel value to avoid anti-aliasing blur\r\n * @param {canvas.Chart} chart - The chart instance.\r\n * @param {number} pixel - A pixel value.\r\n * @param {number} width - The width of the element.\r\n * @returns {number} The aligned pixel value.\r\n * @private\r\n */\r\nexport function _alignPixel(chart, pixel, width) {\r\n  const devicePixelRatio = chart.currentDevicePixelRatio;\r\n  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\r\n  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\r\n}\r\n\r\n/**\r\n * Clears the entire canvas.\r\n * @param {HTMLCanvasElement} canvas\r\n * @param {CanvasRenderingContext2D} [ctx]\r\n */\r\nexport function clearCanvas(canvas, ctx) {\r\n  ctx = ctx || canvas.getContext('2d');\r\n\r\n  ctx.save();\r\n  // canvas.width and canvas.height do not consider the canvas transform,\r\n  // while clearRect does\r\n  ctx.resetTransform();\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  ctx.restore();\r\n}\r\n\r\nexport function drawPoint(ctx, options, x, y) {\r\n  drawPointLegend(ctx, options, x, y, null);\r\n}\r\n\r\nexport function drawPointLegend(ctx, options, x, y, w) {\r\n  let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\r\n  const style = options.pointStyle;\r\n  const rotation = options.rotation;\r\n  const radius = options.radius;\r\n  let rad = (rotation || 0) * RAD_PER_DEG;\r\n\r\n  if (style && typeof style === 'object') {\r\n    type = style.toString();\r\n    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\r\n      ctx.save();\r\n      ctx.translate(x, y);\r\n      ctx.rotate(rad);\r\n      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\r\n      ctx.restore();\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (isNaN(radius) || radius <= 0) {\r\n    return;\r\n  }\r\n\r\n  ctx.beginPath();\r\n\r\n  switch (style) {\r\n  // Default includes circle\r\n  default:\r\n    if (w) {\r\n      ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\r\n    } else {\r\n      ctx.arc(x, y, radius, 0, TAU);\r\n    }\r\n    ctx.closePath();\r\n    break;\r\n  case 'triangle':\r\n    width = w ? w / 2 : radius;\r\n    ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\r\n    rad += TWO_THIRDS_PI;\r\n    ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\r\n    rad += TWO_THIRDS_PI;\r\n    ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\r\n    ctx.closePath();\r\n    break;\r\n  case 'rectRounded':\r\n    // NOTE: the rounded rect implementation changed to use `arc` instead of\r\n    // `quadraticCurveTo` since it generates better results when rect is\r\n    // almost a circle. 0.516 (instead of 0.5) produces results with visually\r\n    // closer proportion to the previous impl and it is inscribed in the\r\n    // circle with `radius`. For more details, see the following PRs:\r\n    // https://github.com/chartjs/Chart.js/issues/5597\r\n    // https://github.com/chartjs/Chart.js/issues/5858\r\n    cornerRadius = radius * 0.516;\r\n    size = radius - cornerRadius;\r\n    xOffset = Math.cos(rad + QUARTER_PI) * size;\r\n    xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\r\n    yOffset = Math.sin(rad + QUARTER_PI) * size;\r\n    yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\r\n    ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\r\n    ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\r\n    ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\r\n    ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\r\n    ctx.closePath();\r\n    break;\r\n  case 'rect':\r\n    if (!rotation) {\r\n      size = Math.SQRT1_2 * radius;\r\n      width = w ? w / 2 : size;\r\n      ctx.rect(x - width, y - size, 2 * width, 2 * size);\r\n      break;\r\n    }\r\n    rad += QUARTER_PI;\r\n    /* falls through */\r\n  case 'rectRot':\r\n    xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n    xOffset = Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n    ctx.moveTo(x - xOffsetW, y - yOffset);\r\n    ctx.lineTo(x + yOffsetW, y - xOffset);\r\n    ctx.lineTo(x + xOffsetW, y + yOffset);\r\n    ctx.lineTo(x - yOffsetW, y + xOffset);\r\n    ctx.closePath();\r\n    break;\r\n  case 'crossRot':\r\n    rad += QUARTER_PI;\r\n    /* falls through */\r\n  case 'cross':\r\n    xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n    xOffset = Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n    ctx.moveTo(x - xOffsetW, y - yOffset);\r\n    ctx.lineTo(x + xOffsetW, y + yOffset);\r\n    ctx.moveTo(x + yOffsetW, y - xOffset);\r\n    ctx.lineTo(x - yOffsetW, y + xOffset);\r\n    break;\r\n  case 'star':\r\n    xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n    xOffset = Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n    ctx.moveTo(x - xOffsetW, y - yOffset);\r\n    ctx.lineTo(x + xOffsetW, y + yOffset);\r\n    ctx.moveTo(x + yOffsetW, y - xOffset);\r\n    ctx.lineTo(x - yOffsetW, y + xOffset);\r\n    rad += QUARTER_PI;\r\n    xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n    xOffset = Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n    ctx.moveTo(x - xOffsetW, y - yOffset);\r\n    ctx.lineTo(x + xOffsetW, y + yOffset);\r\n    ctx.moveTo(x + yOffsetW, y - xOffset);\r\n    ctx.lineTo(x - yOffsetW, y + xOffset);\r\n    break;\r\n  case 'line':\r\n    xOffset = w ? w / 2 : Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    ctx.moveTo(x - xOffset, y - yOffset);\r\n    ctx.lineTo(x + xOffset, y + yOffset);\r\n    break;\r\n  case 'dash':\r\n    ctx.moveTo(x, y);\r\n    ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\r\n    break;\r\n  }\r\n\r\n  ctx.fill();\r\n  if (options.borderWidth > 0) {\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\n/**\r\n * Returns true if the point is inside the rectangle\r\n * @param {Point} point - The point to test\r\n * @param {object} area - The rectangle\r\n * @param {number} [margin] - allowed margin\r\n * @returns {boolean}\r\n * @private\r\n */\r\nexport function _isPointInArea(point, area, margin) {\r\n  margin = margin || 0.5; // margin - default is to match rounded decimals\r\n\r\n  return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&\r\n\t\tpoint.y > area.top - margin && point.y < area.bottom + margin);\r\n}\r\n\r\nexport function clipArea(ctx, area) {\r\n  ctx.save();\r\n  ctx.beginPath();\r\n  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\r\n  ctx.clip();\r\n}\r\n\r\nexport function unclipArea(ctx) {\r\n  ctx.restore();\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _steppedLineTo(ctx, previous, target, flip, mode) {\r\n  if (!previous) {\r\n    return ctx.lineTo(target.x, target.y);\r\n  }\r\n  if (mode === 'middle') {\r\n    const midpoint = (previous.x + target.x) / 2.0;\r\n    ctx.lineTo(midpoint, previous.y);\r\n    ctx.lineTo(midpoint, target.y);\r\n  } else if (mode === 'after' !== !!flip) {\r\n    ctx.lineTo(previous.x, target.y);\r\n  } else {\r\n    ctx.lineTo(target.x, previous.y);\r\n  }\r\n  ctx.lineTo(target.x, target.y);\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _bezierCurveTo(ctx, previous, target, flip) {\r\n  if (!previous) {\r\n    return ctx.lineTo(target.x, target.y);\r\n  }\r\n  ctx.bezierCurveTo(\r\n    flip ? previous.cp1x : previous.cp2x,\r\n    flip ? previous.cp1y : previous.cp2y,\r\n    flip ? target.cp2x : target.cp1x,\r\n    flip ? target.cp2y : target.cp1y,\r\n    target.x,\r\n    target.y);\r\n}\r\n\r\n/**\r\n * Render text onto the canvas\r\n */\r\nexport function renderText(ctx, text, x, y, font, opts = {}) {\r\n  const lines = isArray(text) ? text : [text];\r\n  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\r\n  let i, line;\r\n\r\n  ctx.save();\r\n  ctx.font = font.string;\r\n  setRenderOpts(ctx, opts);\r\n\r\n  for (i = 0; i < lines.length; ++i) {\r\n    line = lines[i];\r\n\r\n    if (opts.backdrop) {\r\n      drawBackdrop(ctx, opts.backdrop);\r\n    }\r\n\r\n    if (stroke) {\r\n      if (opts.strokeColor) {\r\n        ctx.strokeStyle = opts.strokeColor;\r\n      }\r\n\r\n      if (!isNullOrUndef(opts.strokeWidth)) {\r\n        ctx.lineWidth = opts.strokeWidth;\r\n      }\r\n\r\n      ctx.strokeText(line, x, y, opts.maxWidth);\r\n    }\r\n\r\n    ctx.fillText(line, x, y, opts.maxWidth);\r\n    decorateText(ctx, x, y, line, opts);\r\n\r\n    y += font.lineHeight;\r\n  }\r\n\r\n  ctx.restore();\r\n}\r\n\r\nfunction setRenderOpts(ctx, opts) {\r\n  if (opts.translation) {\r\n    ctx.translate(opts.translation[0], opts.translation[1]);\r\n  }\r\n\r\n  if (!isNullOrUndef(opts.rotation)) {\r\n    ctx.rotate(opts.rotation);\r\n  }\r\n\r\n  if (opts.color) {\r\n    ctx.fillStyle = opts.color;\r\n  }\r\n\r\n  if (opts.textAlign) {\r\n    ctx.textAlign = opts.textAlign;\r\n  }\r\n\r\n  if (opts.textBaseline) {\r\n    ctx.textBaseline = opts.textBaseline;\r\n  }\r\n}\r\n\r\nfunction decorateText(ctx, x, y, line, opts) {\r\n  if (opts.strikethrough || opts.underline) {\r\n    /**\r\n     * Now that IE11 support has been dropped, we can use more\r\n     * of the TextMetrics object. The actual bounding boxes\r\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\r\n     * can be safely used.\r\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\r\n     */\r\n    const metrics = ctx.measureText(line);\r\n    const left = x - metrics.actualBoundingBoxLeft;\r\n    const right = x + metrics.actualBoundingBoxRight;\r\n    const top = y - metrics.actualBoundingBoxAscent;\r\n    const bottom = y + metrics.actualBoundingBoxDescent;\r\n    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\r\n\r\n    ctx.strokeStyle = ctx.fillStyle;\r\n    ctx.beginPath();\r\n    ctx.lineWidth = opts.decorationWidth || 2;\r\n    ctx.moveTo(left, yDecoration);\r\n    ctx.lineTo(right, yDecoration);\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nfunction drawBackdrop(ctx, opts) {\r\n  const oldColor = ctx.fillStyle;\r\n\r\n  ctx.fillStyle = opts.color;\r\n  ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\r\n  ctx.fillStyle = oldColor;\r\n}\r\n\r\n/**\r\n * Add a path of a rectangle with rounded corners to the current sub-path\r\n * @param {CanvasRenderingContext2D} ctx Context\r\n * @param {*} rect Bounding rect\r\n */\r\nexport function addRoundedRectPath(ctx, rect) {\r\n  const {x, y, w, h, radius} = rect;\r\n\r\n  // top left arc\r\n  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);\r\n\r\n  // line from top left to bottom left\r\n  ctx.lineTo(x, y + h - radius.bottomLeft);\r\n\r\n  // bottom left arc\r\n  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\r\n\r\n  // line from bottom left to bottom right\r\n  ctx.lineTo(x + w - radius.bottomRight, y + h);\r\n\r\n  // bottom right arc\r\n  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\r\n\r\n  // line from bottom right to top right\r\n  ctx.lineTo(x + w, y + radius.topRight);\r\n\r\n  // top right arc\r\n  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\r\n\r\n  // line from top right to top left\r\n  ctx.lineTo(x + radius.topLeft, y);\r\n}\r\n","import {defined, isArray, isFunction, isObject, resolveObjectKey, _capitalize} from './helpers.core';\r\n\r\n/**\r\n * Creates a Proxy for resolving raw values for options.\r\n * @param {object[]} scopes - The option scopes to look for values, in resolution order\r\n * @param {string[]} [prefixes] - The prefixes for values, in resolution order.\r\n * @param {object[]} [rootScopes] - The root option scopes\r\n * @param {string|boolean} [fallback] - Parent scopes fallback\r\n * @param {function} [getTarget] - callback for getting the target for changed values\r\n * @returns Proxy\r\n * @private\r\n */\r\nexport function _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {\r\n  if (!defined(fallback)) {\r\n    fallback = _resolve('_fallback', scopes);\r\n  }\r\n  const cache = {\r\n    [Symbol.toStringTag]: 'Object',\r\n    _cacheable: true,\r\n    _scopes: scopes,\r\n    _rootScopes: rootScopes,\r\n    _fallback: fallback,\r\n    _getTarget: getTarget,\r\n    override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),\r\n  };\r\n  return new Proxy(cache, {\r\n    /**\r\n     * A trap for the delete operator.\r\n     */\r\n    deleteProperty(target, prop) {\r\n      delete target[prop]; // remove from cache\r\n      delete target._keys; // remove cached keys\r\n      delete scopes[0][prop]; // remove from top level scope\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * A trap for getting property values.\r\n     */\r\n    get(target, prop) {\r\n      return _cached(target, prop,\r\n        () => _resolveWithPrefixes(prop, prefixes, scopes, target));\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getOwnPropertyDescriptor.\r\n     * Also used by Object.hasOwnProperty.\r\n     */\r\n    getOwnPropertyDescriptor(target, prop) {\r\n      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getPrototypeOf.\r\n     */\r\n    getPrototypeOf() {\r\n      return Reflect.getPrototypeOf(scopes[0]);\r\n    },\r\n\r\n    /**\r\n     * A trap for the in operator.\r\n     */\r\n    has(target, prop) {\r\n      return getKeysFromAllScopes(target).includes(prop);\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\r\n     */\r\n    ownKeys(target) {\r\n      return getKeysFromAllScopes(target);\r\n    },\r\n\r\n    /**\r\n     * A trap for setting property values.\r\n     */\r\n    set(target, prop, value) {\r\n      const storage = target._storage || (target._storage = getTarget());\r\n      target[prop] = storage[prop] = value; // set to top level scope + cache\r\n      delete target._keys; // remove cached keys\r\n      return true;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Returns an Proxy for resolving option values with context.\r\n * @param {object} proxy - The Proxy returned by `_createResolver`\r\n * @param {object} context - Context object for scriptable/indexable options\r\n * @param {object} [subProxy] - The proxy provided for scriptable options\r\n * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults] - Defaults for descriptors\r\n * @private\r\n */\r\nexport function _attachContext(proxy, context, subProxy, descriptorDefaults) {\r\n  const cache = {\r\n    _cacheable: false,\r\n    _proxy: proxy,\r\n    _context: context,\r\n    _subProxy: subProxy,\r\n    _stack: new Set(),\r\n    _descriptors: _descriptors(proxy, descriptorDefaults),\r\n    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\r\n    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\r\n  };\r\n  return new Proxy(cache, {\r\n    /**\r\n     * A trap for the delete operator.\r\n     */\r\n    deleteProperty(target, prop) {\r\n      delete target[prop]; // remove from cache\r\n      delete proxy[prop]; // remove from proxy\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * A trap for getting property values.\r\n     */\r\n    get(target, prop, receiver) {\r\n      return _cached(target, prop,\r\n        () => _resolveWithContext(target, prop, receiver));\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getOwnPropertyDescriptor.\r\n     * Also used by Object.hasOwnProperty.\r\n     */\r\n    getOwnPropertyDescriptor(target, prop) {\r\n      return target._descriptors.allKeys\r\n        ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined\r\n        : Reflect.getOwnPropertyDescriptor(proxy, prop);\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getPrototypeOf.\r\n     */\r\n    getPrototypeOf() {\r\n      return Reflect.getPrototypeOf(proxy);\r\n    },\r\n\r\n    /**\r\n     * A trap for the in operator.\r\n     */\r\n    has(target, prop) {\r\n      return Reflect.has(proxy, prop);\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\r\n     */\r\n    ownKeys() {\r\n      return Reflect.ownKeys(proxy);\r\n    },\r\n\r\n    /**\r\n     * A trap for setting property values.\r\n     */\r\n    set(target, prop, value) {\r\n      proxy[prop] = value; // set to proxy\r\n      delete target[prop]; // remove from cache\r\n      return true;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _descriptors(proxy, defaults = {scriptable: true, indexable: true}) {\r\n  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;\r\n  return {\r\n    allKeys: _allKeys,\r\n    scriptable: _scriptable,\r\n    indexable: _indexable,\r\n    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\r\n    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\r\n  };\r\n}\r\n\r\nconst readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;\r\nconst needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters' &&\r\n  (Object.getPrototypeOf(value) === null || value.constructor === Object);\r\n\r\nfunction _cached(target, prop, resolve) {\r\n  if (Object.prototype.hasOwnProperty.call(target, prop)) {\r\n    return target[prop];\r\n  }\r\n\r\n  const value = resolve();\r\n  // cache the resolved value\r\n  target[prop] = value;\r\n  return value;\r\n}\r\n\r\nfunction _resolveWithContext(target, prop, receiver) {\r\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\r\n  let value = _proxy[prop]; // resolve from proxy\r\n\r\n  // resolve with context\r\n  if (isFunction(value) && descriptors.isScriptable(prop)) {\r\n    value = _resolveScriptable(prop, value, target, receiver);\r\n  }\r\n  if (isArray(value) && value.length) {\r\n    value = _resolveArray(prop, value, target, descriptors.isIndexable);\r\n  }\r\n  if (needsSubResolver(prop, value)) {\r\n    // if the resolved value is an object, create a sub resolver for it\r\n    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction _resolveScriptable(prop, value, target, receiver) {\r\n  const {_proxy, _context, _subProxy, _stack} = target;\r\n  if (_stack.has(prop)) {\r\n    // @ts-ignore\r\n    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\r\n  }\r\n  _stack.add(prop);\r\n  value = value(_context, _subProxy || receiver);\r\n  _stack.delete(prop);\r\n  if (needsSubResolver(prop, value)) {\r\n    // When scriptable option returns an object, create a resolver on that.\r\n    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction _resolveArray(prop, value, target, isIndexable) {\r\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\r\n\r\n  if (defined(_context.index) && isIndexable(prop)) {\r\n    value = value[_context.index % value.length];\r\n  } else if (isObject(value[0])) {\r\n    // Array of objects, return array or resolvers\r\n    const arr = value;\r\n    const scopes = _proxy._scopes.filter(s => s !== arr);\r\n    value = [];\r\n    for (const item of arr) {\r\n      const resolver = createSubResolver(scopes, _proxy, prop, item);\r\n      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction resolveFallback(fallback, prop, value) {\r\n  return isFunction(fallback) ? fallback(prop, value) : fallback;\r\n}\r\n\r\nconst getScope = (key, parent) => key === true ? parent\r\n  : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\r\n\r\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\r\n  for (const parent of parentScopes) {\r\n    const scope = getScope(key, parent);\r\n    if (scope) {\r\n      set.add(scope);\r\n      const fallback = resolveFallback(scope._fallback, key, value);\r\n      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {\r\n        // When we reach the descriptor that defines a new _fallback, return that.\r\n        // The fallback will resume to that new scope.\r\n        return fallback;\r\n      }\r\n    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {\r\n      // Fallback to `false` results to `false`, when falling back to different key.\r\n      // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\r\n      return null;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction createSubResolver(parentScopes, resolver, prop, value) {\r\n  const rootScopes = resolver._rootScopes;\r\n  const fallback = resolveFallback(resolver._fallback, prop, value);\r\n  const allScopes = [...parentScopes, ...rootScopes];\r\n  const set = new Set();\r\n  set.add(value);\r\n  let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\r\n  if (key === null) {\r\n    return false;\r\n  }\r\n  if (defined(fallback) && fallback !== prop) {\r\n    key = addScopesFromKey(set, allScopes, fallback, key, value);\r\n    if (key === null) {\r\n      return false;\r\n    }\r\n  }\r\n  return _createResolver(Array.from(set), [''], rootScopes, fallback,\r\n    () => subGetTarget(resolver, prop, value));\r\n}\r\n\r\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\r\n  while (key) {\r\n    key = addScopes(set, allScopes, key, fallback, item);\r\n  }\r\n  return key;\r\n}\r\n\r\nfunction subGetTarget(resolver, prop, value) {\r\n  const parent = resolver._getTarget();\r\n  if (!(prop in parent)) {\r\n    parent[prop] = {};\r\n  }\r\n  const target = parent[prop];\r\n  if (isArray(target) && isObject(value)) {\r\n    // For array of objects, the object is used to store updated values\r\n    return value;\r\n  }\r\n  return target || {};\r\n}\r\n\r\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\r\n  let value;\r\n  for (const prefix of prefixes) {\r\n    value = _resolve(readKey(prefix, prop), scopes);\r\n    if (defined(value)) {\r\n      return needsSubResolver(prop, value)\r\n        ? createSubResolver(scopes, proxy, prop, value)\r\n        : value;\r\n    }\r\n  }\r\n}\r\n\r\nfunction _resolve(key, scopes) {\r\n  for (const scope of scopes) {\r\n    if (!scope) {\r\n      continue;\r\n    }\r\n    const value = scope[key];\r\n    if (defined(value)) {\r\n      return value;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getKeysFromAllScopes(target) {\r\n  let keys = target._keys;\r\n  if (!keys) {\r\n    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction resolveKeysFromAllScopes(scopes) {\r\n  const set = new Set();\r\n  for (const scope of scopes) {\r\n    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {\r\n      set.add(key);\r\n    }\r\n  }\r\n  return Array.from(set);\r\n}\r\n\r\nexport function _parseObjectDataRadialScale(meta, data, start, count) {\r\n  const {iScale} = meta;\r\n  const {key = 'r'} = this._parsing;\r\n  const parsed = new Array(count);\r\n  let i, ilen, index, item;\r\n\r\n  for (i = 0, ilen = count; i < ilen; ++i) {\r\n    index = i + start;\r\n    item = data[index];\r\n    parsed[i] = {\r\n      r: iScale.parse(resolveObjectKey(item, key), index)\r\n    };\r\n  }\r\n  return parsed;\r\n}\r\n","import {almostEquals, distanceBetweenPoints, sign} from './helpers.math';\r\nimport {_isPointInArea} from './helpers.canvas';\r\nimport {ChartArea} from '../../types';\r\n\r\nexport interface SplinePoint {\r\n  x: number;\r\n  y: number;\r\n  skip?: boolean;\r\n\r\n  // Both Bezier and monotone interpolations have these fields\r\n  // but they are added in different spots\r\n  cp1x?: number;\r\n  cp1y?: number;\r\n  cp2x?: number;\r\n  cp2y?: number;\r\n}\r\n\r\nconst EPSILON = Number.EPSILON || 1e-14;\r\n\r\ntype OptionalSplinePoint = SplinePoint | false\r\nconst getPoint = (points: SplinePoint[], i: number): OptionalSplinePoint => i < points.length && !points[i].skip && points[i];\r\nconst getValueAxis = (indexAxis: 'x' | 'y') => indexAxis === 'x' ? 'y' : 'x';\r\n\r\nexport function splineCurve(\r\n  firstPoint: SplinePoint,\r\n  middlePoint: SplinePoint,\r\n  afterPoint: SplinePoint,\r\n  t: number\r\n): {\r\n    previous: SplinePoint\r\n    next: SplinePoint\r\n  } {\r\n  // Props to Rob Spencer at scaled innovation for his post on splining between points\r\n  // http://scaledinnovation.com/analytics/splines/aboutSplines.html\r\n\r\n  // This function must also respect \"skipped\" points\r\n\r\n  const previous = firstPoint.skip ? middlePoint : firstPoint;\r\n  const current = middlePoint;\r\n  const next = afterPoint.skip ? middlePoint : afterPoint;\r\n  const d01 = distanceBetweenPoints(current, previous);\r\n  const d12 = distanceBetweenPoints(next, current);\r\n\r\n  let s01 = d01 / (d01 + d12);\r\n  let s12 = d12 / (d01 + d12);\r\n\r\n  // If all points are the same, s01 & s02 will be inf\r\n  s01 = isNaN(s01) ? 0 : s01;\r\n  s12 = isNaN(s12) ? 0 : s12;\r\n\r\n  const fa = t * s01; // scaling factor for triangle Ta\r\n  const fb = t * s12;\r\n\r\n  return {\r\n    previous: {\r\n      x: current.x - fa * (next.x - previous.x),\r\n      y: current.y - fa * (next.y - previous.y)\r\n    },\r\n    next: {\r\n      x: current.x + fb * (next.x - previous.x),\r\n      y: current.y + fb * (next.y - previous.y)\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Adjust tangents to ensure monotonic properties\r\n */\r\nfunction monotoneAdjust(points: SplinePoint[], deltaK: number[], mK: number[]) {\r\n  const pointsLen = points.length;\r\n\r\n  let alphaK: number, betaK: number, tauK: number, squaredMagnitude: number, pointCurrent: OptionalSplinePoint;\r\n  let pointAfter = getPoint(points, 0);\r\n  for (let i = 0; i < pointsLen - 1; ++i) {\r\n    pointCurrent = pointAfter;\r\n    pointAfter = getPoint(points, i + 1);\r\n    if (!pointCurrent || !pointAfter) {\r\n      continue;\r\n    }\r\n\r\n    if (almostEquals(deltaK[i], 0, EPSILON)) {\r\n      mK[i] = mK[i + 1] = 0;\r\n      continue;\r\n    }\r\n\r\n    alphaK = mK[i] / deltaK[i];\r\n    betaK = mK[i + 1] / deltaK[i];\r\n    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\r\n    if (squaredMagnitude <= 9) {\r\n      continue;\r\n    }\r\n\r\n    tauK = 3 / Math.sqrt(squaredMagnitude);\r\n    mK[i] = alphaK * tauK * deltaK[i];\r\n    mK[i + 1] = betaK * tauK * deltaK[i];\r\n  }\r\n}\r\n\r\nfunction monotoneCompute(points: SplinePoint[], mK: number[], indexAxis: 'x' | 'y' = 'x') {\r\n  const valueAxis = getValueAxis(indexAxis);\r\n  const pointsLen = points.length;\r\n  let delta: number, pointBefore: OptionalSplinePoint, pointCurrent: OptionalSplinePoint;\r\n  let pointAfter = getPoint(points, 0);\r\n\r\n  for (let i = 0; i < pointsLen; ++i) {\r\n    pointBefore = pointCurrent;\r\n    pointCurrent = pointAfter;\r\n    pointAfter = getPoint(points, i + 1);\r\n    if (!pointCurrent) {\r\n      continue;\r\n    }\r\n\r\n    const iPixel = pointCurrent[indexAxis];\r\n    const vPixel = pointCurrent[valueAxis];\r\n    if (pointBefore) {\r\n      delta = (iPixel - pointBefore[indexAxis]) / 3;\r\n      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\r\n      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\r\n    }\r\n    if (pointAfter) {\r\n      delta = (pointAfter[indexAxis] - iPixel) / 3;\r\n      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\r\n      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This function calculates Bézier control points in a similar way than |splineCurve|,\r\n * but preserves monotonicity of the provided data and ensures no local extremums are added\r\n * between the dataset discrete points due to the interpolation.\r\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\r\n */\r\nexport function splineCurveMonotone(points: SplinePoint[], indexAxis: 'x' | 'y' = 'x') {\r\n  const valueAxis = getValueAxis(indexAxis);\r\n  const pointsLen = points.length;\r\n  const deltaK: number[] = Array(pointsLen).fill(0);\r\n  const mK: number[] = Array(pointsLen);\r\n\r\n  // Calculate slopes (deltaK) and initialize tangents (mK)\r\n  let i, pointBefore: OptionalSplinePoint, pointCurrent: OptionalSplinePoint;\r\n  let pointAfter = getPoint(points, 0);\r\n\r\n  for (i = 0; i < pointsLen; ++i) {\r\n    pointBefore = pointCurrent;\r\n    pointCurrent = pointAfter;\r\n    pointAfter = getPoint(points, i + 1);\r\n    if (!pointCurrent) {\r\n      continue;\r\n    }\r\n\r\n    if (pointAfter) {\r\n      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\r\n\r\n      // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\r\n      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\r\n    }\r\n    mK[i] = !pointBefore ? deltaK[i]\r\n      : !pointAfter ? deltaK[i - 1]\r\n        : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0\r\n          : (deltaK[i - 1] + deltaK[i]) / 2;\r\n  }\r\n\r\n  monotoneAdjust(points, deltaK, mK);\r\n\r\n  monotoneCompute(points, mK, indexAxis);\r\n}\r\n\r\nfunction capControlPoint(pt: number, min: number, max: number) {\r\n  return Math.max(Math.min(pt, max), min);\r\n}\r\n\r\nfunction capBezierPoints(points: SplinePoint[], area: ChartArea) {\r\n  let i, ilen, point, inArea, inAreaPrev;\r\n  let inAreaNext = _isPointInArea(points[0], area);\r\n  for (i = 0, ilen = points.length; i < ilen; ++i) {\r\n    inAreaPrev = inArea;\r\n    inArea = inAreaNext;\r\n    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\r\n    if (!inArea) {\r\n      continue;\r\n    }\r\n    point = points[i];\r\n    if (inAreaPrev) {\r\n      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\r\n      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\r\n    }\r\n    if (inAreaNext) {\r\n      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\r\n      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _updateBezierControlPoints(\r\n  points: SplinePoint[],\r\n  options,\r\n  area: ChartArea,\r\n  loop: boolean,\r\n  indexAxis: 'x' | 'y'\r\n) {\r\n  let i: number, ilen: number, point: SplinePoint, controlPoints: ReturnType<typeof splineCurve>;\r\n\r\n  // Only consider points that are drawn in case the spanGaps option is used\r\n  if (options.spanGaps) {\r\n    points = points.filter((pt) => !pt.skip);\r\n  }\r\n\r\n  if (options.cubicInterpolationMode === 'monotone') {\r\n    splineCurveMonotone(points, indexAxis);\r\n  } else {\r\n    let prev = loop ? points[points.length - 1] : points[0];\r\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\r\n      point = points[i];\r\n      controlPoints = splineCurve(\r\n        prev,\r\n        point,\r\n        points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],\r\n        options.tension\r\n      );\r\n      point.cp1x = controlPoints.previous.x;\r\n      point.cp1y = controlPoints.previous.y;\r\n      point.cp2x = controlPoints.next.x;\r\n      point.cp2y = controlPoints.next.y;\r\n      prev = point;\r\n    }\r\n  }\r\n\r\n  if (options.capBezierPoints) {\r\n    capBezierPoints(points, area);\r\n  }\r\n}\r\n","import {PI, TAU, HALF_PI} from './helpers.math';\r\n\r\nconst atEdge = (t: number) => t === 0 || t === 1;\r\nconst elasticIn = (t: number, s: number, p: number) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\r\nconst elasticOut = (t: number, s: number, p: number) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\r\n\r\n/**\r\n * Easing functions adapted from Robert Penner's easing equations.\r\n * @namespace Chart.helpers.easing.effects\r\n * @see http://www.robertpenner.com/easing/\r\n */\r\nconst effects = {\r\n  linear: (t: number) => t,\r\n\r\n  easeInQuad: (t: number) => t * t,\r\n\r\n  easeOutQuad: (t: number) => -t * (t - 2),\r\n\r\n  easeInOutQuad: (t: number) => ((t /= 0.5) < 1)\r\n    ? 0.5 * t * t\r\n    : -0.5 * ((--t) * (t - 2) - 1),\r\n\r\n  easeInCubic: (t: number) => t * t * t,\r\n\r\n  easeOutCubic: (t: number) => (t -= 1) * t * t + 1,\r\n\r\n  easeInOutCubic: (t: number) => ((t /= 0.5) < 1)\r\n    ? 0.5 * t * t * t\r\n    : 0.5 * ((t -= 2) * t * t + 2),\r\n\r\n  easeInQuart: (t: number) => t * t * t * t,\r\n\r\n  easeOutQuart: (t: number) => -((t -= 1) * t * t * t - 1),\r\n\r\n  easeInOutQuart: (t: number) => ((t /= 0.5) < 1)\r\n    ? 0.5 * t * t * t * t\r\n    : -0.5 * ((t -= 2) * t * t * t - 2),\r\n\r\n  easeInQuint: (t: number) => t * t * t * t * t,\r\n\r\n  easeOutQuint: (t: number) => (t -= 1) * t * t * t * t + 1,\r\n\r\n  easeInOutQuint: (t: number) => ((t /= 0.5) < 1)\r\n    ? 0.5 * t * t * t * t * t\r\n    : 0.5 * ((t -= 2) * t * t * t * t + 2),\r\n\r\n  easeInSine: (t: number) => -Math.cos(t * HALF_PI) + 1,\r\n\r\n  easeOutSine: (t: number) => Math.sin(t * HALF_PI),\r\n\r\n  easeInOutSine: (t: number) => -0.5 * (Math.cos(PI * t) - 1),\r\n\r\n  easeInExpo: (t: number) => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),\r\n\r\n  easeOutExpo: (t: number) => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,\r\n\r\n  easeInOutExpo: (t: number) => atEdge(t) ? t : t < 0.5\r\n    ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))\r\n    : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\r\n\r\n  easeInCirc: (t: number) => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),\r\n\r\n  easeOutCirc: (t: number) => Math.sqrt(1 - (t -= 1) * t),\r\n\r\n  easeInOutCirc: (t: number) => ((t /= 0.5) < 1)\r\n    ? -0.5 * (Math.sqrt(1 - t * t) - 1)\r\n    : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\r\n\r\n  easeInElastic: (t: number) => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\r\n\r\n  easeOutElastic: (t: number) => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\r\n\r\n  easeInOutElastic(t: number) {\r\n    const s = 0.1125;\r\n    const p = 0.45;\r\n    return atEdge(t) ? t :\r\n      t < 0.5\r\n        ? 0.5 * elasticIn(t * 2, s, p)\r\n        : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\r\n  },\r\n\r\n  easeInBack(t: number) {\r\n    const s = 1.70158;\r\n    return t * t * ((s + 1) * t - s);\r\n  },\r\n\r\n  easeOutBack(t: number) {\r\n    const s = 1.70158;\r\n    return (t -= 1) * t * ((s + 1) * t + s) + 1;\r\n  },\r\n\r\n  easeInOutBack(t: number) {\r\n    let s = 1.70158;\r\n    if ((t /= 0.5) < 1) {\r\n      return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\r\n    }\r\n    return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\r\n  },\r\n\r\n  easeInBounce: (t: number) => 1 - effects.easeOutBounce(1 - t),\r\n\r\n  easeOutBounce(t: number) {\r\n    const m = 7.5625;\r\n    const d = 2.75;\r\n    if (t < (1 / d)) {\r\n      return m * t * t;\r\n    }\r\n    if (t < (2 / d)) {\r\n      return m * (t -= (1.5 / d)) * t + 0.75;\r\n    }\r\n    if (t < (2.5 / d)) {\r\n      return m * (t -= (2.25 / d)) * t + 0.9375;\r\n    }\r\n    return m * (t -= (2.625 / d)) * t + 0.984375;\r\n  },\r\n\r\n  easeInOutBounce: (t: number) => (t < 0.5)\r\n    ? effects.easeInBounce(t * 2) * 0.5\r\n    : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,\r\n} as const;\r\n\r\nexport type EasingFunction = keyof typeof effects\r\n\r\nexport default effects;\r\n","import type {Point} from '../../types/geometric';\r\nimport type {SplinePoint} from './helpers.curve';\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _pointInLine(p1: Point, p2: Point, t: number, mode?) { // eslint-disable-line @typescript-eslint/no-unused-vars\r\n  return {\r\n    x: p1.x + t * (p2.x - p1.x),\r\n    y: p1.y + t * (p2.y - p1.y)\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _steppedInterpolation(\r\n  p1: Point,\r\n  p2: Point,\r\n  t: number, mode: 'middle' | 'after' | unknown\r\n) {\r\n  return {\r\n    x: p1.x + t * (p2.x - p1.x),\r\n    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y\r\n      : mode === 'after' ? t < 1 ? p1.y : p2.y\r\n        : t > 0 ? p2.y : p1.y\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _bezierInterpolation(p1: SplinePoint, p2: SplinePoint, t: number, mode?) { // eslint-disable-line @typescript-eslint/no-unused-vars\r\n  const cp1 = {x: p1.cp2x, y: p1.cp2y};\r\n  const cp2 = {x: p2.cp1x, y: p2.cp1y};\r\n  const a = _pointInLine(p1, cp1, t);\r\n  const b = _pointInLine(cp1, cp2, t);\r\n  const c = _pointInLine(cp2, p2, t);\r\n  const d = _pointInLine(a, b, t);\r\n  const e = _pointInLine(b, c, t);\r\n  return _pointInLine(d, e, t);\r\n}\r\n","import defaults from '../core/core.defaults';\r\nimport {isArray, isObject, toDimension, valueOrDefault} from './helpers.core';\r\nimport {toFontString} from './helpers.canvas';\r\n\r\nconst LINE_HEIGHT = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\r\nconst FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\r\n\r\n/**\r\n * @alias Chart.helpers.options\r\n * @namespace\r\n */\r\n/**\r\n * Converts the given line height `value` in pixels for a specific font `size`.\r\n * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\r\n * @param {number} size - The font size (in pixels) used to resolve relative `value`.\r\n * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\r\n * @since 2.7.0\r\n */\r\nexport function toLineHeight(value, size) {\r\n  const matches = ('' + value).match(LINE_HEIGHT);\r\n  if (!matches || matches[1] === 'normal') {\r\n    return size * 1.2;\r\n  }\r\n\r\n  value = +matches[2];\r\n\r\n  switch (matches[3]) {\r\n  case 'px':\r\n    return value;\r\n  case '%':\r\n    value /= 100;\r\n    break;\r\n  default:\r\n    break;\r\n  }\r\n\r\n  return size * value;\r\n}\r\n\r\nconst numberOrZero = v => +v || 0;\r\n\r\n/**\r\n * @param {any} value\r\n * @param {string[] | Record<string, string>} props\r\n */\r\nexport function _readValueToProps(value, props) {\r\n  const ret = {};\r\n  const objProps = isObject(props);\r\n  const keys = objProps ? Object.keys(props) : props;\r\n  const read = isObject(value)\r\n    ? objProps\r\n      ? prop => valueOrDefault(value[prop], value[props[prop]])\r\n      : prop => value[prop]\r\n    : () => value;\r\n\r\n  for (const prop of keys) {\r\n    ret[prop] = numberOrZero(read(prop));\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Converts the given value into a TRBL object.\r\n * @param {number|object} value - If a number, set the value to all TRBL component,\r\n *  else, if an object, use defined properties and sets undefined ones to 0.\r\n *  x / y are shorthands for same value for left/right and top/bottom.\r\n * @returns {object} The padding values (top, right, bottom, left)\r\n * @since 3.0.0\r\n */\r\nexport function toTRBL(value) {\r\n  return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});\r\n}\r\n\r\n/**\r\n * Converts the given value into a TRBL corners object (similar with css border-radius).\r\n * @param {number|object} value - If a number, set the value to all TRBL corner components,\r\n *  else, if an object, use defined properties and sets undefined ones to 0.\r\n * @returns {object} The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\r\n * @since 3.0.0\r\n */\r\nexport function toTRBLCorners(value) {\r\n  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\r\n}\r\n\r\n/**\r\n * Converts the given value into a padding object with pre-computed width/height.\r\n * @param {number|object} value - If a number, set the value to all TRBL component,\r\n *  else, if an object, use defined properties and sets undefined ones to 0.\r\n *  x / y are shorthands for same value for left/right and top/bottom.\r\n * @returns {object} The padding values (top, right, bottom, left, width, height)\r\n * @since 2.7.0\r\n */\r\nexport function toPadding(value) {\r\n  const obj = toTRBL(value);\r\n\r\n  obj.width = obj.left + obj.right;\r\n  obj.height = obj.top + obj.bottom;\r\n\r\n  return obj;\r\n}\r\n\r\n\r\n/**\r\n * Parses font options and returns the font object.\r\n * @param {object} options - A object that contains font options to be parsed.\r\n * @param {object} [fallback] - A object that contains fallback font options.\r\n * @return {object} The font object.\r\n * @private\r\n */\r\nexport function toFont(options, fallback) {\r\n  options = options || {};\r\n  fallback = fallback || defaults.font;\r\n\r\n  let size = valueOrDefault(options.size, fallback.size);\r\n\r\n  if (typeof size === 'string') {\r\n    size = parseInt(size, 10);\r\n  }\r\n  let style = valueOrDefault(options.style, fallback.style);\r\n  if (style && !('' + style).match(FONT_STYLE)) {\r\n    console.warn('Invalid font style specified: \"' + style + '\"');\r\n    style = '';\r\n  }\r\n\r\n  const font = {\r\n    family: valueOrDefault(options.family, fallback.family),\r\n    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\r\n    size,\r\n    style,\r\n    weight: valueOrDefault(options.weight, fallback.weight),\r\n    string: ''\r\n  };\r\n\r\n  font.string = toFontString(font);\r\n  return font;\r\n}\r\n\r\n/**\r\n * Evaluates the given `inputs` sequentially and returns the first defined value.\r\n * @param {Array} inputs - An array of values, falling back to the last value.\r\n * @param {object} [context] - If defined and the current value is a function, the value\r\n * is called with `context` as first argument and the result becomes the new input.\r\n * @param {number} [index] - If defined and the current value is an array, the value\r\n * at `index` become the new input.\r\n * @param {object} [info] - object to return information about resolution in\r\n * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.\r\n * @since 2.7.0\r\n */\r\nexport function resolve(inputs, context, index, info) {\r\n  let cacheable = true;\r\n  let i, ilen, value;\r\n\r\n  for (i = 0, ilen = inputs.length; i < ilen; ++i) {\r\n    value = inputs[i];\r\n    if (value === undefined) {\r\n      continue;\r\n    }\r\n    if (context !== undefined && typeof value === 'function') {\r\n      value = value(context);\r\n      cacheable = false;\r\n    }\r\n    if (index !== undefined && isArray(value)) {\r\n      value = value[index % value.length];\r\n      cacheable = false;\r\n    }\r\n    if (value !== undefined) {\r\n      if (info && !cacheable) {\r\n        info.cacheable = false;\r\n      }\r\n      return value;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {{min: number, max: number}} minmax\r\n * @param {number|string} grace\r\n * @param {boolean} beginAtZero\r\n * @private\r\n */\r\nexport function _addGrace(minmax, grace, beginAtZero) {\r\n  const {min, max} = minmax;\r\n  const change = toDimension(grace, (max - min) / 2);\r\n  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;\r\n  return {\r\n    min: keepZero(min, -Math.abs(change)),\r\n    max: keepZero(max, change)\r\n  };\r\n}\r\n\r\n/**\r\n * Create a context inheriting parentContext\r\n * @param {object|null} parentContext\r\n * @param {object} context\r\n * @returns {object}\r\n */\r\nexport function createContext(parentContext, context) {\r\n  return Object.assign(Object.create(parentContext), context);\r\n}\r\n","export interface RTLAdapter {\r\n  x(x: number): number;\r\n  setWidth(w: number): void;\r\n  textAlign(align: 'center' | 'left' | 'right'): 'center' | 'left' | 'right';\r\n  xPlus(x: number, value: number): number;\r\n  leftForLtr(x: number, itemWidth: number): number;\r\n}\r\n\r\nconst getRightToLeftAdapter = function(rectX: number, width: number): RTLAdapter {\r\n  return {\r\n    x(x) {\r\n      return rectX + rectX + width - x;\r\n    },\r\n    setWidth(w) {\r\n      width = w;\r\n    },\r\n    textAlign(align) {\r\n      if (align === 'center') {\r\n        return align;\r\n      }\r\n      return align === 'right' ? 'left' : 'right';\r\n    },\r\n    xPlus(x, value) {\r\n      return x - value;\r\n    },\r\n    leftForLtr(x, itemWidth) {\r\n      return x - itemWidth;\r\n    },\r\n  };\r\n};\r\n\r\nconst getLeftToRightAdapter = function(): RTLAdapter {\r\n  return {\r\n    x(x) {\r\n      return x;\r\n    },\r\n    setWidth(w) { // eslint-disable-line no-unused-vars\r\n    },\r\n    textAlign(align) {\r\n      return align;\r\n    },\r\n    xPlus(x, value) {\r\n      return x + value;\r\n    },\r\n    leftForLtr(x, _itemWidth) { // eslint-disable-line @typescript-eslint/no-unused-vars\r\n      return x;\r\n    },\r\n  };\r\n};\r\n\r\nexport function getRtlAdapter(rtl: boolean, rectX: number, width: number) {\r\n  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\r\n}\r\n\r\nexport function overrideTextDirection(ctx: CanvasRenderingContext2D, direction: 'ltr' | 'rtl') {\r\n  let style: CSSStyleDeclaration, original: [string, string];\r\n  if (direction === 'ltr' || direction === 'rtl') {\r\n    style = ctx.canvas.style;\r\n    original = [\r\n      style.getPropertyValue('direction'),\r\n      style.getPropertyPriority('direction'),\r\n    ];\r\n\r\n    style.setProperty('direction', direction, 'important');\r\n    (ctx as { prevTextDirection?: [string, string] }).prevTextDirection = original;\r\n  }\r\n}\r\n\r\nexport function restoreTextDirection(ctx: CanvasRenderingContext2D, original?: [string, string]) {\r\n  if (original !== undefined) {\r\n    delete (ctx as { prevTextDirection?: [string, string] }).prevTextDirection;\r\n    ctx.canvas.style.setProperty('direction', original[0], original[1]);\r\n  }\r\n}\r\n","import {_angleBetween, _angleDiff, _isBetween, _normalizeAngle} from './helpers.math';\r\nimport {createContext} from './helpers.options';\r\n\r\n/**\r\n * @typedef { import(\"../elements/element.line\").default } LineElement\r\n * @typedef { import(\"../elements/element.point\").default } PointElement\r\n * @typedef {{start: number, end: number, loop: boolean, style?: any}} Segment\r\n */\r\n\r\nfunction propertyFn(property) {\r\n  if (property === 'angle') {\r\n    return {\r\n      between: _angleBetween,\r\n      compare: _angleDiff,\r\n      normalize: _normalizeAngle,\r\n    };\r\n  }\r\n  return {\r\n    between: _isBetween,\r\n    compare: (a, b) => a - b,\r\n    normalize: x => x\r\n  };\r\n}\r\n\r\nfunction normalizeSegment({start, end, count, loop, style}) {\r\n  return {\r\n    start: start % count,\r\n    end: end % count,\r\n    loop: loop && (end - start + 1) % count === 0,\r\n    style\r\n  };\r\n}\r\n\r\nfunction getSegment(segment, points, bounds) {\r\n  const {property, start: startBound, end: endBound} = bounds;\r\n  const {between, normalize} = propertyFn(property);\r\n  const count = points.length;\r\n  // eslint-disable-next-line prefer-const\r\n  let {start, end, loop} = segment;\r\n  let i, ilen;\r\n\r\n  if (loop) {\r\n    start += count;\r\n    end += count;\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\r\n        break;\r\n      }\r\n      start--;\r\n      end--;\r\n    }\r\n    start %= count;\r\n    end %= count;\r\n  }\r\n\r\n  if (end < start) {\r\n    end += count;\r\n  }\r\n  return {start, end, loop, style: segment.style};\r\n}\r\n\r\n/**\r\n * Returns the sub-segment(s) of a line segment that fall in the given bounds\r\n * @param {object} segment\r\n * @param {number} segment.start - start index of the segment, referring the points array\r\n * @param {number} segment.end - end index of the segment, referring the points array\r\n * @param {boolean} segment.loop - indicates that the segment is a loop\r\n * @param {object} [segment.style] - segment style\r\n * @param {PointElement[]} points - the points that this segment refers to\r\n * @param {object} [bounds]\r\n * @param {string} bounds.property - the property of a `PointElement` we are bounding. `x`, `y` or `angle`.\r\n * @param {number} bounds.start - start value of the property\r\n * @param {number} bounds.end - end value of the property\r\n * @private\r\n **/\r\nexport function _boundSegment(segment, points, bounds) {\r\n  if (!bounds) {\r\n    return [segment];\r\n  }\r\n\r\n  const {property, start: startBound, end: endBound} = bounds;\r\n  const count = points.length;\r\n  const {compare, between, normalize} = propertyFn(property);\r\n  const {start, end, loop, style} = getSegment(segment, points, bounds);\r\n\r\n  const result = [];\r\n  let inside = false;\r\n  let subStart = null;\r\n  let value, point, prevValue;\r\n\r\n  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\r\n  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\r\n  const shouldStart = () => inside || startIsBefore();\r\n  const shouldStop = () => !inside || endIsBefore();\r\n\r\n  for (let i = start, prev = start; i <= end; ++i) {\r\n    point = points[i % count];\r\n\r\n    if (point.skip) {\r\n      continue;\r\n    }\r\n\r\n    value = normalize(point[property]);\r\n\r\n    if (value === prevValue) {\r\n      continue;\r\n    }\r\n\r\n    inside = between(value, startBound, endBound);\r\n\r\n    if (subStart === null && shouldStart()) {\r\n      subStart = compare(value, startBound) === 0 ? i : prev;\r\n    }\r\n\r\n    if (subStart !== null && shouldStop()) {\r\n      result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));\r\n      subStart = null;\r\n    }\r\n    prev = i;\r\n    prevValue = value;\r\n  }\r\n\r\n  if (subStart !== null) {\r\n    result.push(normalizeSegment({start: subStart, end, loop, count, style}));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n\r\n/**\r\n * Returns the segments of the line that are inside given bounds\r\n * @param {LineElement} line\r\n * @param {object} [bounds]\r\n * @param {string} bounds.property - the property we are bounding with. `x`, `y` or `angle`.\r\n * @param {number} bounds.start - start value of the `property`\r\n * @param {number} bounds.end - end value of the `property`\r\n * @private\r\n */\r\nexport function _boundSegments(line, bounds) {\r\n  const result = [];\r\n  const segments = line.segments;\r\n\r\n  for (let i = 0; i < segments.length; i++) {\r\n    const sub = _boundSegment(segments[i], line.points, bounds);\r\n    if (sub.length) {\r\n      result.push(...sub);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Find start and end index of a line.\r\n */\r\nfunction findStartAndEnd(points, count, loop, spanGaps) {\r\n  let start = 0;\r\n  let end = count - 1;\r\n\r\n  if (loop && !spanGaps) {\r\n    // loop and not spanning gaps, first find a gap to start from\r\n    while (start < count && !points[start].skip) {\r\n      start++;\r\n    }\r\n  }\r\n\r\n  // find first non skipped point (after the first gap possibly)\r\n  while (start < count && points[start].skip) {\r\n    start++;\r\n  }\r\n\r\n  // if we looped to count, start needs to be 0\r\n  start %= count;\r\n\r\n  if (loop) {\r\n    // loop will go past count, if start > 0\r\n    end += start;\r\n  }\r\n\r\n  while (end > start && points[end % count].skip) {\r\n    end--;\r\n  }\r\n\r\n  // end could be more than count, normalize\r\n  end %= count;\r\n\r\n  return {start, end};\r\n}\r\n\r\n/**\r\n * Compute solid segments from Points, when spanGaps === false\r\n * @param {PointElement[]} points - the points\r\n * @param {number} start - start index\r\n * @param {number} max - max index (can go past count on a loop)\r\n * @param {boolean} loop - boolean indicating that this would be a loop if no gaps are found\r\n */\r\nfunction solidSegments(points, start, max, loop) {\r\n  const count = points.length;\r\n  const result = [];\r\n  let last = start;\r\n  let prev = points[start];\r\n  let end;\r\n\r\n  for (end = start + 1; end <= max; ++end) {\r\n    const cur = points[end % count];\r\n    if (cur.skip || cur.stop) {\r\n      if (!prev.skip) {\r\n        loop = false;\r\n        result.push({start: start % count, end: (end - 1) % count, loop});\r\n        // @ts-ignore\r\n        start = last = cur.stop ? end : null;\r\n      }\r\n    } else {\r\n      last = end;\r\n      if (prev.skip) {\r\n        start = end;\r\n      }\r\n    }\r\n    prev = cur;\r\n  }\r\n\r\n  if (last !== null) {\r\n    result.push({start: start % count, end: last % count, loop});\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Compute the continuous segments that define the whole line\r\n * There can be skipped points within a segment, if spanGaps is true.\r\n * @param {LineElement} line\r\n * @param {object} [segmentOptions]\r\n * @return {Segment[]}\r\n * @private\r\n */\r\nexport function _computeSegments(line, segmentOptions) {\r\n  const points = line.points;\r\n  const spanGaps = line.options.spanGaps;\r\n  const count = points.length;\r\n\r\n  if (!count) {\r\n    return [];\r\n  }\r\n\r\n  const loop = !!line._loop;\r\n  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);\r\n\r\n  if (spanGaps === true) {\r\n    return splitByStyles(line, [{start, end, loop}], points, segmentOptions);\r\n  }\r\n\r\n  const max = end < start ? end + count : end;\r\n  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\r\n  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\r\n}\r\n\r\n/**\r\n * @param {Segment[]} segments\r\n * @param {PointElement[]} points\r\n * @param {object} [segmentOptions]\r\n * @return {Segment[]}\r\n */\r\nfunction splitByStyles(line, segments, points, segmentOptions) {\r\n  if (!segmentOptions || !segmentOptions.setContext || !points) {\r\n    return segments;\r\n  }\r\n  return doSplitByStyles(line, segments, points, segmentOptions);\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n * @param {Segment[]} segments\r\n * @param {PointElement[]} points\r\n * @param {object} [segmentOptions]\r\n * @return {Segment[]}\r\n */\r\nfunction doSplitByStyles(line, segments, points, segmentOptions) {\r\n  const chartContext = line._chart.getContext();\r\n  const baseStyle = readStyle(line.options);\r\n  const {_datasetIndex: datasetIndex, options: {spanGaps}} = line;\r\n  const count = points.length;\r\n  const result = [];\r\n  let prevStyle = baseStyle;\r\n  let start = segments[0].start;\r\n  let i = start;\r\n\r\n  function addStyle(s, e, l, st) {\r\n    const dir = spanGaps ? -1 : 1;\r\n    if (s === e) {\r\n      return;\r\n    }\r\n    // Style can not start/end on a skipped point, adjust indices accordingly\r\n    s += count;\r\n    while (points[s % count].skip) {\r\n      s -= dir;\r\n    }\r\n    while (points[e % count].skip) {\r\n      e += dir;\r\n    }\r\n    if (s % count !== e % count) {\r\n      result.push({start: s % count, end: e % count, loop: l, style: st});\r\n      prevStyle = st;\r\n      start = e % count;\r\n    }\r\n  }\r\n\r\n  for (const segment of segments) {\r\n    start = spanGaps ? start : segment.start;\r\n    let prev = points[start % count];\r\n    let style;\r\n    for (i = start + 1; i <= segment.end; i++) {\r\n      const pt = points[i % count];\r\n      style = readStyle(segmentOptions.setContext(createContext(chartContext, {\r\n        type: 'segment',\r\n        p0: prev,\r\n        p1: pt,\r\n        p0DataIndex: (i - 1) % count,\r\n        p1DataIndex: i % count,\r\n        datasetIndex\r\n      })));\r\n      if (styleChanged(style, prevStyle)) {\r\n        addStyle(start, i - 1, segment.loop, prevStyle);\r\n      }\r\n      prev = pt;\r\n      prevStyle = style;\r\n    }\r\n    if (start < i - 1) {\r\n      addStyle(start, i - 1, segment.loop, prevStyle);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction readStyle(options) {\r\n  return {\r\n    backgroundColor: options.backgroundColor,\r\n    borderCapStyle: options.borderCapStyle,\r\n    borderDash: options.borderDash,\r\n    borderDashOffset: options.borderDashOffset,\r\n    borderJoinStyle: options.borderJoinStyle,\r\n    borderWidth: options.borderWidth,\r\n    borderColor: options.borderColor\r\n  };\r\n}\r\n\r\nfunction styleChanged(style, prevStyle) {\r\n  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);\r\n}\r\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection';\r\nimport {getRelativePosition} from '../helpers/helpers.dom';\r\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math';\r\nimport {_isPointInArea} from '../helpers';\r\n\r\n/**\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n * @typedef { import(\"../../types\").ChartEvent } ChartEvent\r\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\r\n * @typedef {{datasetIndex: number, index: number, element: import(\"./core.element\").default}} InteractionItem\r\n * @typedef { import(\"../../types\").Point } Point\r\n */\r\n\r\n/**\r\n * Helper function to do binary search when possible\r\n * @param {object} metaset - the dataset meta\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n * @param {number} value - the value to find\r\n * @param {boolean} [intersect] - should the element intersect\r\n * @returns {{lo:number, hi:number}} indices to search data array between\r\n */\r\nfunction binarySearch(metaset, axis, value, intersect) {\r\n  const {controller, data, _sorted} = metaset;\r\n  const iScale = controller._cachedMeta.iScale;\r\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\r\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\r\n    if (!intersect) {\r\n      return lookupMethod(data, axis, value);\r\n    } else if (controller._sharedOptions) {\r\n      // _sharedOptions indicates that each element has equal options -> equal proportions\r\n      // So we can do a ranged binary search based on the range of first element and\r\n      // be confident to get the full range of indices that can intersect with the value.\r\n      const el = data[0];\r\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\r\n      if (range) {\r\n        const start = lookupMethod(data, axis, value - range);\r\n        const end = lookupMethod(data, axis, value + range);\r\n        return {lo: start.lo, hi: end.hi};\r\n      }\r\n    }\r\n  }\r\n  // Default to all elements, when binary search can not be used.\r\n  return {lo: 0, hi: data.length - 1};\r\n}\r\n\r\n/**\r\n * Helper function to select candidate elements for interaction\r\n * @param {Chart} chart - the chart\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {function} handler - the callback to execute for each visible item\r\n * @param {boolean} [intersect] - consider intersecting items\r\n */\r\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\r\n  const metasets = chart.getSortedVisibleDatasetMetas();\r\n  const value = position[axis];\r\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\r\n    const {index, data} = metasets[i];\r\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\r\n    for (let j = lo; j <= hi; ++j) {\r\n      const element = data[j];\r\n      if (!element.skip) {\r\n        handler(element, index, j);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get a distance metric function for two points based on the\r\n * axis mode setting\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n */\r\nfunction getDistanceMetricForAxis(axis) {\r\n  const useX = axis.indexOf('x') !== -1;\r\n  const useY = axis.indexOf('y') !== -1;\r\n\r\n  return function(pt1, pt2) {\r\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\r\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\r\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to get the items that intersect the event position\r\n * @param {Chart} chart - the chart\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\r\n  const items = [];\r\n\r\n  if (!includeInvisible && !chart.isPointInArea(position)) {\r\n    return items;\r\n  }\r\n\r\n  const evaluationFunc = function(element, datasetIndex, index) {\r\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\r\n      return;\r\n    }\r\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\r\n      items.push({element, datasetIndex, index});\r\n    }\r\n  };\r\n\r\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\r\n  return items;\r\n}\r\n\r\n/**\r\n * Helper function to get the items nearest to the event position for a radial chart\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axes along which to measure distance\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\r\n  let items = [];\r\n\r\n  function evaluationFunc(element, datasetIndex, index) {\r\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\r\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\r\n\r\n    if (_angleBetween(angle, startAngle, endAngle)) {\r\n      items.push({element, datasetIndex, index});\r\n    }\r\n  }\r\n\r\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\r\n  return items;\r\n}\r\n\r\n/**\r\n * Helper function to get the items nearest to the event position for a cartesian chart\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axes along which to measure distance\r\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\r\n  let items = [];\r\n  const distanceMetric = getDistanceMetricForAxis(axis);\r\n  let minDistance = Number.POSITIVE_INFINITY;\r\n\r\n  function evaluationFunc(element, datasetIndex, index) {\r\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\r\n    if (intersect && !inRange) {\r\n      return;\r\n    }\r\n\r\n    const center = element.getCenterPoint(useFinalPosition);\r\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\r\n    if (!pointInArea && !inRange) {\r\n      return;\r\n    }\r\n\r\n    const distance = distanceMetric(position, center);\r\n    if (distance < minDistance) {\r\n      items = [{element, datasetIndex, index}];\r\n      minDistance = distance;\r\n    } else if (distance === minDistance) {\r\n      // Can have multiple items at the same distance in which case we sort by size\r\n      items.push({element, datasetIndex, index});\r\n    }\r\n  }\r\n\r\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\r\n  return items;\r\n}\r\n\r\n/**\r\n * Helper function to get the items nearest to the event position considering all visible items in the chart\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axes along which to measure distance\r\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\r\n  if (!includeInvisible && !chart.isPointInArea(position)) {\r\n    return [];\r\n  }\r\n\r\n  return axis === 'r' && !intersect\r\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\r\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\r\n}\r\n\r\n/**\r\n * Helper function to get the items matching along the given X or Y axis\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axis to match\r\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\r\n  const items = [];\r\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\r\n  let intersectsItem = false;\r\n\r\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\r\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\r\n      items.push({element, datasetIndex, index});\r\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\r\n    }\r\n  });\r\n\r\n  // If we want to trigger on an intersect and we don't have any items\r\n  // that intersect the position, return nothing\r\n  if (intersect && !intersectsItem) {\r\n    return [];\r\n  }\r\n  return items;\r\n}\r\n\r\n/**\r\n * Contains interaction related functions\r\n * @namespace Chart.Interaction\r\n */\r\nexport default {\r\n  // Part of the public API to facilitate developers creating their own modes\r\n  evaluateInteractionItems,\r\n\r\n  // Helper function for different modes\r\n  modes: {\r\n    /**\r\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\r\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\r\n\t\t * @function Chart.Interaction.modes.index\r\n\t\t * @since v2.4.0\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    index(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      // Default axis for index mode is 'x' to match old behaviour\r\n      const axis = options.axis || 'x';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      const items = options.intersect\r\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\r\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\r\n      const elements = [];\r\n\r\n      if (!items.length) {\r\n        return [];\r\n      }\r\n\r\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\r\n        const index = items[0].index;\r\n        const element = meta.data[index];\r\n\r\n        // don't count items that are skipped (null data)\r\n        if (element && !element.skip) {\r\n          elements.push({element, datasetIndex: meta.index, index});\r\n        }\r\n      });\r\n\r\n      return elements;\r\n    },\r\n\r\n    /**\r\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\r\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\r\n\t\t * @function Chart.Interaction.modes.dataset\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    dataset(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      const axis = options.axis || 'xy';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      let items = options.intersect\r\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\r\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\r\n\r\n      if (items.length > 0) {\r\n        const datasetIndex = items[0].datasetIndex;\r\n        const data = chart.getDatasetMeta(datasetIndex).data;\r\n        items = [];\r\n        for (let i = 0; i < data.length; ++i) {\r\n          items.push({element: data[i], datasetIndex, index: i});\r\n        }\r\n      }\r\n\r\n      return items;\r\n    },\r\n\r\n    /**\r\n\t\t * Point mode returns all elements that hit test based on the event position\r\n\t\t * of the event\r\n\t\t * @function Chart.Interaction.modes.intersect\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    point(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      const axis = options.axis || 'xy';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\r\n    },\r\n\r\n    /**\r\n\t\t * nearest mode returns the element closest to the point\r\n\t\t * @function Chart.Interaction.modes.intersect\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    nearest(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      const axis = options.axis || 'xy';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\r\n    },\r\n\r\n    /**\r\n\t\t * x mode returns the elements that hit-test at the current x coordinate\r\n\t\t * @function Chart.Interaction.modes.x\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    x(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\r\n    },\r\n\r\n    /**\r\n\t\t * y mode returns the elements that hit-test at the current y coordinate\r\n\t\t * @function Chart.Interaction.modes.y\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    y(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\r\n    }\r\n  }\r\n};\r\n","import {defined, each, isObject} from '../helpers/helpers.core';\r\nimport {toPadding} from '../helpers/helpers.options';\r\n\r\n/**\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n */\r\n\r\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\r\n\r\nfunction filterByPosition(array, position) {\r\n  return array.filter(v => v.pos === position);\r\n}\r\n\r\nfunction filterDynamicPositionByAxis(array, axis) {\r\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\r\n}\r\n\r\nfunction sortByWeight(array, reverse) {\r\n  return array.sort((a, b) => {\r\n    const v0 = reverse ? b : a;\r\n    const v1 = reverse ? a : b;\r\n    return v0.weight === v1.weight ?\r\n      v0.index - v1.index :\r\n      v0.weight - v1.weight;\r\n  });\r\n}\r\n\r\nfunction wrapBoxes(boxes) {\r\n  const layoutBoxes = [];\r\n  let i, ilen, box, pos, stack, stackWeight;\r\n\r\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\r\n    box = boxes[i];\r\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\r\n    layoutBoxes.push({\r\n      index: i,\r\n      box,\r\n      pos,\r\n      horizontal: box.isHorizontal(),\r\n      weight: box.weight,\r\n      stack: stack && (pos + stack),\r\n      stackWeight\r\n    });\r\n  }\r\n  return layoutBoxes;\r\n}\r\n\r\nfunction buildStacks(layouts) {\r\n  const stacks = {};\r\n  for (const wrap of layouts) {\r\n    const {stack, pos, stackWeight} = wrap;\r\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\r\n      continue;\r\n    }\r\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\r\n    _stack.count++;\r\n    _stack.weight += stackWeight;\r\n  }\r\n  return stacks;\r\n}\r\n\r\n/**\r\n * store dimensions used instead of available chartArea in fitBoxes\r\n **/\r\nfunction setLayoutDims(layouts, params) {\r\n  const stacks = buildStacks(layouts);\r\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\r\n  let i, ilen, layout;\r\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\r\n    layout = layouts[i];\r\n    const {fullSize} = layout.box;\r\n    const stack = stacks[layout.stack];\r\n    const factor = stack && layout.stackWeight / stack.weight;\r\n    if (layout.horizontal) {\r\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\r\n      layout.height = hBoxMaxHeight;\r\n    } else {\r\n      layout.width = vBoxMaxWidth;\r\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\r\n    }\r\n  }\r\n  return stacks;\r\n}\r\n\r\nfunction buildLayoutBoxes(boxes) {\r\n  const layoutBoxes = wrapBoxes(boxes);\r\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\r\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\r\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\r\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\r\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\r\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\r\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\r\n\r\n  return {\r\n    fullSize,\r\n    leftAndTop: left.concat(top),\r\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\r\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\r\n    vertical: left.concat(right).concat(centerVertical),\r\n    horizontal: top.concat(bottom).concat(centerHorizontal)\r\n  };\r\n}\r\n\r\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\r\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\r\n}\r\n\r\nfunction updateMaxPadding(maxPadding, boxPadding) {\r\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\r\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\r\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\r\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\r\n}\r\n\r\nfunction updateDims(chartArea, params, layout, stacks) {\r\n  const {pos, box} = layout;\r\n  const maxPadding = chartArea.maxPadding;\r\n\r\n  // dynamically placed boxes size is not considered\r\n  if (!isObject(pos)) {\r\n    if (layout.size) {\r\n      // this layout was already counted for, lets first reduce old size\r\n      chartArea[pos] -= layout.size;\r\n    }\r\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\r\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\r\n    layout.size = stack.size / stack.count;\r\n    chartArea[pos] += layout.size;\r\n  }\r\n\r\n  if (box.getPadding) {\r\n    updateMaxPadding(maxPadding, box.getPadding());\r\n  }\r\n\r\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\r\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\r\n  const widthChanged = newWidth !== chartArea.w;\r\n  const heightChanged = newHeight !== chartArea.h;\r\n  chartArea.w = newWidth;\r\n  chartArea.h = newHeight;\r\n\r\n  // return booleans on the changes per direction\r\n  return layout.horizontal\r\n    ? {same: widthChanged, other: heightChanged}\r\n    : {same: heightChanged, other: widthChanged};\r\n}\r\n\r\nfunction handleMaxPadding(chartArea) {\r\n  const maxPadding = chartArea.maxPadding;\r\n\r\n  function updatePos(pos) {\r\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\r\n    chartArea[pos] += change;\r\n    return change;\r\n  }\r\n  chartArea.y += updatePos('top');\r\n  chartArea.x += updatePos('left');\r\n  updatePos('right');\r\n  updatePos('bottom');\r\n}\r\n\r\nfunction getMargins(horizontal, chartArea) {\r\n  const maxPadding = chartArea.maxPadding;\r\n\r\n  function marginForPositions(positions) {\r\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\r\n    positions.forEach((pos) => {\r\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\r\n    });\r\n    return margin;\r\n  }\r\n\r\n  return horizontal\r\n    ? marginForPositions(['left', 'right'])\r\n    : marginForPositions(['top', 'bottom']);\r\n}\r\n\r\nfunction fitBoxes(boxes, chartArea, params, stacks) {\r\n  const refitBoxes = [];\r\n  let i, ilen, layout, box, refit, changed;\r\n\r\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\r\n    layout = boxes[i];\r\n    box = layout.box;\r\n\r\n    box.update(\r\n      layout.width || chartArea.w,\r\n      layout.height || chartArea.h,\r\n      getMargins(layout.horizontal, chartArea)\r\n    );\r\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\r\n\r\n    // Dimensions changed and there were non full width boxes before this\r\n    // -> we have to refit those\r\n    refit |= same && refitBoxes.length;\r\n\r\n    // Chart area changed in the opposite direction\r\n    changed = changed || other;\r\n\r\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\r\n      refitBoxes.push(layout);\r\n    }\r\n  }\r\n\r\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\r\n}\r\n\r\nfunction setBoxDims(box, left, top, width, height) {\r\n  box.top = top;\r\n  box.left = left;\r\n  box.right = left + width;\r\n  box.bottom = top + height;\r\n  box.width = width;\r\n  box.height = height;\r\n}\r\n\r\nfunction placeBoxes(boxes, chartArea, params, stacks) {\r\n  const userPadding = params.padding;\r\n  let {x, y} = chartArea;\r\n\r\n  for (const layout of boxes) {\r\n    const box = layout.box;\r\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\r\n    const weight = (layout.stackWeight / stack.weight) || 1;\r\n    if (layout.horizontal) {\r\n      const width = chartArea.w * weight;\r\n      const height = stack.size || box.height;\r\n      if (defined(stack.start)) {\r\n        y = stack.start;\r\n      }\r\n      if (box.fullSize) {\r\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\r\n      } else {\r\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\r\n      }\r\n      stack.start = y;\r\n      stack.placed += width;\r\n      y = box.bottom;\r\n    } else {\r\n      const height = chartArea.h * weight;\r\n      const width = stack.size || box.width;\r\n      if (defined(stack.start)) {\r\n        x = stack.start;\r\n      }\r\n      if (box.fullSize) {\r\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\r\n      } else {\r\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\r\n      }\r\n      stack.start = x;\r\n      stack.placed += height;\r\n      x = box.right;\r\n    }\r\n  }\r\n\r\n  chartArea.x = x;\r\n  chartArea.y = y;\r\n}\r\n\r\n/**\r\n * @interface LayoutItem\r\n * @typedef {object} LayoutItem\r\n * @prop {string} position - The position of the item in the chart layout. Possible values are\r\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\r\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\r\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\r\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\r\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\r\n * @prop {function} draw - Draws the element\r\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\r\n * @prop {number} width - Width of item. Must be valid after update()\r\n * @prop {number} height - Height of item. Must be valid after update()\r\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\r\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\r\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\r\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\r\n */\r\n\r\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\r\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\r\n// It is this service's responsibility of carrying out that layout.\r\nexport default {\r\n\r\n  /**\r\n\t * Register a box to a chart.\r\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\r\n\t * @param {Chart} chart - the chart to use\r\n\t * @param {LayoutItem} item - the item to add to be laid out\r\n\t */\r\n  addBox(chart, item) {\r\n    if (!chart.boxes) {\r\n      chart.boxes = [];\r\n    }\r\n\r\n    // initialize item with default values\r\n    item.fullSize = item.fullSize || false;\r\n    item.position = item.position || 'top';\r\n    item.weight = item.weight || 0;\r\n    // @ts-ignore\r\n    item._layers = item._layers || function() {\r\n      return [{\r\n        z: 0,\r\n        draw(chartArea) {\r\n          item.draw(chartArea);\r\n        }\r\n      }];\r\n    };\r\n\r\n    chart.boxes.push(item);\r\n  },\r\n\r\n  /**\r\n\t * Remove a layoutItem from a chart\r\n\t * @param {Chart} chart - the chart to remove the box from\r\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\r\n\t */\r\n  removeBox(chart, layoutItem) {\r\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\r\n    if (index !== -1) {\r\n      chart.boxes.splice(index, 1);\r\n    }\r\n  },\r\n\r\n  /**\r\n\t * Sets (or updates) options on the given `item`.\r\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\r\n\t * @param {LayoutItem} item - the item to configure with the given options\r\n\t * @param {object} options - the new item options.\r\n\t */\r\n  configure(chart, item, options) {\r\n    item.fullSize = options.fullSize;\r\n    item.position = options.position;\r\n    item.weight = options.weight;\r\n  },\r\n\r\n  /**\r\n\t * Fits boxes of the given chart into the given size by having each box measure itself\r\n\t * then running a fitting algorithm\r\n\t * @param {Chart} chart - the chart\r\n\t * @param {number} width - the width to fit into\r\n\t * @param {number} height - the height to fit into\r\n   * @param {number} minPadding - minimum padding required for each side of chart area\r\n\t */\r\n  update(chart, width, height, minPadding) {\r\n    if (!chart) {\r\n      return;\r\n    }\r\n\r\n    const padding = toPadding(chart.options.layout.padding);\r\n    const availableWidth = Math.max(width - padding.width, 0);\r\n    const availableHeight = Math.max(height - padding.height, 0);\r\n    const boxes = buildLayoutBoxes(chart.boxes);\r\n    const verticalBoxes = boxes.vertical;\r\n    const horizontalBoxes = boxes.horizontal;\r\n\r\n    // Before any changes are made, notify boxes that an update is about to being\r\n    // This is used to clear any cached data (e.g. scale limits)\r\n    each(chart.boxes, box => {\r\n      if (typeof box.beforeLayout === 'function') {\r\n        box.beforeLayout();\r\n      }\r\n    });\r\n\r\n    // Essentially we now have any number of boxes on each of the 4 sides.\r\n    // Our canvas looks like the following.\r\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\r\n    // B1 is the bottom axis\r\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\r\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\r\n    // an error will be thrown.\r\n    //\r\n    // |----------------------------------------------------|\r\n    // |                  T1 (Full Width)                   |\r\n    // |----------------------------------------------------|\r\n    // |    |    |                 T2                  |    |\r\n    // |    |----|-------------------------------------|----|\r\n    // |    |    | C1 |                           | C2 |    |\r\n    // |    |    |----|                           |----|    |\r\n    // |    |    |                                     |    |\r\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\r\n    // |    |    |                                     |    |\r\n    // |    |    |----|                           |----|    |\r\n    // |    |    | C3 |                           | C4 |    |\r\n    // |    |----|-------------------------------------|----|\r\n    // |    |    |                 B1                  |    |\r\n    // |----------------------------------------------------|\r\n    // |                  B2 (Full Width)                   |\r\n    // |----------------------------------------------------|\r\n    //\r\n\r\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\r\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\r\n\r\n    const params = Object.freeze({\r\n      outerWidth: width,\r\n      outerHeight: height,\r\n      padding,\r\n      availableWidth,\r\n      availableHeight,\r\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\r\n      hBoxMaxHeight: availableHeight / 2\r\n    });\r\n    const maxPadding = Object.assign({}, padding);\r\n    updateMaxPadding(maxPadding, toPadding(minPadding));\r\n    const chartArea = Object.assign({\r\n      maxPadding,\r\n      w: availableWidth,\r\n      h: availableHeight,\r\n      x: padding.left,\r\n      y: padding.top\r\n    }, padding);\r\n\r\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\r\n\r\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\r\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\r\n\r\n    // Then fit vertical boxes\r\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\r\n\r\n    // Then fit horizontal boxes\r\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\r\n      // if the area changed, re-fit vertical boxes\r\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\r\n    }\r\n\r\n    handleMaxPadding(chartArea);\r\n\r\n    // Finally place the boxes to correct coordinates\r\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\r\n\r\n    // Move to opposite side of chart\r\n    chartArea.x += chartArea.w;\r\n    chartArea.y += chartArea.h;\r\n\r\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\r\n\r\n    chart.chartArea = {\r\n      left: chartArea.left,\r\n      top: chartArea.top,\r\n      right: chartArea.left + chartArea.w,\r\n      bottom: chartArea.top + chartArea.h,\r\n      height: chartArea.h,\r\n      width: chartArea.w,\r\n    };\r\n\r\n    // Finally update boxes in chartArea (radial scale for example)\r\n    each(boxes.chartArea, (layout) => {\r\n      const box = layout.box;\r\n      Object.assign(box, chart.chartArea);\r\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\r\n    });\r\n  }\r\n};\r\n","\r\n/**\r\n * @typedef { import(\"../core/core.controller\").default } Chart\r\n */\r\n\r\n/**\r\n * Abstract class that allows abstracting platform dependencies away from the chart.\r\n */\r\nexport default class BasePlatform {\r\n  /**\r\n\t * Called at chart construction time, returns a context2d instance implementing\r\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\r\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\r\n\t * @param {number} [aspectRatio] - The chart options\r\n\t */\r\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * Called at chart destruction time, releases any resources associated to the context\r\n\t * previously returned by the acquireContext() method.\r\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\r\n\t * @returns {boolean} true if the method succeeded, else false\r\n\t */\r\n  releaseContext(context) { // eslint-disable-line no-unused-vars\r\n    return false;\r\n  }\r\n\r\n  /**\r\n\t * Registers the specified listener on the given chart.\r\n\t * @param {Chart} chart - Chart from which to listen for event\r\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\r\n\t * @param {function} listener - Receives a notification (an object that implements\r\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\r\n\t */\r\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * Removes the specified listener previously registered with addEventListener.\r\n\t * @param {Chart} chart - Chart from which to remove the listener\r\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\r\n\t * @param {function} listener - The listener function to remove from the event target.\r\n\t */\r\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\r\n\t */\r\n  getDevicePixelRatio() {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n\t * Returns the maximum size in pixels of given canvas element.\r\n\t * @param {HTMLCanvasElement} element\r\n\t * @param {number} [width] - content width of parent element\r\n\t * @param {number} [height] - content height of parent element\r\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\r\n\t */\r\n  getMaximumSize(element, width, height, aspectRatio) {\r\n    width = Math.max(0, width || element.width);\r\n    height = height || element.height;\r\n    return {\r\n      width,\r\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\r\n\t */\r\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Updates config with platform specific requirements\r\n   * @param {import(\"../core/core.config\").default} config\r\n   */\r\n  updateConfig(config) { // eslint-disable-line no-unused-vars\r\n    // no-op\r\n  }\r\n}\r\n","/**\r\n * Platform fallback implementation (minimal).\r\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\r\n */\r\n\r\nimport BasePlatform from './platform.base';\r\n\r\n/**\r\n * Platform class for charts without access to the DOM or to many element properties\r\n * This platform is used by default for any chart passed an OffscreenCanvas.\r\n * @extends BasePlatform\r\n */\r\nexport default class BasicPlatform extends BasePlatform {\r\n  acquireContext(item) {\r\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\r\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\r\n    // https://github.com/chartjs/Chart.js/issues/2807\r\n    return item && item.getContext && item.getContext('2d') || null;\r\n  }\r\n  updateConfig(config) {\r\n    config.options.animation = false;\r\n  }\r\n}\r\n","/**\r\n * Chart.Platform implementation for targeting a web browser\r\n */\r\n\r\nimport BasePlatform from './platform.base';\r\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom';\r\nimport {throttled} from '../helpers/helpers.extras';\r\nimport {isNullOrUndef} from '../helpers/helpers.core';\r\n\r\n/**\r\n * @typedef { import(\"../core/core.controller\").default } Chart\r\n */\r\n\r\nconst EXPANDO_KEY = '$chartjs';\r\n\r\n/**\r\n * DOM event types -> Chart.js event types.\r\n * Note: only events with different types are mapped.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\r\n */\r\nconst EVENT_TYPES = {\r\n  touchstart: 'mousedown',\r\n  touchmove: 'mousemove',\r\n  touchend: 'mouseup',\r\n  pointerenter: 'mouseenter',\r\n  pointerdown: 'mousedown',\r\n  pointermove: 'mousemove',\r\n  pointerup: 'mouseup',\r\n  pointerleave: 'mouseout',\r\n  pointerout: 'mouseout'\r\n};\r\n\r\nconst isNullOrEmpty = value => value === null || value === '';\r\n/**\r\n * Initializes the canvas style and render size without modifying the canvas display size,\r\n * since responsiveness is handled by the controller.resize() method. The config is used\r\n * to determine the aspect ratio to apply in case no explicit height has been specified.\r\n * @param {HTMLCanvasElement} canvas\r\n * @param {number} [aspectRatio]\r\n */\r\nfunction initCanvas(canvas, aspectRatio) {\r\n  const style = canvas.style;\r\n\r\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\r\n  // returns null or '' if no explicit value has been set to the canvas attribute.\r\n  const renderHeight = canvas.getAttribute('height');\r\n  const renderWidth = canvas.getAttribute('width');\r\n\r\n  // Chart.js modifies some canvas values that we want to restore on destroy\r\n  canvas[EXPANDO_KEY] = {\r\n    initial: {\r\n      height: renderHeight,\r\n      width: renderWidth,\r\n      style: {\r\n        display: style.display,\r\n        height: style.height,\r\n        width: style.width\r\n      }\r\n    }\r\n  };\r\n\r\n  // Force canvas to display as block to avoid extra space caused by inline\r\n  // elements, which would interfere with the responsive resize process.\r\n  // https://github.com/chartjs/Chart.js/issues/2538\r\n  style.display = style.display || 'block';\r\n  // Include possible borders in the size\r\n  style.boxSizing = style.boxSizing || 'border-box';\r\n\r\n  if (isNullOrEmpty(renderWidth)) {\r\n    const displayWidth = readUsedSize(canvas, 'width');\r\n    if (displayWidth !== undefined) {\r\n      canvas.width = displayWidth;\r\n    }\r\n  }\r\n\r\n  if (isNullOrEmpty(renderHeight)) {\r\n    if (canvas.style.height === '') {\r\n      // If no explicit render height and style height, let's apply the aspect ratio,\r\n      // which one can be specified by the user but also by charts as default option\r\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\r\n      canvas.height = canvas.width / (aspectRatio || 2);\r\n    } else {\r\n      const displayHeight = readUsedSize(canvas, 'height');\r\n      if (displayHeight !== undefined) {\r\n        canvas.height = displayHeight;\r\n      }\r\n    }\r\n  }\r\n\r\n  return canvas;\r\n}\r\n\r\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\r\n// https://github.com/chartjs/Chart.js/issues/4287\r\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\r\n\r\nfunction addListener(node, type, listener) {\r\n  node.addEventListener(type, listener, eventListenerOptions);\r\n}\r\n\r\nfunction removeListener(chart, type, listener) {\r\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\r\n}\r\n\r\nfunction fromNativeEvent(event, chart) {\r\n  const type = EVENT_TYPES[event.type] || event.type;\r\n  const {x, y} = getRelativePosition(event, chart);\r\n  return {\r\n    type,\r\n    chart,\r\n    native: event,\r\n    x: x !== undefined ? x : null,\r\n    y: y !== undefined ? y : null,\r\n  };\r\n}\r\n\r\nfunction nodeListContains(nodeList, canvas) {\r\n  for (const node of nodeList) {\r\n    if (node === canvas || node.contains(canvas)) {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction createAttachObserver(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const observer = new MutationObserver(entries => {\r\n    let trigger = false;\r\n    for (const entry of entries) {\r\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\r\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\r\n    }\r\n    if (trigger) {\r\n      listener();\r\n    }\r\n  });\r\n  observer.observe(document, {childList: true, subtree: true});\r\n  return observer;\r\n}\r\n\r\nfunction createDetachObserver(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const observer = new MutationObserver(entries => {\r\n    let trigger = false;\r\n    for (const entry of entries) {\r\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\r\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\r\n    }\r\n    if (trigger) {\r\n      listener();\r\n    }\r\n  });\r\n  observer.observe(document, {childList: true, subtree: true});\r\n  return observer;\r\n}\r\n\r\nconst drpListeningCharts = new Map();\r\nlet oldDevicePixelRatio = 0;\r\n\r\nfunction onWindowResize() {\r\n  const dpr = window.devicePixelRatio;\r\n  if (dpr === oldDevicePixelRatio) {\r\n    return;\r\n  }\r\n  oldDevicePixelRatio = dpr;\r\n  drpListeningCharts.forEach((resize, chart) => {\r\n    if (chart.currentDevicePixelRatio !== dpr) {\r\n      resize();\r\n    }\r\n  });\r\n}\r\n\r\nfunction listenDevicePixelRatioChanges(chart, resize) {\r\n  if (!drpListeningCharts.size) {\r\n    window.addEventListener('resize', onWindowResize);\r\n  }\r\n  drpListeningCharts.set(chart, resize);\r\n}\r\n\r\nfunction unlistenDevicePixelRatioChanges(chart) {\r\n  drpListeningCharts.delete(chart);\r\n  if (!drpListeningCharts.size) {\r\n    window.removeEventListener('resize', onWindowResize);\r\n  }\r\n}\r\n\r\nfunction createResizeObserver(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const container = canvas && _getParentNode(canvas);\r\n  if (!container) {\r\n    return;\r\n  }\r\n  const resize = throttled((width, height) => {\r\n    const w = container.clientWidth;\r\n    listener(width, height);\r\n    if (w < container.clientWidth) {\r\n      // If the container size shrank during chart resize, let's assume\r\n      // scrollbar appeared. So we resize again with the scrollbar visible -\r\n      // effectively making chart smaller and the scrollbar hidden again.\r\n      // Because we are inside `throttled`, and currently `ticking`, scroll\r\n      // events are ignored during this whole 2 resize process.\r\n      // If we assumed wrong and something else happened, we are resizing\r\n      // twice in a frame (potential performance issue)\r\n      listener();\r\n    }\r\n  }, window);\r\n\r\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\r\n  const observer = new ResizeObserver(entries => {\r\n    const entry = entries[0];\r\n    const width = entry.contentRect.width;\r\n    const height = entry.contentRect.height;\r\n    // When its container's display is set to 'none' the callback will be called with a\r\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\r\n    // resizing in such case.\r\n    if (width === 0 && height === 0) {\r\n      return;\r\n    }\r\n    resize(width, height);\r\n  });\r\n  observer.observe(container);\r\n  listenDevicePixelRatioChanges(chart, resize);\r\n\r\n  return observer;\r\n}\r\n\r\nfunction releaseObserver(chart, type, observer) {\r\n  if (observer) {\r\n    observer.disconnect();\r\n  }\r\n  if (type === 'resize') {\r\n    unlistenDevicePixelRatioChanges(chart);\r\n  }\r\n}\r\n\r\nfunction createProxyAndListen(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const proxy = throttled((event) => {\r\n    // This case can occur if the chart is destroyed while waiting\r\n    // for the throttled function to occur. We prevent crashes by checking\r\n    // for a destroyed chart\r\n    if (chart.ctx !== null) {\r\n      listener(fromNativeEvent(event, chart));\r\n    }\r\n  }, chart);\r\n\r\n  addListener(canvas, type, proxy);\r\n\r\n  return proxy;\r\n}\r\n\r\n/**\r\n * Platform class for charts that can access the DOM and global window/document properties\r\n * @extends BasePlatform\r\n */\r\nexport default class DomPlatform extends BasePlatform {\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t * @param {number} [aspectRatio]\r\n\t * @return {CanvasRenderingContext2D|null}\r\n\t */\r\n  acquireContext(canvas, aspectRatio) {\r\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\r\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\r\n    // https://github.com/chartjs/Chart.js/issues/2807\r\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\r\n\r\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\r\n    // inside an iframe or when running in a protected environment. We could guess the\r\n    // types from their toString() value but let's keep things flexible and assume it's\r\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\r\n    // https://github.com/chartjs/Chart.js/issues/3887\r\n    // https://github.com/chartjs/Chart.js/issues/4102\r\n    // https://github.com/chartjs/Chart.js/issues/4152\r\n    if (context && context.canvas === canvas) {\r\n      // Load platform resources on first chart creation, to make it possible to\r\n      // import the library before setting platform options.\r\n      initCanvas(canvas, aspectRatio);\r\n      return context;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n\t * @param {CanvasRenderingContext2D} context\r\n\t */\r\n  releaseContext(context) {\r\n    const canvas = context.canvas;\r\n    if (!canvas[EXPANDO_KEY]) {\r\n      return false;\r\n    }\r\n\r\n    const initial = canvas[EXPANDO_KEY].initial;\r\n    ['height', 'width'].forEach((prop) => {\r\n      const value = initial[prop];\r\n      if (isNullOrUndef(value)) {\r\n        canvas.removeAttribute(prop);\r\n      } else {\r\n        canvas.setAttribute(prop, value);\r\n      }\r\n    });\r\n\r\n    const style = initial.style || {};\r\n    Object.keys(style).forEach((key) => {\r\n      canvas.style[key] = style[key];\r\n    });\r\n\r\n    // The canvas render size might have been changed (and thus the state stack discarded),\r\n    // we can't use save() and restore() to restore the initial state. So make sure that at\r\n    // least the canvas context is reset to the default state by setting the canvas width.\r\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\r\n    // eslint-disable-next-line no-self-assign\r\n    canvas.width = canvas.width;\r\n\r\n    delete canvas[EXPANDO_KEY];\r\n    return true;\r\n  }\r\n\r\n  /**\r\n\t *\r\n\t * @param {Chart} chart\r\n\t * @param {string} type\r\n\t * @param {function} listener\r\n\t */\r\n  addEventListener(chart, type, listener) {\r\n    // Can have only one listener per type, so make sure previous is removed\r\n    this.removeEventListener(chart, type);\r\n\r\n    const proxies = chart.$proxies || (chart.$proxies = {});\r\n    const handlers = {\r\n      attach: createAttachObserver,\r\n      detach: createDetachObserver,\r\n      resize: createResizeObserver\r\n    };\r\n    const handler = handlers[type] || createProxyAndListen;\r\n    proxies[type] = handler(chart, type, listener);\r\n  }\r\n\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @param {string} type\r\n\t */\r\n  removeEventListener(chart, type) {\r\n    const proxies = chart.$proxies || (chart.$proxies = {});\r\n    const proxy = proxies[type];\r\n\r\n    if (!proxy) {\r\n      return;\r\n    }\r\n\r\n    const handlers = {\r\n      attach: releaseObserver,\r\n      detach: releaseObserver,\r\n      resize: releaseObserver\r\n    };\r\n    const handler = handlers[type] || removeListener;\r\n    handler(chart, type, proxy);\r\n    proxies[type] = undefined;\r\n  }\r\n\r\n  getDevicePixelRatio() {\r\n    return window.devicePixelRatio;\r\n  }\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t * @param {number} [width] - content width of parent element\r\n\t * @param {number} [height] - content height of parent element\r\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\r\n\t */\r\n  getMaximumSize(canvas, width, height, aspectRatio) {\r\n    return getMaximumSize(canvas, width, height, aspectRatio);\r\n  }\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t */\r\n  isAttached(canvas) {\r\n    const container = _getParentNode(canvas);\r\n    return !!(container && container.isConnected);\r\n  }\r\n}\r\n","import {_isDomSupported} from '../helpers';\r\nimport BasePlatform from './platform.base';\r\nimport BasicPlatform from './platform.basic';\r\nimport DomPlatform from './platform.dom';\r\n\r\nexport function _detectPlatform(canvas) {\r\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\r\n    return BasicPlatform;\r\n  }\r\n  return DomPlatform;\r\n}\r\n\r\nexport {BasePlatform, BasicPlatform, DomPlatform};\r\n","import effects from '../helpers/helpers.easing';\r\nimport {resolve} from '../helpers/helpers.options';\r\nimport {color as helpersColor} from '../helpers/helpers.color';\r\n\r\nconst transparent = 'transparent';\r\nconst interpolators = {\r\n  boolean(from, to, factor) {\r\n    return factor > 0.5 ? to : from;\r\n  },\r\n  /**\r\n   * @param {string} from\r\n   * @param {string} to\r\n   * @param {number} factor\r\n   */\r\n  color(from, to, factor) {\r\n    const c0 = helpersColor(from || transparent);\r\n    const c1 = c0.valid && helpersColor(to || transparent);\r\n    return c1 && c1.valid\r\n      ? c1.mix(c0, factor).hexString()\r\n      : to;\r\n  },\r\n  number(from, to, factor) {\r\n    return from + (to - from) * factor;\r\n  }\r\n};\r\n\r\nexport default class Animation {\r\n  constructor(cfg, target, prop, to) {\r\n    const currentValue = target[prop];\r\n\r\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\r\n    const from = resolve([cfg.from, currentValue, to]);\r\n\r\n    this._active = true;\r\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\r\n    this._easing = effects[cfg.easing] || effects.linear;\r\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\r\n    this._duration = this._total = Math.floor(cfg.duration);\r\n    this._loop = !!cfg.loop;\r\n    this._target = target;\r\n    this._prop = prop;\r\n    this._from = from;\r\n    this._to = to;\r\n    this._promises = undefined;\r\n  }\r\n\r\n  active() {\r\n    return this._active;\r\n  }\r\n\r\n  update(cfg, to, date) {\r\n    if (this._active) {\r\n      this._notify(false);\r\n\r\n      const currentValue = this._target[this._prop];\r\n      const elapsed = date - this._start;\r\n      const remain = this._duration - elapsed;\r\n      this._start = date;\r\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\r\n      this._total += elapsed;\r\n      this._loop = !!cfg.loop;\r\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\r\n      this._from = resolve([cfg.from, currentValue, to]);\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    if (this._active) {\r\n      // update current evaluated value, for smoother animations\r\n      this.tick(Date.now());\r\n      this._active = false;\r\n      this._notify(false);\r\n    }\r\n  }\r\n\r\n  tick(date) {\r\n    const elapsed = date - this._start;\r\n    const duration = this._duration;\r\n    const prop = this._prop;\r\n    const from = this._from;\r\n    const loop = this._loop;\r\n    const to = this._to;\r\n    let factor;\r\n\r\n    this._active = from !== to && (loop || (elapsed < duration));\r\n\r\n    if (!this._active) {\r\n      this._target[prop] = to;\r\n      this._notify(true);\r\n      return;\r\n    }\r\n\r\n    if (elapsed < 0) {\r\n      this._target[prop] = from;\r\n      return;\r\n    }\r\n\r\n    factor = (elapsed / duration) % 2;\r\n    factor = loop && factor > 1 ? 2 - factor : factor;\r\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\r\n\r\n    this._target[prop] = this._fn(from, to, factor);\r\n  }\r\n\r\n  wait() {\r\n    const promises = this._promises || (this._promises = []);\r\n    return new Promise((res, rej) => {\r\n      promises.push({res, rej});\r\n    });\r\n  }\r\n\r\n  _notify(resolved) {\r\n    const method = resolved ? 'res' : 'rej';\r\n    const promises = this._promises || [];\r\n    for (let i = 0; i < promises.length; i++) {\r\n      promises[i][method]();\r\n    }\r\n  }\r\n}\r\n","import animator from './core.animator';\r\nimport Animation from './core.animation';\r\nimport defaults from './core.defaults';\r\nimport {isArray, isObject} from '../helpers/helpers.core';\r\n\r\nexport default class Animations {\r\n  constructor(chart, config) {\r\n    this._chart = chart;\r\n    this._properties = new Map();\r\n    this.configure(config);\r\n  }\r\n\r\n  configure(config) {\r\n    if (!isObject(config)) {\r\n      return;\r\n    }\r\n\r\n    const animationOptions = Object.keys(defaults.animation);\r\n    const animatedProps = this._properties;\r\n\r\n    Object.getOwnPropertyNames(config).forEach(key => {\r\n      const cfg = config[key];\r\n      if (!isObject(cfg)) {\r\n        return;\r\n      }\r\n      const resolved = {};\r\n      for (const option of animationOptions) {\r\n        resolved[option] = cfg[option];\r\n      }\r\n\r\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\r\n        if (prop === key || !animatedProps.has(prop)) {\r\n          animatedProps.set(prop, resolved);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * Utility to handle animation of `options`.\r\n\t * @private\r\n\t */\r\n  _animateOptions(target, values) {\r\n    const newOptions = values.options;\r\n    const options = resolveTargetOptions(target, newOptions);\r\n    if (!options) {\r\n      return [];\r\n    }\r\n\r\n    const animations = this._createAnimations(options, newOptions);\r\n    if (newOptions.$shared) {\r\n      // Going to shared options:\r\n      // After all animations are done, assign the shared options object to the element\r\n      // So any new updates to the shared options are observed\r\n      awaitAll(target.options.$animations, newOptions).then(() => {\r\n        target.options = newOptions;\r\n      }, () => {\r\n        // rejected, noop\r\n      });\r\n    }\r\n\r\n    return animations;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _createAnimations(target, values) {\r\n    const animatedProps = this._properties;\r\n    const animations = [];\r\n    const running = target.$animations || (target.$animations = {});\r\n    const props = Object.keys(values);\r\n    const date = Date.now();\r\n    let i;\r\n\r\n    for (i = props.length - 1; i >= 0; --i) {\r\n      const prop = props[i];\r\n      if (prop.charAt(0) === '$') {\r\n        continue;\r\n      }\r\n\r\n      if (prop === 'options') {\r\n        animations.push(...this._animateOptions(target, values));\r\n        continue;\r\n      }\r\n      const value = values[prop];\r\n      let animation = running[prop];\r\n      const cfg = animatedProps.get(prop);\r\n\r\n      if (animation) {\r\n        if (cfg && animation.active()) {\r\n          // There is an existing active animation, let's update that\r\n          animation.update(cfg, value, date);\r\n          continue;\r\n        } else {\r\n          animation.cancel();\r\n        }\r\n      }\r\n      if (!cfg || !cfg.duration) {\r\n        // not animated, set directly to new value\r\n        target[prop] = value;\r\n        continue;\r\n      }\r\n\r\n      running[prop] = animation = new Animation(cfg, target, prop, value);\r\n      animations.push(animation);\r\n    }\r\n    return animations;\r\n  }\r\n\r\n\r\n  /**\r\n\t * Update `target` properties to new values, using configured animations\r\n\t * @param {object} target - object to update\r\n\t * @param {object} values - new target properties\r\n\t * @returns {boolean|undefined} - `true` if animations were started\r\n\t **/\r\n  update(target, values) {\r\n    if (this._properties.size === 0) {\r\n      // Nothing is animated, just apply the new values.\r\n      Object.assign(target, values);\r\n      return;\r\n    }\r\n\r\n    const animations = this._createAnimations(target, values);\r\n\r\n    if (animations.length) {\r\n      animator.add(this._chart, animations);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction awaitAll(animations, properties) {\r\n  const running = [];\r\n  const keys = Object.keys(properties);\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const anim = animations[keys[i]];\r\n    if (anim && anim.active()) {\r\n      running.push(anim.wait());\r\n    }\r\n  }\r\n  // @ts-ignore\r\n  return Promise.all(running);\r\n}\r\n\r\nfunction resolveTargetOptions(target, newOptions) {\r\n  if (!newOptions) {\r\n    return;\r\n  }\r\n  let options = target.options;\r\n  if (!options) {\r\n    target.options = newOptions;\r\n    return;\r\n  }\r\n  if (options.$shared) {\r\n    // Going from shared options to distinct one:\r\n    // Create new options object containing the old shared values and start updating that.\r\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\r\n  }\r\n  return options;\r\n}\r\n","import Animations from './core.animations';\r\nimport defaults from './core.defaults';\r\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core';\r\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection';\r\nimport {createContext, sign} from '../helpers';\r\n\r\n/**\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n * @typedef { import(\"./core.scale\").default } Scale\r\n */\r\n\r\nfunction scaleClip(scale, allowedOverflow) {\r\n  const opts = scale && scale.options || {};\r\n  const reverse = opts.reverse;\r\n  const min = opts.min === undefined ? allowedOverflow : 0;\r\n  const max = opts.max === undefined ? allowedOverflow : 0;\r\n  return {\r\n    start: reverse ? max : min,\r\n    end: reverse ? min : max\r\n  };\r\n}\r\n\r\nfunction defaultClip(xScale, yScale, allowedOverflow) {\r\n  if (allowedOverflow === false) {\r\n    return false;\r\n  }\r\n  const x = scaleClip(xScale, allowedOverflow);\r\n  const y = scaleClip(yScale, allowedOverflow);\r\n\r\n  return {\r\n    top: y.end,\r\n    right: x.end,\r\n    bottom: y.start,\r\n    left: x.start\r\n  };\r\n}\r\n\r\nfunction toClip(value) {\r\n  let t, r, b, l;\r\n\r\n  if (isObject(value)) {\r\n    t = value.top;\r\n    r = value.right;\r\n    b = value.bottom;\r\n    l = value.left;\r\n  } else {\r\n    t = r = b = l = value;\r\n  }\r\n\r\n  return {\r\n    top: t,\r\n    right: r,\r\n    bottom: b,\r\n    left: l,\r\n    disabled: value === false\r\n  };\r\n}\r\n\r\nfunction getSortedDatasetIndices(chart, filterVisible) {\r\n  const keys = [];\r\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\r\n  let i, ilen;\r\n\r\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\r\n    keys.push(metasets[i].index);\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction applyStack(stack, value, dsIndex, options = {}) {\r\n  const keys = stack.keys;\r\n  const singleMode = options.mode === 'single';\r\n  let i, ilen, datasetIndex, otherValue;\r\n\r\n  if (value === null) {\r\n    return;\r\n  }\r\n\r\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\r\n    datasetIndex = +keys[i];\r\n    if (datasetIndex === dsIndex) {\r\n      if (options.all) {\r\n        continue;\r\n      }\r\n      break;\r\n    }\r\n    otherValue = stack.values[datasetIndex];\r\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\r\n      value += otherValue;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction convertObjectDataToArray(data) {\r\n  const keys = Object.keys(data);\r\n  const adata = new Array(keys.length);\r\n  let i, ilen, key;\r\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\r\n    key = keys[i];\r\n    adata[i] = {\r\n      x: key,\r\n      y: data[key]\r\n    };\r\n  }\r\n  return adata;\r\n}\r\n\r\nfunction isStacked(scale, meta) {\r\n  const stacked = scale && scale.options.stacked;\r\n  return stacked || (stacked === undefined && meta.stack !== undefined);\r\n}\r\n\r\nfunction getStackKey(indexScale, valueScale, meta) {\r\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\r\n}\r\n\r\nfunction getUserBounds(scale) {\r\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\r\n  return {\r\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\r\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\r\n  };\r\n}\r\n\r\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\r\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\r\n  return subStack[indexValue] || (subStack[indexValue] = {});\r\n}\r\n\r\nfunction getLastIndexInStack(stack, vScale, positive, type) {\r\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\r\n    const value = stack[meta.index];\r\n    if ((positive && value > 0) || (!positive && value < 0)) {\r\n      return meta.index;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction updateStacks(controller, parsed) {\r\n  const {chart, _cachedMeta: meta} = controller;\r\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\r\n  const {iScale, vScale, index: datasetIndex} = meta;\r\n  const iAxis = iScale.axis;\r\n  const vAxis = vScale.axis;\r\n  const key = getStackKey(iScale, vScale, meta);\r\n  const ilen = parsed.length;\r\n  let stack;\r\n\r\n  for (let i = 0; i < ilen; ++i) {\r\n    const item = parsed[i];\r\n    const {[iAxis]: index, [vAxis]: value} = item;\r\n    const itemStacks = item._stacks || (item._stacks = {});\r\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\r\n    stack[datasetIndex] = value;\r\n\r\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\r\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\r\n  }\r\n}\r\n\r\nfunction getFirstScaleId(chart, axis) {\r\n  const scales = chart.scales;\r\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\r\n}\r\n\r\nfunction createDatasetContext(parent, index) {\r\n  return createContext(parent,\r\n    {\r\n      active: false,\r\n      dataset: undefined,\r\n      datasetIndex: index,\r\n      index,\r\n      mode: 'default',\r\n      type: 'dataset'\r\n    }\r\n  );\r\n}\r\n\r\nfunction createDataContext(parent, index, element) {\r\n  return createContext(parent, {\r\n    active: false,\r\n    dataIndex: index,\r\n    parsed: undefined,\r\n    raw: undefined,\r\n    element,\r\n    index,\r\n    mode: 'default',\r\n    type: 'data'\r\n  });\r\n}\r\n\r\nfunction clearStacks(meta, items) {\r\n  // Not using meta.index here, because it might be already updated if the dataset changed location\r\n  const datasetIndex = meta.controller.index;\r\n  const axis = meta.vScale && meta.vScale.axis;\r\n  if (!axis) {\r\n    return;\r\n  }\r\n\r\n  items = items || meta._parsed;\r\n  for (const parsed of items) {\r\n    const stacks = parsed._stacks;\r\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\r\n      return;\r\n    }\r\n    delete stacks[axis][datasetIndex];\r\n  }\r\n}\r\n\r\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\r\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\r\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\r\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\r\n\r\nexport default class DatasetController {\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {};\r\n\r\n  /**\r\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\r\n   */\r\n  static datasetElementType = null;\r\n\r\n  /**\r\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\r\n   */\r\n  static dataElementType = null;\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @param {number} datasetIndex\r\n\t */\r\n  constructor(chart, datasetIndex) {\r\n    this.chart = chart;\r\n    this._ctx = chart.ctx;\r\n    this.index = datasetIndex;\r\n    this._cachedDataOpts = {};\r\n    this._cachedMeta = this.getMeta();\r\n    this._type = this._cachedMeta.type;\r\n    this.options = undefined;\r\n    /** @type {boolean | object} */\r\n    this._parsing = false;\r\n    this._data = undefined;\r\n    this._objectData = undefined;\r\n    this._sharedOptions = undefined;\r\n    this._drawStart = undefined;\r\n    this._drawCount = undefined;\r\n    this.enableOptionSharing = false;\r\n    this.supportsDecimation = false;\r\n    this.$context = undefined;\r\n    this._syncList = [];\r\n    this.datasetElementType = new.target.datasetElementType;\r\n    this.dataElementType = new.target.dataElementType;\r\n\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    const meta = this._cachedMeta;\r\n    this.configure();\r\n    this.linkScales();\r\n    meta._stacked = isStacked(meta.vScale, meta);\r\n    this.addElements();\r\n\r\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\r\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\r\n    }\r\n  }\r\n\r\n  updateIndex(datasetIndex) {\r\n    if (this.index !== datasetIndex) {\r\n      clearStacks(this._cachedMeta);\r\n    }\r\n    this.index = datasetIndex;\r\n  }\r\n\r\n  linkScales() {\r\n    const chart = this.chart;\r\n    const meta = this._cachedMeta;\r\n    const dataset = this.getDataset();\r\n\r\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\r\n\r\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\r\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\r\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\r\n    const indexAxis = meta.indexAxis;\r\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\r\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\r\n    meta.xScale = this.getScaleForId(xid);\r\n    meta.yScale = this.getScaleForId(yid);\r\n    meta.rScale = this.getScaleForId(rid);\r\n    meta.iScale = this.getScaleForId(iid);\r\n    meta.vScale = this.getScaleForId(vid);\r\n  }\r\n\r\n  getDataset() {\r\n    return this.chart.data.datasets[this.index];\r\n  }\r\n\r\n  getMeta() {\r\n    return this.chart.getDatasetMeta(this.index);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} scaleID\r\n\t * @return {Scale}\r\n\t */\r\n  getScaleForId(scaleID) {\r\n    return this.chart.scales[scaleID];\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getOtherScale(scale) {\r\n    const meta = this._cachedMeta;\r\n    return scale === meta.iScale\r\n      ? meta.vScale\r\n      : meta.iScale;\r\n  }\r\n\r\n  reset() {\r\n    this._update('reset');\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _destroy() {\r\n    const meta = this._cachedMeta;\r\n    if (this._data) {\r\n      unlistenArrayEvents(this._data, this);\r\n    }\r\n    if (meta._stacked) {\r\n      clearStacks(meta);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _dataCheck() {\r\n    const dataset = this.getDataset();\r\n    const data = dataset.data || (dataset.data = []);\r\n    const _data = this._data;\r\n\r\n    // In order to correctly handle data addition/deletion animation (an thus simulate\r\n    // real-time charts), we need to monitor these data modifications and synchronize\r\n    // the internal meta data accordingly.\r\n\r\n    if (isObject(data)) {\r\n      this._data = convertObjectDataToArray(data);\r\n    } else if (_data !== data) {\r\n      if (_data) {\r\n        // This case happens when the user replaced the data array instance.\r\n        unlistenArrayEvents(_data, this);\r\n        // Discard old parsed data and stacks\r\n        const meta = this._cachedMeta;\r\n        clearStacks(meta);\r\n        meta._parsed = [];\r\n      }\r\n      if (data && Object.isExtensible(data)) {\r\n        listenArrayEvents(data, this);\r\n      }\r\n      this._syncList = [];\r\n      this._data = data;\r\n    }\r\n  }\r\n\r\n  addElements() {\r\n    const meta = this._cachedMeta;\r\n\r\n    this._dataCheck();\r\n\r\n    if (this.datasetElementType) {\r\n      meta.dataset = new this.datasetElementType();\r\n    }\r\n  }\r\n\r\n  buildOrUpdateElements(resetNewElements) {\r\n    const meta = this._cachedMeta;\r\n    const dataset = this.getDataset();\r\n    let stackChanged = false;\r\n\r\n    this._dataCheck();\r\n\r\n    // make sure cached _stacked status is current\r\n    const oldStacked = meta._stacked;\r\n    meta._stacked = isStacked(meta.vScale, meta);\r\n\r\n    // detect change in stack option\r\n    if (meta.stack !== dataset.stack) {\r\n      stackChanged = true;\r\n      // remove values from old stack\r\n      clearStacks(meta);\r\n      meta.stack = dataset.stack;\r\n    }\r\n\r\n    // Re-sync meta data in case the user replaced the data array or if we missed\r\n    // any updates and so make sure that we handle number of datapoints changing.\r\n    this._resyncElements(resetNewElements);\r\n\r\n    // if stack changed, update stack values for the whole dataset\r\n    if (stackChanged || oldStacked !== meta._stacked) {\r\n      updateStacks(this, meta._parsed);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Merges user-supplied and default dataset-level options\r\n\t * @private\r\n\t */\r\n  configure() {\r\n    const config = this.chart.config;\r\n    const scopeKeys = config.datasetScopeKeys(this._type);\r\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\r\n    this.options = config.createResolver(scopes, this.getContext());\r\n    this._parsing = this.options.parsing;\r\n    this._cachedDataOpts = {};\r\n  }\r\n\r\n  /**\r\n\t * @param {number} start\r\n\t * @param {number} count\r\n\t */\r\n  parse(start, count) {\r\n    const {_cachedMeta: meta, _data: data} = this;\r\n    const {iScale, _stacked} = meta;\r\n    const iAxis = iScale.axis;\r\n\r\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\r\n    let prev = start > 0 && meta._parsed[start - 1];\r\n    let i, cur, parsed;\r\n\r\n    if (this._parsing === false) {\r\n      meta._parsed = data;\r\n      meta._sorted = true;\r\n      parsed = data;\r\n    } else {\r\n      if (isArray(data[start])) {\r\n        parsed = this.parseArrayData(meta, data, start, count);\r\n      } else if (isObject(data[start])) {\r\n        parsed = this.parseObjectData(meta, data, start, count);\r\n      } else {\r\n        parsed = this.parsePrimitiveData(meta, data, start, count);\r\n      }\r\n\r\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\r\n      for (i = 0; i < count; ++i) {\r\n        meta._parsed[i + start] = cur = parsed[i];\r\n        if (sorted) {\r\n          if (isNotInOrderComparedToPrev()) {\r\n            sorted = false;\r\n          }\r\n          prev = cur;\r\n        }\r\n      }\r\n      meta._sorted = sorted;\r\n    }\r\n\r\n    if (_stacked) {\r\n      updateStacks(this, parsed);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Parse array of primitive values\r\n\t * @param {object} meta - dataset meta\r\n\t * @param {array} data - data array. Example [1,3,4]\r\n\t * @param {number} start - start index\r\n\t * @param {number} count - number of items to parse\r\n\t * @returns {object} parsed item - item containing index and a parsed value\r\n\t * for each scale id.\r\n\t * Example: {xScale0: 0, yScale0: 1}\r\n\t * @protected\r\n\t */\r\n  parsePrimitiveData(meta, data, start, count) {\r\n    const {iScale, vScale} = meta;\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n    const labels = iScale.getLabels();\r\n    const singleScale = iScale === vScale;\r\n    const parsed = new Array(count);\r\n    let i, ilen, index;\r\n\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      index = i + start;\r\n      parsed[i] = {\r\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\r\n        [vAxis]: vScale.parse(data[index], index)\r\n      };\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of arrays\r\n\t * @param {object} meta - dataset meta\r\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\r\n\t * @param {number} start - start index\r\n\t * @param {number} count - number of items to parse\r\n\t * @returns {object} parsed item - item containing index and a parsed value\r\n\t * for each scale id.\r\n\t * Example: {x: 0, y: 1}\r\n\t * @protected\r\n\t */\r\n  parseArrayData(meta, data, start, count) {\r\n    const {xScale, yScale} = meta;\r\n    const parsed = new Array(count);\r\n    let i, ilen, index, item;\r\n\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      index = i + start;\r\n      item = data[index];\r\n      parsed[i] = {\r\n        x: xScale.parse(item[0], index),\r\n        y: yScale.parse(item[1], index)\r\n      };\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of objects\r\n\t * @param {object} meta - dataset meta\r\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\r\n\t * @param {number} start - start index\r\n\t * @param {number} count - number of items to parse\r\n\t * @returns {object} parsed item - item containing index and a parsed value\r\n\t * for each scale id. _custom is optional\r\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\r\n\t * @protected\r\n\t */\r\n  parseObjectData(meta, data, start, count) {\r\n    const {xScale, yScale} = meta;\r\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\r\n    const parsed = new Array(count);\r\n    let i, ilen, index, item;\r\n\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      index = i + start;\r\n      item = data[index];\r\n      parsed[i] = {\r\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\r\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\r\n      };\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getParsed(index) {\r\n    return this._cachedMeta._parsed[index];\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getDataElement(index) {\r\n    return this._cachedMeta.data[index];\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  applyStack(scale, parsed, mode) {\r\n    const chart = this.chart;\r\n    const meta = this._cachedMeta;\r\n    const value = parsed[scale.axis];\r\n    const stack = {\r\n      keys: getSortedDatasetIndices(chart, true),\r\n      values: parsed._stacks[scale.axis]\r\n    };\r\n    return applyStack(stack, value, meta.index, {mode});\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  updateRangeFromParsed(range, scale, parsed, stack) {\r\n    const parsedValue = parsed[scale.axis];\r\n    let value = parsedValue === null ? NaN : parsedValue;\r\n    const values = stack && parsed._stacks[scale.axis];\r\n    if (stack && values) {\r\n      stack.values = values;\r\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\r\n    }\r\n    range.min = Math.min(range.min, value);\r\n    range.max = Math.max(range.max, value);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMinMax(scale, canStack) {\r\n    const meta = this._cachedMeta;\r\n    const _parsed = meta._parsed;\r\n    const sorted = meta._sorted && scale === meta.iScale;\r\n    const ilen = _parsed.length;\r\n    const otherScale = this._getOtherScale(scale);\r\n    const stack = createStack(canStack, meta, this.chart);\r\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\r\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\r\n    let i, parsed;\r\n\r\n    function _skip() {\r\n      parsed = _parsed[i];\r\n      const otherValue = parsed[otherScale.axis];\r\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\r\n    }\r\n\r\n    for (i = 0; i < ilen; ++i) {\r\n      if (_skip()) {\r\n        continue;\r\n      }\r\n      this.updateRangeFromParsed(range, scale, parsed, stack);\r\n      if (sorted) {\r\n        // if the data is sorted, we don't need to check further from this end of array\r\n        break;\r\n      }\r\n    }\r\n    if (sorted) {\r\n      // in the sorted case, find first non-skipped value from other end of array\r\n      for (i = ilen - 1; i >= 0; --i) {\r\n        if (_skip()) {\r\n          continue;\r\n        }\r\n        this.updateRangeFromParsed(range, scale, parsed, stack);\r\n        break;\r\n      }\r\n    }\r\n    return range;\r\n  }\r\n\r\n  getAllParsedValues(scale) {\r\n    const parsed = this._cachedMeta._parsed;\r\n    const values = [];\r\n    let i, ilen, value;\r\n\r\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\r\n      value = parsed[i][scale.axis];\r\n      if (isFinite(value)) {\r\n        values.push(value);\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  /**\r\n\t * @return {number|boolean}\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const iScale = meta.iScale;\r\n    const vScale = meta.vScale;\r\n    const parsed = this.getParsed(index);\r\n    return {\r\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\r\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _update(mode) {\r\n    const meta = this._cachedMeta;\r\n    this.update(mode || 'default');\r\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\r\n  }\r\n\r\n  /**\r\n\t * @param {string} mode\r\n\t */\r\n  update(mode) {} // eslint-disable-line no-unused-vars\r\n\r\n  draw() {\r\n    const ctx = this._ctx;\r\n    const chart = this.chart;\r\n    const meta = this._cachedMeta;\r\n    const elements = meta.data || [];\r\n    const area = chart.chartArea;\r\n    const active = [];\r\n    const start = this._drawStart || 0;\r\n    const count = this._drawCount || (elements.length - start);\r\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\r\n    let i;\r\n\r\n    if (meta.dataset) {\r\n      meta.dataset.draw(ctx, area, start, count);\r\n    }\r\n\r\n    for (i = start; i < start + count; ++i) {\r\n      const element = elements[i];\r\n      if (element.hidden) {\r\n        continue;\r\n      }\r\n      if (element.active && drawActiveElementsOnTop) {\r\n        active.push(element);\r\n      } else {\r\n        element.draw(ctx, area);\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < active.length; ++i) {\r\n      active[i].draw(ctx, area);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Returns a set of predefined style properties that should be used to represent the dataset\r\n\t * or the data if the index is specified\r\n\t * @param {number} index - data index\r\n\t * @param {boolean} [active] - true if hover\r\n\t * @return {object} style object\r\n\t */\r\n  getStyle(index, active) {\r\n    const mode = active ? 'active' : 'default';\r\n    return index === undefined && this._cachedMeta.dataset\r\n      ? this.resolveDatasetElementOptions(mode)\r\n      : this.resolveDataElementOptions(index || 0, mode);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getContext(index, active, mode) {\r\n    const dataset = this.getDataset();\r\n    let context;\r\n    if (index >= 0 && index < this._cachedMeta.data.length) {\r\n      const element = this._cachedMeta.data[index];\r\n      context = element.$context ||\r\n        (element.$context = createDataContext(this.getContext(), index, element));\r\n      context.parsed = this.getParsed(index);\r\n      context.raw = dataset.data[index];\r\n      context.index = context.dataIndex = index;\r\n    } else {\r\n      context = this.$context ||\r\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\r\n      context.dataset = dataset;\r\n      context.index = context.datasetIndex = this.index;\r\n    }\r\n\r\n    context.active = !!active;\r\n    context.mode = mode;\r\n    return context;\r\n  }\r\n\r\n  /**\r\n\t * @param {string} [mode]\r\n\t * @protected\r\n\t */\r\n  resolveDatasetElementOptions(mode) {\r\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} index\r\n\t * @param {string} [mode]\r\n\t * @protected\r\n\t */\r\n  resolveDataElementOptions(index, mode) {\r\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resolveElementOptions(elementType, mode = 'default', index) {\r\n    const active = mode === 'active';\r\n    const cache = this._cachedDataOpts;\r\n    const cacheKey = elementType + '-' + mode;\r\n    const cached = cache[cacheKey];\r\n    const sharing = this.enableOptionSharing && defined(index);\r\n    if (cached) {\r\n      return cloneIfNotShared(cached, sharing);\r\n    }\r\n    const config = this.chart.config;\r\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\r\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\r\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\r\n    const names = Object.keys(defaults.elements[elementType]);\r\n    // context is provided as a function, and is called only if needed,\r\n    // so we don't create a context for each element if not needed.\r\n    const context = () => this.getContext(index, active);\r\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\r\n\r\n    if (values.$shared) {\r\n      // `$shared` indicates this set of options can be shared between multiple elements.\r\n      // Sharing is used to reduce number of properties to change during animation.\r\n      values.$shared = sharing;\r\n\r\n      // We cache options by `mode`, which can be 'active' for example. This enables us\r\n      // to have the 'active' element options and 'default' options to switch between\r\n      // when interacting.\r\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resolveAnimations(index, transition, active) {\r\n    const chart = this.chart;\r\n    const cache = this._cachedDataOpts;\r\n    const cacheKey = `animation-${transition}`;\r\n    const cached = cache[cacheKey];\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n    let options;\r\n    if (chart.options.animation !== false) {\r\n      const config = this.chart.config;\r\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\r\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\r\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\r\n    }\r\n    const animations = new Animations(chart, options && options.animations);\r\n    if (options && options._cacheable) {\r\n      cache[cacheKey] = Object.freeze(animations);\r\n    }\r\n    return animations;\r\n  }\r\n\r\n  /**\r\n\t * Utility for getting the options object shared between elements\r\n\t * @protected\r\n\t */\r\n  getSharedOptions(options) {\r\n    if (!options.$shared) {\r\n      return;\r\n    }\r\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\r\n  }\r\n\r\n  /**\r\n\t * Utility for determining if `options` should be included in the updated properties\r\n\t * @protected\r\n\t */\r\n  includeOptions(mode, sharedOptions) {\r\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\r\n  }\r\n\r\n  /**\r\n   * @todo v4, rename to getSharedOptions and remove excess functions\r\n   */\r\n  _getSharedOptions(start, mode) {\r\n    const firstOpts = this.resolveDataElementOptions(start, mode);\r\n    const previouslySharedOptions = this._sharedOptions;\r\n    const sharedOptions = this.getSharedOptions(firstOpts);\r\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\r\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\r\n    return {sharedOptions, includeOptions};\r\n  }\r\n\r\n  /**\r\n\t * Utility for updating an element with new properties, using animations when appropriate.\r\n\t * @protected\r\n\t */\r\n  updateElement(element, index, properties, mode) {\r\n    if (isDirectUpdateMode(mode)) {\r\n      Object.assign(element, properties);\r\n    } else {\r\n      this._resolveAnimations(index, mode).update(element, properties);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\r\n\t * @protected\r\n\t */\r\n  updateSharedOptions(sharedOptions, mode, newOptions) {\r\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\r\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _setStyle(element, index, mode, active) {\r\n    element.active = active;\r\n    const options = this.getStyle(index, active);\r\n    this._resolveAnimations(index, mode, active).update(element, {\r\n      // When going from active to inactive, we need to update to the shared options.\r\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\r\n      options: (!active && this.getSharedOptions(options)) || options\r\n    });\r\n  }\r\n\r\n  removeHoverStyle(element, datasetIndex, index) {\r\n    this._setStyle(element, index, 'active', false);\r\n  }\r\n\r\n  setHoverStyle(element, datasetIndex, index) {\r\n    this._setStyle(element, index, 'active', true);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _removeDatasetHoverStyle() {\r\n    const element = this._cachedMeta.dataset;\r\n\r\n    if (element) {\r\n      this._setStyle(element, undefined, 'active', false);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _setDatasetHoverStyle() {\r\n    const element = this._cachedMeta.dataset;\r\n\r\n    if (element) {\r\n      this._setStyle(element, undefined, 'active', true);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resyncElements(resetNewElements) {\r\n    const data = this._data;\r\n    const elements = this._cachedMeta.data;\r\n\r\n    // Apply changes detected through array listeners\r\n    for (const [method, arg1, arg2] of this._syncList) {\r\n      this[method](arg1, arg2);\r\n    }\r\n    this._syncList = [];\r\n\r\n    const numMeta = elements.length;\r\n    const numData = data.length;\r\n    const count = Math.min(numData, numMeta);\r\n\r\n    if (count) {\r\n      // TODO: It is not optimal to always parse the old data\r\n      // This is done because we are not detecting direct assignments:\r\n      // chart.data.datasets[0].data[5] = 10;\r\n      // chart.data.datasets[0].data[5].y = 10;\r\n      this.parse(0, count);\r\n    }\r\n\r\n    if (numData > numMeta) {\r\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\r\n    } else if (numData < numMeta) {\r\n      this._removeElements(numData, numMeta - numData);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _insertElements(start, count, resetNewElements = true) {\r\n    const meta = this._cachedMeta;\r\n    const data = meta.data;\r\n    const end = start + count;\r\n    let i;\r\n\r\n    const move = (arr) => {\r\n      arr.length += count;\r\n      for (i = arr.length - 1; i >= end; i--) {\r\n        arr[i] = arr[i - count];\r\n      }\r\n    };\r\n    move(data);\r\n\r\n    for (i = start; i < end; ++i) {\r\n      data[i] = new this.dataElementType();\r\n    }\r\n\r\n    if (this._parsing) {\r\n      move(meta._parsed);\r\n    }\r\n    this.parse(start, count);\r\n\r\n    if (resetNewElements) {\r\n      this.updateElements(data, start, count, 'reset');\r\n    }\r\n  }\r\n\r\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _removeElements(start, count) {\r\n    const meta = this._cachedMeta;\r\n    if (this._parsing) {\r\n      const removed = meta._parsed.splice(start, count);\r\n      if (meta._stacked) {\r\n        clearStacks(meta, removed);\r\n      }\r\n    }\r\n    meta.data.splice(start, count);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n   */\r\n  _sync(args) {\r\n    if (this._parsing) {\r\n      this._syncList.push(args);\r\n    } else {\r\n      const [method, arg1, arg2] = args;\r\n      this[method](arg1, arg2);\r\n    }\r\n    this.chart._dataChanges.push([this.index, ...args]);\r\n  }\r\n\r\n  _onDataPush() {\r\n    const count = arguments.length;\r\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\r\n  }\r\n\r\n  _onDataPop() {\r\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\r\n  }\r\n\r\n  _onDataShift() {\r\n    this._sync(['_removeElements', 0, 1]);\r\n  }\r\n\r\n  _onDataSplice(start, count) {\r\n    if (count) {\r\n      this._sync(['_removeElements', start, count]);\r\n    }\r\n    const newCount = arguments.length - 2;\r\n    if (newCount) {\r\n      this._sync(['_insertElements', start, newCount]);\r\n    }\r\n  }\r\n\r\n  _onDataUnshift() {\r\n    this._sync(['_insertElements', 0, arguments.length]);\r\n  }\r\n}\r\n","import type {AnyObject} from '../../types/basic';\r\nimport type {Point} from '../../types/geometric';\r\nimport type {Animation} from '../../types/animation';\r\nimport {isNumber} from '../helpers/helpers.math';\r\n\r\nexport default class Element<T = AnyObject, O = AnyObject> {\r\n\r\n  static defaults = {};\r\n  static defaultRoutes = undefined;\r\n\r\n  x: number;\r\n  y: number;\r\n  active = false;\r\n  options: O;\r\n  $animations: Record<keyof T, Animation>;\r\n\r\n  tooltipPosition(useFinalPosition: boolean): Point {\r\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\r\n    return {x, y} as Point;\r\n  }\r\n\r\n  hasValue() {\r\n    return isNumber(this.x) && isNumber(this.y);\r\n  }\r\n\r\n  /**\r\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\r\n   * @param props - properties to get\r\n   * @param [final] - get the final value (animation target)\r\n   */\r\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\r\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\r\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\r\n    const anims = this.$animations;\r\n    if (!final || !anims) {\r\n      // let's not create an object, if not needed\r\n      return this as Record<string, unknown>;\r\n    }\r\n    const ret: Record<string, unknown> = {};\r\n    props.forEach((prop) => {\r\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\r\n    });\r\n    return ret;\r\n  }\r\n}\r\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core';\r\nimport {_factorize} from '../helpers/helpers.math';\r\n\r\n\r\n/**\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\r\n */\r\n\r\n/**\r\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\r\n * @param {import('./core.scale').default} scale\r\n * @param {Tick[]} ticks\r\n * @return {Tick[]}\r\n * @private\r\n */\r\nexport function autoSkip(scale, ticks) {\r\n  const tickOpts = scale.options.ticks;\r\n  const determinedMaxTicks = determineMaxTicks(scale);\r\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\r\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\r\n  const numMajorIndices = majorIndices.length;\r\n  const first = majorIndices[0];\r\n  const last = majorIndices[numMajorIndices - 1];\r\n  const newTicks = [];\r\n\r\n  // If there are too many major ticks to display them all\r\n  if (numMajorIndices > ticksLimit) {\r\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\r\n    return newTicks;\r\n  }\r\n\r\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\r\n\r\n  if (numMajorIndices > 0) {\r\n    let i, ilen;\r\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\r\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\r\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\r\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\r\n    }\r\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\r\n    return newTicks;\r\n  }\r\n  skip(ticks, newTicks, spacing);\r\n  return newTicks;\r\n}\r\n\r\nfunction determineMaxTicks(scale) {\r\n  const offset = scale.options.offset;\r\n  const tickLength = scale._tickSize();\r\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\r\n  const maxChart = scale._maxLength / tickLength;\r\n  return Math.floor(Math.min(maxScale, maxChart));\r\n}\r\n\r\n/**\r\n * @param {number[]} majorIndices\r\n * @param {Tick[]} ticks\r\n * @param {number} ticksLimit\r\n */\r\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\r\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\r\n  const spacing = ticks.length / ticksLimit;\r\n\r\n  // If the major ticks are evenly spaced apart, place the minor ticks\r\n  // so that they divide the major ticks into even chunks\r\n  if (!evenMajorSpacing) {\r\n    return Math.max(spacing, 1);\r\n  }\r\n\r\n  const factors = _factorize(evenMajorSpacing);\r\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\r\n    const factor = factors[i];\r\n    if (factor > spacing) {\r\n      return factor;\r\n    }\r\n  }\r\n  return Math.max(spacing, 1);\r\n}\r\n\r\n/**\r\n * @param {Tick[]} ticks\r\n */\r\nfunction getMajorIndices(ticks) {\r\n  const result = [];\r\n  let i, ilen;\r\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\r\n    if (ticks[i].major) {\r\n      result.push(i);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @param {Tick[]} ticks\r\n * @param {Tick[]} newTicks\r\n * @param {number[]} majorIndices\r\n * @param {number} spacing\r\n */\r\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\r\n  let count = 0;\r\n  let next = majorIndices[0];\r\n  let i;\r\n\r\n  spacing = Math.ceil(spacing);\r\n  for (i = 0; i < ticks.length; i++) {\r\n    if (i === next) {\r\n      newTicks.push(ticks[i]);\r\n      count++;\r\n      next = majorIndices[count * spacing];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Tick[]} ticks\r\n * @param {Tick[]} newTicks\r\n * @param {number} spacing\r\n * @param {number} [majorStart]\r\n * @param {number} [majorEnd]\r\n */\r\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\r\n  const start = valueOrDefault(majorStart, 0);\r\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\r\n  let count = 0;\r\n  let length, i, next;\r\n\r\n  spacing = Math.ceil(spacing);\r\n  if (majorEnd) {\r\n    length = majorEnd - majorStart;\r\n    spacing = length / Math.floor(length / spacing);\r\n  }\r\n\r\n  next = start;\r\n\r\n  while (next < 0) {\r\n    count++;\r\n    next = Math.round(start + count * spacing);\r\n  }\r\n\r\n  for (i = Math.max(start, 0); i < end; i++) {\r\n    if (i === next) {\r\n      newTicks.push(ticks[i]);\r\n      count++;\r\n      next = Math.round(start + count * spacing);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {number[]} arr\r\n */\r\nfunction getEvenSpacing(arr) {\r\n  const len = arr.length;\r\n  let i, diff;\r\n\r\n  if (len < 2) {\r\n    return false;\r\n  }\r\n\r\n  for (diff = arr[0], i = 1; i < len; ++i) {\r\n    if (arr[i] - arr[i - 1] !== diff) {\r\n      return false;\r\n    }\r\n  }\r\n  return diff;\r\n}\r\n","import Element from './core.element';\r\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas';\r\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core';\r\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math';\r\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras';\r\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options';\r\nimport {autoSkip} from './core.scale.autoskip';\r\n\r\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\r\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\r\n\r\n/**\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\r\n */\r\n\r\n/**\r\n * Returns a new array containing numItems from arr\r\n * @param {any[]} arr\r\n * @param {number} numItems\r\n */\r\nfunction sample(arr, numItems) {\r\n  const result = [];\r\n  const increment = arr.length / numItems;\r\n  const len = arr.length;\r\n  let i = 0;\r\n\r\n  for (; i < len; i += increment) {\r\n    result.push(arr[Math.floor(i)]);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @param {Scale} scale\r\n * @param {number} index\r\n * @param {boolean} offsetGridLines\r\n */\r\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\r\n  const length = scale.ticks.length;\r\n  const validIndex = Math.min(index, length - 1);\r\n  const start = scale._startPixel;\r\n  const end = scale._endPixel;\r\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\r\n  let lineValue = scale.getPixelForTick(validIndex);\r\n  let offset;\r\n\r\n  if (offsetGridLines) {\r\n    if (length === 1) {\r\n      offset = Math.max(lineValue - start, end - lineValue);\r\n    } else if (index === 0) {\r\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\r\n    } else {\r\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\r\n    }\r\n    lineValue += validIndex < index ? offset : -offset;\r\n\r\n    // Return undefined if the pixel is out of the range\r\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\r\n      return;\r\n    }\r\n  }\r\n  return lineValue;\r\n}\r\n\r\n/**\r\n * @param {object} caches\r\n * @param {number} length\r\n */\r\nfunction garbageCollect(caches, length) {\r\n  each(caches, (cache) => {\r\n    const gc = cache.gc;\r\n    const gcLen = gc.length / 2;\r\n    let i;\r\n    if (gcLen > length) {\r\n      for (i = 0; i < gcLen; ++i) {\r\n        delete cache.data[gc[i]];\r\n      }\r\n      gc.splice(0, gcLen);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {object} options\r\n */\r\nfunction getTickMarkLength(options) {\r\n  return options.drawTicks ? options.tickLength : 0;\r\n}\r\n\r\n/**\r\n * @param {object} options\r\n */\r\nfunction getTitleHeight(options, fallback) {\r\n  if (!options.display) {\r\n    return 0;\r\n  }\r\n\r\n  const font = toFont(options.font, fallback);\r\n  const padding = toPadding(options.padding);\r\n  const lines = isArray(options.text) ? options.text.length : 1;\r\n\r\n  return (lines * font.lineHeight) + padding.height;\r\n}\r\n\r\nfunction createScaleContext(parent, scale) {\r\n  return createContext(parent, {\r\n    scale,\r\n    type: 'scale'\r\n  });\r\n}\r\n\r\nfunction createTickContext(parent, index, tick) {\r\n  return createContext(parent, {\r\n    tick,\r\n    index,\r\n    type: 'tick'\r\n  });\r\n}\r\n\r\nfunction titleAlign(align, position, reverse) {\r\n  let ret = _toLeftRightCenter(align);\r\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\r\n    ret = reverseAlign(ret);\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction titleArgs(scale, offset, position, align) {\r\n  const {top, left, bottom, right, chart} = scale;\r\n  const {chartArea, scales} = chart;\r\n  let rotation = 0;\r\n  let maxWidth, titleX, titleY;\r\n  const height = bottom - top;\r\n  const width = right - left;\r\n\r\n  if (scale.isHorizontal()) {\r\n    titleX = _alignStartEnd(align, left, right);\r\n\r\n    if (isObject(position)) {\r\n      const positionAxisID = Object.keys(position)[0];\r\n      const value = position[positionAxisID];\r\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\r\n    } else if (position === 'center') {\r\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\r\n    } else {\r\n      titleY = offsetFromEdge(scale, position, offset);\r\n    }\r\n    maxWidth = right - left;\r\n  } else {\r\n    if (isObject(position)) {\r\n      const positionAxisID = Object.keys(position)[0];\r\n      const value = position[positionAxisID];\r\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\r\n    } else if (position === 'center') {\r\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\r\n    } else {\r\n      titleX = offsetFromEdge(scale, position, offset);\r\n    }\r\n    titleY = _alignStartEnd(align, bottom, top);\r\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\r\n  }\r\n  return {titleX, titleY, maxWidth, rotation};\r\n}\r\n\r\nexport default class Scale extends Element {\r\n\r\n  // eslint-disable-next-line max-statements\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    /** @type {string} */\r\n    this.id = cfg.id;\r\n    /** @type {string} */\r\n    this.type = cfg.type;\r\n    /** @type {any} */\r\n    this.options = undefined;\r\n    /** @type {CanvasRenderingContext2D} */\r\n    this.ctx = cfg.ctx;\r\n    /** @type {Chart} */\r\n    this.chart = cfg.chart;\r\n\r\n    // implements box\r\n    /** @type {number} */\r\n    this.top = undefined;\r\n    /** @type {number} */\r\n    this.bottom = undefined;\r\n    /** @type {number} */\r\n    this.left = undefined;\r\n    /** @type {number} */\r\n    this.right = undefined;\r\n    /** @type {number} */\r\n    this.width = undefined;\r\n    /** @type {number} */\r\n    this.height = undefined;\r\n    this._margins = {\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    };\r\n    /** @type {number} */\r\n    this.maxWidth = undefined;\r\n    /** @type {number} */\r\n    this.maxHeight = undefined;\r\n    /** @type {number} */\r\n    this.paddingTop = undefined;\r\n    /** @type {number} */\r\n    this.paddingBottom = undefined;\r\n    /** @type {number} */\r\n    this.paddingLeft = undefined;\r\n    /** @type {number} */\r\n    this.paddingRight = undefined;\r\n\r\n    // scale-specific properties\r\n    /** @type {string=} */\r\n    this.axis = undefined;\r\n    /** @type {number=} */\r\n    this.labelRotation = undefined;\r\n    this.min = undefined;\r\n    this.max = undefined;\r\n    this._range = undefined;\r\n    /** @type {Tick[]} */\r\n    this.ticks = [];\r\n    /** @type {object[]|null} */\r\n    this._gridLineItems = null;\r\n    /** @type {object[]|null} */\r\n    this._labelItems = null;\r\n    /** @type {object|null} */\r\n    this._labelSizes = null;\r\n    this._length = 0;\r\n    this._maxLength = 0;\r\n    this._longestTextCache = {};\r\n    /** @type {number} */\r\n    this._startPixel = undefined;\r\n    /** @type {number} */\r\n    this._endPixel = undefined;\r\n    this._reversePixels = false;\r\n    this._userMax = undefined;\r\n    this._userMin = undefined;\r\n    this._suggestedMax = undefined;\r\n    this._suggestedMin = undefined;\r\n    this._ticksLength = 0;\r\n    this._borderValue = 0;\r\n    this._cache = {};\r\n    this._dataLimitsCached = false;\r\n    this.$context = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @param {any} options\r\n\t * @since 3.0\r\n\t */\r\n  init(options) {\r\n    this.options = options.setContext(this.getContext());\r\n\r\n    this.axis = options.axis;\r\n\r\n    // parse min/max value, so we can properly determine min/max for other scales\r\n    this._userMin = this.parse(options.min);\r\n    this._userMax = this.parse(options.max);\r\n    this._suggestedMin = this.parse(options.suggestedMin);\r\n    this._suggestedMax = this.parse(options.suggestedMax);\r\n  }\r\n\r\n  /**\r\n\t * Parse a supported input value to internal representation.\r\n\t * @param {*} raw\r\n\t * @param {number} [index]\r\n\t * @since 3.0\r\n\t */\r\n  parse(raw, index) { // eslint-disable-line no-unused-vars\r\n    return raw;\r\n  }\r\n\r\n  /**\r\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\r\n\t * @protected\r\n\t * @since 3.0\r\n\t */\r\n  getUserBounds() {\r\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\r\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\r\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\r\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\r\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\r\n    return {\r\n      min: finiteOrDefault(_userMin, _suggestedMin),\r\n      max: finiteOrDefault(_userMax, _suggestedMax),\r\n      minDefined: isFinite(_userMin),\r\n      maxDefined: isFinite(_userMax)\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {boolean} canStack\r\n\t * @return {{min: number, max: number}}\r\n\t * @protected\r\n\t * @since 3.0\r\n\t */\r\n  getMinMax(canStack) {\r\n    // eslint-disable-next-line prefer-const\r\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\r\n    let range;\r\n\r\n    if (minDefined && maxDefined) {\r\n      return {min, max};\r\n    }\r\n\r\n    const metas = this.getMatchingVisibleMetas();\r\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\r\n      range = metas[i].controller.getMinMax(this, canStack);\r\n      if (!minDefined) {\r\n        min = Math.min(min, range.min);\r\n      }\r\n      if (!maxDefined) {\r\n        max = Math.max(max, range.max);\r\n      }\r\n    }\r\n\r\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\r\n    min = maxDefined && min > max ? max : min;\r\n    max = minDefined && min > max ? min : max;\r\n\r\n    return {\r\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\r\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Get the padding needed for the scale\r\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\r\n\t * @private\r\n\t */\r\n  getPadding() {\r\n    return {\r\n      left: this.paddingLeft || 0,\r\n      top: this.paddingTop || 0,\r\n      right: this.paddingRight || 0,\r\n      bottom: this.paddingBottom || 0\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Returns the scale tick objects\r\n\t * @return {Tick[]}\r\n\t * @since 2.7\r\n\t */\r\n  getTicks() {\r\n    return this.ticks;\r\n  }\r\n\r\n  /**\r\n\t * @return {string[]}\r\n\t */\r\n  getLabels() {\r\n    const data = this.chart.data;\r\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\r\n  }\r\n\r\n  // When a new layout is created, reset the data limits cache\r\n  beforeLayout() {\r\n    this._cache = {};\r\n    this._dataLimitsCached = false;\r\n  }\r\n\r\n  // These methods are ordered by lifecycle. Utilities then follow.\r\n  // Any function defined here is inherited by all scale types.\r\n  // Any function can be extended by the scale type\r\n\r\n  beforeUpdate() {\r\n    call(this.options.beforeUpdate, [this]);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} maxWidth - the max width in pixels\r\n\t * @param {number} maxHeight - the max height in pixels\r\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\r\n\t *   This space comes from two sources:\r\n\t *     - padding - space that's required to show the labels at the edges of the scale\r\n\t *     - thickness of scales or legends in another orientation\r\n\t */\r\n  update(maxWidth, maxHeight, margins) {\r\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\r\n    const sampleSize = tickOpts.sampleSize;\r\n\r\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\r\n    this.beforeUpdate();\r\n\r\n    // Absorb the master measurements\r\n    this.maxWidth = maxWidth;\r\n    this.maxHeight = maxHeight;\r\n    this._margins = margins = Object.assign({\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    }, margins);\r\n\r\n    this.ticks = null;\r\n    this._labelSizes = null;\r\n    this._gridLineItems = null;\r\n    this._labelItems = null;\r\n\r\n    // Dimensions\r\n    this.beforeSetDimensions();\r\n    this.setDimensions();\r\n    this.afterSetDimensions();\r\n\r\n    this._maxLength = this.isHorizontal()\r\n      ? this.width + margins.left + margins.right\r\n      : this.height + margins.top + margins.bottom;\r\n\r\n    // Data min/max\r\n    if (!this._dataLimitsCached) {\r\n      this.beforeDataLimits();\r\n      this.determineDataLimits();\r\n      this.afterDataLimits();\r\n      this._range = _addGrace(this, grace, beginAtZero);\r\n      this._dataLimitsCached = true;\r\n    }\r\n\r\n    this.beforeBuildTicks();\r\n\r\n    this.ticks = this.buildTicks() || [];\r\n\r\n    // Allow modification of ticks in callback.\r\n    this.afterBuildTicks();\r\n\r\n    // Compute tick rotation and fit using a sampled subset of labels\r\n    // We generally don't need to compute the size of every single label for determining scale size\r\n    const samplingEnabled = sampleSize < this.ticks.length;\r\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\r\n\r\n    // configure is called twice, once here, once from core.controller.updateLayout.\r\n    // Here we haven't been positioned yet, but dimensions are correct.\r\n    // Variables set in configure are needed for calculateLabelRotation, and\r\n    // it's ok that coordinates are not correct there, only dimensions matter.\r\n    this.configure();\r\n\r\n    // Tick Rotation\r\n    this.beforeCalculateLabelRotation();\r\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\r\n    this.afterCalculateLabelRotation();\r\n\r\n    // Auto-skip\r\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\r\n      this.ticks = autoSkip(this, this.ticks);\r\n      this._labelSizes = null;\r\n      this.afterAutoSkip();\r\n    }\r\n\r\n    if (samplingEnabled) {\r\n      // Generate labels using all non-skipped ticks\r\n      this._convertTicksToLabels(this.ticks);\r\n    }\r\n\r\n    this.beforeFit();\r\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\r\n    this.afterFit();\r\n\r\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\r\n\r\n    this.afterUpdate();\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    let reversePixels = this.options.reverse;\r\n    let startPixel, endPixel;\r\n\r\n    if (this.isHorizontal()) {\r\n      startPixel = this.left;\r\n      endPixel = this.right;\r\n    } else {\r\n      startPixel = this.top;\r\n      endPixel = this.bottom;\r\n      // by default vertical scales are from bottom to top, so pixels are reversed\r\n      reversePixels = !reversePixels;\r\n    }\r\n    this._startPixel = startPixel;\r\n    this._endPixel = endPixel;\r\n    this._reversePixels = reversePixels;\r\n    this._length = endPixel - startPixel;\r\n    this._alignToPixels = this.options.alignToPixels;\r\n  }\r\n\r\n  afterUpdate() {\r\n    call(this.options.afterUpdate, [this]);\r\n  }\r\n\r\n  //\r\n\r\n  beforeSetDimensions() {\r\n    call(this.options.beforeSetDimensions, [this]);\r\n  }\r\n  setDimensions() {\r\n    // Set the unconstrained dimension before label rotation\r\n    if (this.isHorizontal()) {\r\n      // Reset position before calculating rotation\r\n      this.width = this.maxWidth;\r\n      this.left = 0;\r\n      this.right = this.width;\r\n    } else {\r\n      this.height = this.maxHeight;\r\n\r\n      // Reset position before calculating rotation\r\n      this.top = 0;\r\n      this.bottom = this.height;\r\n    }\r\n\r\n    // Reset padding\r\n    this.paddingLeft = 0;\r\n    this.paddingTop = 0;\r\n    this.paddingRight = 0;\r\n    this.paddingBottom = 0;\r\n  }\r\n  afterSetDimensions() {\r\n    call(this.options.afterSetDimensions, [this]);\r\n  }\r\n\r\n  _callHooks(name) {\r\n    this.chart.notifyPlugins(name, this.getContext());\r\n    call(this.options[name], [this]);\r\n  }\r\n\r\n  // Data limits\r\n  beforeDataLimits() {\r\n    this._callHooks('beforeDataLimits');\r\n  }\r\n  determineDataLimits() {}\r\n  afterDataLimits() {\r\n    this._callHooks('afterDataLimits');\r\n  }\r\n\r\n  //\r\n  beforeBuildTicks() {\r\n    this._callHooks('beforeBuildTicks');\r\n  }\r\n  /**\r\n\t * @return {object[]} the ticks\r\n\t */\r\n  buildTicks() {\r\n    return [];\r\n  }\r\n  afterBuildTicks() {\r\n    this._callHooks('afterBuildTicks');\r\n  }\r\n\r\n  beforeTickToLabelConversion() {\r\n    call(this.options.beforeTickToLabelConversion, [this]);\r\n  }\r\n  /**\r\n\t * Convert ticks to label strings\r\n\t * @param {Tick[]} ticks\r\n\t */\r\n  generateTickLabels(ticks) {\r\n    const tickOpts = this.options.ticks;\r\n    let i, ilen, tick;\r\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\r\n      tick = ticks[i];\r\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\r\n    }\r\n  }\r\n  afterTickToLabelConversion() {\r\n    call(this.options.afterTickToLabelConversion, [this]);\r\n  }\r\n\r\n  //\r\n\r\n  beforeCalculateLabelRotation() {\r\n    call(this.options.beforeCalculateLabelRotation, [this]);\r\n  }\r\n  calculateLabelRotation() {\r\n    const options = this.options;\r\n    const tickOpts = options.ticks;\r\n    const numTicks = this.ticks.length;\r\n    const minRotation = tickOpts.minRotation || 0;\r\n    const maxRotation = tickOpts.maxRotation;\r\n    let labelRotation = minRotation;\r\n    let tickWidth, maxHeight, maxLabelDiagonal;\r\n\r\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\r\n      this.labelRotation = minRotation;\r\n      return;\r\n    }\r\n\r\n    const labelSizes = this._getLabelSizes();\r\n    const maxLabelWidth = labelSizes.widest.width;\r\n    const maxLabelHeight = labelSizes.highest.height;\r\n\r\n    // Estimate the width of each grid based on the canvas width, the maximum\r\n    // label width and the number of tick intervals\r\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\r\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\r\n\r\n    // Allow 3 pixels x2 padding either side for label readability\r\n    if (maxLabelWidth + 6 > tickWidth) {\r\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\r\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\r\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\r\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\r\n      labelRotation = toDegrees(Math.min(\r\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\r\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\r\n      ));\r\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\r\n    }\r\n\r\n    this.labelRotation = labelRotation;\r\n  }\r\n  afterCalculateLabelRotation() {\r\n    call(this.options.afterCalculateLabelRotation, [this]);\r\n  }\r\n  afterAutoSkip() {}\r\n\r\n  //\r\n\r\n  beforeFit() {\r\n    call(this.options.beforeFit, [this]);\r\n  }\r\n  fit() {\r\n    // Reset\r\n    const minSize = {\r\n      width: 0,\r\n      height: 0\r\n    };\r\n\r\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\r\n    const display = this._isVisible();\r\n    const isHorizontal = this.isHorizontal();\r\n\r\n    if (display) {\r\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\r\n      if (isHorizontal) {\r\n        minSize.width = this.maxWidth;\r\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\r\n      } else {\r\n        minSize.height = this.maxHeight; // fill all the height\r\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\r\n      }\r\n\r\n      // Don't bother fitting the ticks if we are not showing the labels\r\n      if (tickOpts.display && this.ticks.length) {\r\n        const {first, last, widest, highest} = this._getLabelSizes();\r\n        const tickPadding = tickOpts.padding * 2;\r\n        const angleRadians = toRadians(this.labelRotation);\r\n        const cos = Math.cos(angleRadians);\r\n        const sin = Math.sin(angleRadians);\r\n\r\n        if (isHorizontal) {\r\n        // A horizontal axis is more constrained by the height.\r\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\r\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\r\n        } else {\r\n        // A vertical axis is more constrained by the width. Labels are the\r\n        // dominant factor here, so get that length first and account for padding\r\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\r\n\r\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\r\n        }\r\n        this._calculatePadding(first, last, sin, cos);\r\n      }\r\n    }\r\n\r\n    this._handleMargins();\r\n\r\n    if (isHorizontal) {\r\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\r\n      this.height = minSize.height;\r\n    } else {\r\n      this.width = minSize.width;\r\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\r\n    }\r\n  }\r\n\r\n  _calculatePadding(first, last, sin, cos) {\r\n    const {ticks: {align, padding}, position} = this.options;\r\n    const isRotated = this.labelRotation !== 0;\r\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\r\n\r\n    if (this.isHorizontal()) {\r\n      const offsetLeft = this.getPixelForTick(0) - this.left;\r\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\r\n      let paddingLeft = 0;\r\n      let paddingRight = 0;\r\n\r\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\r\n      // which means that the right padding is dominated by the font height\r\n      if (isRotated) {\r\n        if (labelsBelowTicks) {\r\n          paddingLeft = cos * first.width;\r\n          paddingRight = sin * last.height;\r\n        } else {\r\n          paddingLeft = sin * first.height;\r\n          paddingRight = cos * last.width;\r\n        }\r\n      } else if (align === 'start') {\r\n        paddingRight = last.width;\r\n      } else if (align === 'end') {\r\n        paddingLeft = first.width;\r\n      } else if (align !== 'inner') {\r\n        paddingLeft = first.width / 2;\r\n        paddingRight = last.width / 2;\r\n      }\r\n\r\n      // Adjust padding taking into account changes in offsets\r\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\r\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\r\n    } else {\r\n      let paddingTop = last.height / 2;\r\n      let paddingBottom = first.height / 2;\r\n\r\n      if (align === 'start') {\r\n        paddingTop = 0;\r\n        paddingBottom = first.height;\r\n      } else if (align === 'end') {\r\n        paddingTop = last.height;\r\n        paddingBottom = 0;\r\n      }\r\n\r\n      this.paddingTop = paddingTop + padding;\r\n      this.paddingBottom = paddingBottom + padding;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Handle margins and padding interactions\r\n\t * @private\r\n\t */\r\n  _handleMargins() {\r\n    if (this._margins) {\r\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\r\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\r\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\r\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\r\n    }\r\n  }\r\n\r\n  afterFit() {\r\n    call(this.options.afterFit, [this]);\r\n  }\r\n\r\n  // Shared Methods\r\n  /**\r\n\t * @return {boolean}\r\n\t */\r\n  isHorizontal() {\r\n    const {axis, position} = this.options;\r\n    return position === 'top' || position === 'bottom' || axis === 'x';\r\n  }\r\n  /**\r\n\t * @return {boolean}\r\n\t */\r\n  isFullSize() {\r\n    return this.options.fullSize;\r\n  }\r\n\r\n  /**\r\n\t * @param {Tick[]} ticks\r\n\t * @private\r\n\t */\r\n  _convertTicksToLabels(ticks) {\r\n    this.beforeTickToLabelConversion();\r\n\r\n    this.generateTickLabels(ticks);\r\n\r\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\r\n    let i, ilen;\r\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\r\n      if (isNullOrUndef(ticks[i].label)) {\r\n        ticks.splice(i, 1);\r\n        ilen--;\r\n        i--;\r\n      }\r\n    }\r\n\r\n    this.afterTickToLabelConversion();\r\n  }\r\n\r\n  /**\r\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\r\n\t * @private\r\n\t */\r\n  _getLabelSizes() {\r\n    let labelSizes = this._labelSizes;\r\n\r\n    if (!labelSizes) {\r\n      const sampleSize = this.options.ticks.sampleSize;\r\n      let ticks = this.ticks;\r\n      if (sampleSize < ticks.length) {\r\n        ticks = sample(ticks, sampleSize);\r\n      }\r\n\r\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\r\n    }\r\n\r\n    return labelSizes;\r\n  }\r\n\r\n  /**\r\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\r\n\t * labels where offset indicates the anchor point offset from the top in pixels.\r\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\r\n\t * @private\r\n\t */\r\n  _computeLabelSizes(ticks, length) {\r\n    const {ctx, _longestTextCache: caches} = this;\r\n    const widths = [];\r\n    const heights = [];\r\n    let widestLabelSize = 0;\r\n    let highestLabelSize = 0;\r\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\r\n\r\n    for (i = 0; i < length; ++i) {\r\n      label = ticks[i].label;\r\n      tickFont = this._resolveTickFontOptions(i);\r\n      ctx.font = fontString = tickFont.string;\r\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\r\n      lineHeight = tickFont.lineHeight;\r\n      width = height = 0;\r\n      // Undefined labels and arrays should not be measured\r\n      if (!isNullOrUndef(label) && !isArray(label)) {\r\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\r\n        height = lineHeight;\r\n      } else if (isArray(label)) {\r\n        // if it is an array let's measure each element\r\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\r\n          nestedLabel = label[j];\r\n          // Undefined labels and arrays should not be measured\r\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\r\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\r\n            height += lineHeight;\r\n          }\r\n        }\r\n      }\r\n      widths.push(width);\r\n      heights.push(height);\r\n      widestLabelSize = Math.max(width, widestLabelSize);\r\n      highestLabelSize = Math.max(height, highestLabelSize);\r\n    }\r\n    garbageCollect(caches, length);\r\n\r\n    const widest = widths.indexOf(widestLabelSize);\r\n    const highest = heights.indexOf(highestLabelSize);\r\n\r\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\r\n\r\n    return {\r\n      first: valueAt(0),\r\n      last: valueAt(length - 1),\r\n      widest: valueAt(widest),\r\n      highest: valueAt(highest),\r\n      widths,\r\n      heights,\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Used to get the label to display in the tooltip for the given value\r\n\t * @param {*} value\r\n\t * @return {string}\r\n\t */\r\n  getLabelForValue(value) {\r\n    return value;\r\n  }\r\n\r\n  /**\r\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {*} value\r\n\t * @param {number} [index]\r\n\t * @return {number}\r\n\t */\r\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\r\n    return NaN;\r\n  }\r\n\r\n  /**\r\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {number} pixel\r\n\t * @return {*}\r\n\t */\r\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * Returns the location of the tick at the given index\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {number} index\r\n\t * @return {number}\r\n\t */\r\n  getPixelForTick(index) {\r\n    const ticks = this.ticks;\r\n    if (index < 0 || index > ticks.length - 1) {\r\n      return null;\r\n    }\r\n    return this.getPixelForValue(ticks[index].value);\r\n  }\r\n\r\n  /**\r\n\t * Utility for getting the pixel location of a percentage of scale\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {number} decimal\r\n\t * @return {number}\r\n\t */\r\n  getPixelForDecimal(decimal) {\r\n    if (this._reversePixels) {\r\n      decimal = 1 - decimal;\r\n    }\r\n\r\n    const pixel = this._startPixel + decimal * this._length;\r\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} pixel\r\n\t * @return {number}\r\n\t */\r\n  getDecimalForPixel(pixel) {\r\n    const decimal = (pixel - this._startPixel) / this._length;\r\n    return this._reversePixels ? 1 - decimal : decimal;\r\n  }\r\n\r\n  /**\r\n\t * Returns the pixel for the minimum chart value\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @return {number}\r\n\t */\r\n  getBasePixel() {\r\n    return this.getPixelForValue(this.getBaseValue());\r\n  }\r\n\r\n  /**\r\n\t * @return {number}\r\n\t */\r\n  getBaseValue() {\r\n    const {min, max} = this;\r\n\r\n    return min < 0 && max < 0 ? max :\r\n      min > 0 && max > 0 ? min :\r\n      0;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getContext(index) {\r\n    const ticks = this.ticks || [];\r\n\r\n    if (index >= 0 && index < ticks.length) {\r\n      const tick = ticks[index];\r\n      return tick.$context ||\r\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\r\n    }\r\n    return this.$context ||\r\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\r\n  }\r\n\r\n  /**\r\n\t * @return {number}\r\n\t * @private\r\n\t */\r\n  _tickSize() {\r\n    const optionTicks = this.options.ticks;\r\n\r\n    // Calculate space needed by label in axis direction.\r\n    const rot = toRadians(this.labelRotation);\r\n    const cos = Math.abs(Math.cos(rot));\r\n    const sin = Math.abs(Math.sin(rot));\r\n\r\n    const labelSizes = this._getLabelSizes();\r\n    const padding = optionTicks.autoSkipPadding || 0;\r\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\r\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\r\n\r\n    // Calculate space needed for 1 tick in axis direction.\r\n    return this.isHorizontal()\r\n      ? h * cos > w * sin ? w / cos : h / sin\r\n      : h * sin < w * cos ? h / cos : w / sin;\r\n  }\r\n\r\n  /**\r\n\t * @return {boolean}\r\n\t * @private\r\n\t */\r\n  _isVisible() {\r\n    const display = this.options.display;\r\n\r\n    if (display !== 'auto') {\r\n      return !!display;\r\n    }\r\n\r\n    return this.getMatchingVisibleMetas().length > 0;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeGridLineItems(chartArea) {\r\n    const axis = this.axis;\r\n    const chart = this.chart;\r\n    const options = this.options;\r\n    const {grid, position, border} = options;\r\n    const offset = grid.offset;\r\n    const isHorizontal = this.isHorizontal();\r\n    const ticks = this.ticks;\r\n    const ticksLength = ticks.length + (offset ? 1 : 0);\r\n    const tl = getTickMarkLength(grid);\r\n    const items = [];\r\n\r\n    const borderOpts = border.setContext(this.getContext());\r\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\r\n    const axisHalfWidth = axisWidth / 2;\r\n    const alignBorderValue = function(pixel) {\r\n      return _alignPixel(chart, pixel, axisWidth);\r\n    };\r\n    let borderValue, i, lineValue, alignedLineValue;\r\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\r\n\r\n    if (position === 'top') {\r\n      borderValue = alignBorderValue(this.bottom);\r\n      ty1 = this.bottom - tl;\r\n      ty2 = borderValue - axisHalfWidth;\r\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\r\n      y2 = chartArea.bottom;\r\n    } else if (position === 'bottom') {\r\n      borderValue = alignBorderValue(this.top);\r\n      y1 = chartArea.top;\r\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\r\n      ty1 = borderValue + axisHalfWidth;\r\n      ty2 = this.top + tl;\r\n    } else if (position === 'left') {\r\n      borderValue = alignBorderValue(this.right);\r\n      tx1 = this.right - tl;\r\n      tx2 = borderValue - axisHalfWidth;\r\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\r\n      x2 = chartArea.right;\r\n    } else if (position === 'right') {\r\n      borderValue = alignBorderValue(this.left);\r\n      x1 = chartArea.left;\r\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\r\n      tx1 = borderValue + axisHalfWidth;\r\n      tx2 = this.left + tl;\r\n    } else if (axis === 'x') {\r\n      if (position === 'center') {\r\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\r\n      }\r\n\r\n      y1 = chartArea.top;\r\n      y2 = chartArea.bottom;\r\n      ty1 = borderValue + axisHalfWidth;\r\n      ty2 = ty1 + tl;\r\n    } else if (axis === 'y') {\r\n      if (position === 'center') {\r\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\r\n      }\r\n\r\n      tx1 = borderValue - axisHalfWidth;\r\n      tx2 = tx1 - tl;\r\n      x1 = chartArea.left;\r\n      x2 = chartArea.right;\r\n    }\r\n\r\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\r\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\r\n    for (i = 0; i < ticksLength; i += step) {\r\n      const context = this.getContext(i);\r\n      const optsAtIndex = grid.setContext(context);\r\n      const optsAtIndexBorder = border.setContext(context);\r\n\r\n      const lineWidth = optsAtIndex.lineWidth;\r\n      const lineColor = optsAtIndex.color;\r\n      const borderDash = optsAtIndexBorder.dash || [];\r\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\r\n\r\n      const tickWidth = optsAtIndex.tickWidth;\r\n      const tickColor = optsAtIndex.tickColor;\r\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\r\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\r\n\r\n      lineValue = getPixelForGridLine(this, i, offset);\r\n\r\n      // Skip if the pixel is out of the range\r\n      if (lineValue === undefined) {\r\n        continue;\r\n      }\r\n\r\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\r\n\r\n      if (isHorizontal) {\r\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\r\n      } else {\r\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\r\n      }\r\n\r\n      items.push({\r\n        tx1,\r\n        ty1,\r\n        tx2,\r\n        ty2,\r\n        x1,\r\n        y1,\r\n        x2,\r\n        y2,\r\n        width: lineWidth,\r\n        color: lineColor,\r\n        borderDash,\r\n        borderDashOffset,\r\n        tickWidth,\r\n        tickColor,\r\n        tickBorderDash,\r\n        tickBorderDashOffset,\r\n      });\r\n    }\r\n\r\n    this._ticksLength = ticksLength;\r\n    this._borderValue = borderValue;\r\n\r\n    return items;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeLabelItems(chartArea) {\r\n    const axis = this.axis;\r\n    const options = this.options;\r\n    const {position, ticks: optionTicks} = options;\r\n    const isHorizontal = this.isHorizontal();\r\n    const ticks = this.ticks;\r\n    const {align, crossAlign, padding, mirror} = optionTicks;\r\n    const tl = getTickMarkLength(options.grid);\r\n    const tickAndPadding = tl + padding;\r\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\r\n    const rotation = -toRadians(this.labelRotation);\r\n    const items = [];\r\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\r\n    let textBaseline = 'middle';\r\n\r\n    if (position === 'top') {\r\n      y = this.bottom - hTickAndPadding;\r\n      textAlign = this._getXAxisLabelAlignment();\r\n    } else if (position === 'bottom') {\r\n      y = this.top + hTickAndPadding;\r\n      textAlign = this._getXAxisLabelAlignment();\r\n    } else if (position === 'left') {\r\n      const ret = this._getYAxisLabelAlignment(tl);\r\n      textAlign = ret.textAlign;\r\n      x = ret.x;\r\n    } else if (position === 'right') {\r\n      const ret = this._getYAxisLabelAlignment(tl);\r\n      textAlign = ret.textAlign;\r\n      x = ret.x;\r\n    } else if (axis === 'x') {\r\n      if (position === 'center') {\r\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\r\n      }\r\n      textAlign = this._getXAxisLabelAlignment();\r\n    } else if (axis === 'y') {\r\n      if (position === 'center') {\r\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\r\n      }\r\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\r\n    }\r\n\r\n    if (axis === 'y') {\r\n      if (align === 'start') {\r\n        textBaseline = 'top';\r\n      } else if (align === 'end') {\r\n        textBaseline = 'bottom';\r\n      }\r\n    }\r\n\r\n    const labelSizes = this._getLabelSizes();\r\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\r\n      tick = ticks[i];\r\n      label = tick.label;\r\n\r\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\r\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\r\n      font = this._resolveTickFontOptions(i);\r\n      lineHeight = font.lineHeight;\r\n      lineCount = isArray(label) ? label.length : 1;\r\n      const halfCount = lineCount / 2;\r\n      const color = optsAtIndex.color;\r\n      const strokeColor = optsAtIndex.textStrokeColor;\r\n      const strokeWidth = optsAtIndex.textStrokeWidth;\r\n      let tickTextAlign = textAlign;\r\n\r\n      if (isHorizontal) {\r\n        x = pixel;\r\n\r\n        if (textAlign === 'inner') {\r\n          if (i === ilen - 1) {\r\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\r\n          } else if (i === 0) {\r\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\r\n          } else {\r\n            tickTextAlign = 'center';\r\n          }\r\n        }\r\n\r\n        if (position === 'top') {\r\n          if (crossAlign === 'near' || rotation !== 0) {\r\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\r\n          } else if (crossAlign === 'center') {\r\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\r\n          } else {\r\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\r\n          }\r\n        } else {\r\n          // eslint-disable-next-line no-lonely-if\r\n          if (crossAlign === 'near' || rotation !== 0) {\r\n            textOffset = lineHeight / 2;\r\n          } else if (crossAlign === 'center') {\r\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\r\n          } else {\r\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\r\n          }\r\n        }\r\n        if (mirror) {\r\n          textOffset *= -1;\r\n        }\r\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\r\n          x += (lineHeight / 2) * Math.sin(rotation);\r\n        }\r\n      } else {\r\n        y = pixel;\r\n        textOffset = (1 - lineCount) * lineHeight / 2;\r\n      }\r\n\r\n      let backdrop;\r\n\r\n      if (optsAtIndex.showLabelBackdrop) {\r\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\r\n        const height = labelSizes.heights[i];\r\n        const width = labelSizes.widths[i];\r\n\r\n        let top = textOffset - labelPadding.top;\r\n        let left = 0 - labelPadding.left;\r\n\r\n        switch (textBaseline) {\r\n        case 'middle':\r\n          top -= height / 2;\r\n          break;\r\n        case 'bottom':\r\n          top -= height;\r\n          break;\r\n        default:\r\n          break;\r\n        }\r\n\r\n        switch (textAlign) {\r\n        case 'center':\r\n          left -= width / 2;\r\n          break;\r\n        case 'right':\r\n          left -= width;\r\n          break;\r\n        default:\r\n          break;\r\n        }\r\n\r\n        backdrop = {\r\n          left,\r\n          top,\r\n          width: width + labelPadding.width,\r\n          height: height + labelPadding.height,\r\n\r\n          color: optsAtIndex.backdropColor,\r\n        };\r\n      }\r\n\r\n      items.push({\r\n        rotation,\r\n        label,\r\n        font,\r\n        color,\r\n        strokeColor,\r\n        strokeWidth,\r\n        textOffset,\r\n        textAlign: tickTextAlign,\r\n        textBaseline,\r\n        translation: [x, y],\r\n        backdrop,\r\n      });\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  _getXAxisLabelAlignment() {\r\n    const {position, ticks} = this.options;\r\n    const rotation = -toRadians(this.labelRotation);\r\n\r\n    if (rotation) {\r\n      return position === 'top' ? 'left' : 'right';\r\n    }\r\n\r\n    let align = 'center';\r\n\r\n    if (ticks.align === 'start') {\r\n      align = 'left';\r\n    } else if (ticks.align === 'end') {\r\n      align = 'right';\r\n    } else if (ticks.align === 'inner') {\r\n      align = 'inner';\r\n    }\r\n\r\n    return align;\r\n  }\r\n\r\n  _getYAxisLabelAlignment(tl) {\r\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\r\n    const labelSizes = this._getLabelSizes();\r\n    const tickAndPadding = tl + padding;\r\n    const widest = labelSizes.widest.width;\r\n\r\n    let textAlign;\r\n    let x;\r\n\r\n    if (position === 'left') {\r\n      if (mirror) {\r\n        x = this.right + padding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'left';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x += (widest / 2);\r\n        } else {\r\n          textAlign = 'right';\r\n          x += widest;\r\n        }\r\n      } else {\r\n        x = this.right - tickAndPadding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'right';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x -= (widest / 2);\r\n        } else {\r\n          textAlign = 'left';\r\n          x = this.left;\r\n        }\r\n      }\r\n    } else if (position === 'right') {\r\n      if (mirror) {\r\n        x = this.left + padding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'right';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x -= (widest / 2);\r\n        } else {\r\n          textAlign = 'left';\r\n          x -= widest;\r\n        }\r\n      } else {\r\n        x = this.left + tickAndPadding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'left';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x += widest / 2;\r\n        } else {\r\n          textAlign = 'right';\r\n          x = this.right;\r\n        }\r\n      }\r\n    } else {\r\n      textAlign = 'right';\r\n    }\r\n\r\n    return {textAlign, x};\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeLabelArea() {\r\n    if (this.options.ticks.mirror) {\r\n      return;\r\n    }\r\n\r\n    const chart = this.chart;\r\n    const position = this.options.position;\r\n\r\n    if (position === 'left' || position === 'right') {\r\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\r\n    } if (position === 'top' || position === 'bottom') {\r\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  drawBackground() {\r\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\r\n    if (backgroundColor) {\r\n      ctx.save();\r\n      ctx.fillStyle = backgroundColor;\r\n      ctx.fillRect(left, top, width, height);\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  getLineWidthForValue(value) {\r\n    const grid = this.options.grid;\r\n    if (!this._isVisible() || !grid.display) {\r\n      return 0;\r\n    }\r\n    const ticks = this.ticks;\r\n    const index = ticks.findIndex(t => t.value === value);\r\n    if (index >= 0) {\r\n      const opts = grid.setContext(this.getContext(index));\r\n      return opts.lineWidth;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawGrid(chartArea) {\r\n    const grid = this.options.grid;\r\n    const ctx = this.ctx;\r\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\r\n    let i, ilen;\r\n\r\n    const drawLine = (p1, p2, style) => {\r\n      if (!style.width || !style.color) {\r\n        return;\r\n      }\r\n      ctx.save();\r\n      ctx.lineWidth = style.width;\r\n      ctx.strokeStyle = style.color;\r\n      ctx.setLineDash(style.borderDash || []);\r\n      ctx.lineDashOffset = style.borderDashOffset;\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(p1.x, p1.y);\r\n      ctx.lineTo(p2.x, p2.y);\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    };\r\n\r\n    if (grid.display) {\r\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n        const item = items[i];\r\n\r\n        if (grid.drawOnChartArea) {\r\n          drawLine(\r\n            {x: item.x1, y: item.y1},\r\n            {x: item.x2, y: item.y2},\r\n            item\r\n          );\r\n        }\r\n\r\n        if (grid.drawTicks) {\r\n          drawLine(\r\n            {x: item.tx1, y: item.ty1},\r\n            {x: item.tx2, y: item.ty2},\r\n            {\r\n              color: item.tickColor,\r\n              width: item.tickWidth,\r\n              borderDash: item.tickBorderDash,\r\n              borderDashOffset: item.tickBorderDashOffset\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawBorder() {\r\n    const {chart, ctx, options: {border, grid}} = this;\r\n    const borderOpts = border.setContext(this.getContext());\r\n    const axisWidth = border.display ? borderOpts.width : 0;\r\n    if (!axisWidth) {\r\n      return;\r\n    }\r\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\r\n    const borderValue = this._borderValue;\r\n    let x1, x2, y1, y2;\r\n\r\n    if (this.isHorizontal()) {\r\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\r\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\r\n      y1 = y2 = borderValue;\r\n    } else {\r\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\r\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\r\n      x1 = x2 = borderValue;\r\n    }\r\n    ctx.save();\r\n    ctx.lineWidth = borderOpts.width;\r\n    ctx.strokeStyle = borderOpts.color;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawLabels(chartArea) {\r\n    const optionTicks = this.options.ticks;\r\n\r\n    if (!optionTicks.display) {\r\n      return;\r\n    }\r\n\r\n    const ctx = this.ctx;\r\n\r\n    const area = this._computeLabelArea();\r\n    if (area) {\r\n      clipArea(ctx, area);\r\n    }\r\n\r\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n      const item = items[i];\r\n      const tickFont = item.font;\r\n      const label = item.label;\r\n\r\n      let y = item.textOffset;\r\n      renderText(ctx, label, 0, y, tickFont, item);\r\n    }\r\n\r\n    if (area) {\r\n      unclipArea(ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawTitle() {\r\n    const {ctx, options: {position, title, reverse}} = this;\r\n\r\n    if (!title.display) {\r\n      return;\r\n    }\r\n\r\n    const font = toFont(title.font);\r\n    const padding = toPadding(title.padding);\r\n    const align = title.align;\r\n    let offset = font.lineHeight / 2;\r\n\r\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\r\n      offset += padding.bottom;\r\n      if (isArray(title.text)) {\r\n        offset += font.lineHeight * (title.text.length - 1);\r\n      }\r\n    } else {\r\n      offset += padding.top;\r\n    }\r\n\r\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\r\n\r\n    renderText(ctx, title.text, 0, 0, font, {\r\n      color: title.color,\r\n      maxWidth,\r\n      rotation,\r\n      textAlign: titleAlign(align, position, reverse),\r\n      textBaseline: 'middle',\r\n      translation: [titleX, titleY],\r\n    });\r\n  }\r\n\r\n  draw(chartArea) {\r\n    if (!this._isVisible()) {\r\n      return;\r\n    }\r\n\r\n    this.drawBackground();\r\n    this.drawGrid(chartArea);\r\n    this.drawBorder();\r\n    this.drawTitle();\r\n    this.drawLabels(chartArea);\r\n  }\r\n\r\n  /**\r\n\t * @return {object[]}\r\n\t * @private\r\n\t */\r\n  _layers() {\r\n    const opts = this.options;\r\n    const tz = opts.ticks && opts.ticks.z || 0;\r\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\r\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\r\n\r\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\r\n      // backward compatibility: draw has been overridden by custom scale\r\n      return [{\r\n        z: tz,\r\n        draw: (chartArea) => {\r\n          this.draw(chartArea);\r\n        }\r\n      }];\r\n    }\r\n\r\n    return [{\r\n      z: gz,\r\n      draw: (chartArea) => {\r\n        this.drawBackground();\r\n        this.drawGrid(chartArea);\r\n        this.drawTitle();\r\n      }\r\n    }, {\r\n      z: bz,\r\n      draw: () => {\r\n        this.drawBorder();\r\n      }\r\n    }, {\r\n      z: tz,\r\n      draw: (chartArea) => {\r\n        this.drawLabels(chartArea);\r\n      }\r\n    }];\r\n  }\r\n\r\n  /**\r\n\t * Returns visible dataset metas that are attached to this scale\r\n\t * @param {string} [type] - if specified, also filter by dataset type\r\n\t * @return {object[]}\r\n\t */\r\n  getMatchingVisibleMetas(type) {\r\n    const metas = this.chart.getSortedVisibleDatasetMetas();\r\n    const axisID = this.axis + 'AxisID';\r\n    const result = [];\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\r\n      const meta = metas[i];\r\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\r\n        result.push(meta);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} index\r\n\t * @return {object}\r\n\t * @protected\r\n \t */\r\n  _resolveTickFontOptions(index) {\r\n    const opts = this.options.ticks.setContext(this.getContext(index));\r\n    return toFont(opts.font);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  _maxDigits() {\r\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\r\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\r\n  }\r\n}\r\n","import {merge} from '../helpers';\r\nimport defaults, {overrides} from './core.defaults';\r\n\r\n/**\r\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\r\n */\r\n\r\nexport default class TypedRegistry {\r\n  constructor(type, scope, override) {\r\n    this.type = type;\r\n    this.scope = scope;\r\n    this.override = override;\r\n    this.items = Object.create(null);\r\n  }\r\n\r\n  isForType(type) {\r\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\r\n  }\r\n\r\n  /**\r\n\t * @param {IChartComponent} item\r\n\t * @returns {string} The scope where items defaults were registered to.\r\n\t */\r\n  register(item) {\r\n    const proto = Object.getPrototypeOf(item);\r\n    let parentScope;\r\n\r\n    if (isIChartComponent(proto)) {\r\n      // Make sure the parent is registered and note the scope where its defaults are.\r\n      parentScope = this.register(proto);\r\n    }\r\n\r\n    const items = this.items;\r\n    const id = item.id;\r\n    const scope = this.scope + '.' + id;\r\n\r\n    if (!id) {\r\n      throw new Error('class does not have id: ' + item);\r\n    }\r\n\r\n    if (id in items) {\r\n      // already registered\r\n      return scope;\r\n    }\r\n\r\n    items[id] = item;\r\n    registerDefaults(item, scope, parentScope);\r\n    if (this.override) {\r\n      defaults.override(item.id, item.overrides);\r\n    }\r\n\r\n    return scope;\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {object?}\r\n\t */\r\n  get(id) {\r\n    return this.items[id];\r\n  }\r\n\r\n  /**\r\n\t * @param {IChartComponent} item\r\n\t */\r\n  unregister(item) {\r\n    const items = this.items;\r\n    const id = item.id;\r\n    const scope = this.scope;\r\n\r\n    if (id in items) {\r\n      delete items[id];\r\n    }\r\n\r\n    if (scope && id in defaults[scope]) {\r\n      delete defaults[scope][id];\r\n      if (this.override) {\r\n        delete overrides[id];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction registerDefaults(item, scope, parentScope) {\r\n  // Inherit the parent's defaults and keep existing defaults\r\n  const itemDefaults = merge(Object.create(null), [\r\n    parentScope ? defaults.get(parentScope) : {},\r\n    defaults.get(scope),\r\n    item.defaults\r\n  ]);\r\n\r\n  defaults.set(scope, itemDefaults);\r\n\r\n  if (item.defaultRoutes) {\r\n    routeDefaults(scope, item.defaultRoutes);\r\n  }\r\n\r\n  if (item.descriptors) {\r\n    defaults.describe(scope, item.descriptors);\r\n  }\r\n}\r\n\r\nfunction routeDefaults(scope, routes) {\r\n  Object.keys(routes).forEach(property => {\r\n    const propertyParts = property.split('.');\r\n    const sourceName = propertyParts.pop();\r\n    const sourceScope = [scope].concat(propertyParts).join('.');\r\n    const parts = routes[property].split('.');\r\n    const targetName = parts.pop();\r\n    const targetScope = parts.join('.');\r\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\r\n  });\r\n}\r\n\r\nfunction isIChartComponent(proto) {\r\n  return 'id' in proto && 'defaults' in proto;\r\n}\r\n","import DatasetController from './core.datasetController';\r\nimport Element from './core.element';\r\nimport Scale from './core.scale';\r\nimport TypedRegistry from './core.typedRegistry';\r\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core';\r\n\r\n/**\r\n * Please use the module's default export which provides a singleton instance\r\n * Note: class is exported for typedoc\r\n */\r\nexport class Registry {\r\n  constructor() {\r\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\r\n    this.elements = new TypedRegistry(Element, 'elements');\r\n    this.plugins = new TypedRegistry(Object, 'plugins');\r\n    this.scales = new TypedRegistry(Scale, 'scales');\r\n    // Order is important, Scale has Element in prototype chain,\r\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\r\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\r\n  }\r\n\r\n  /**\r\n\t * @param  {...any} args\r\n\t */\r\n  add(...args) {\r\n    this._each('register', args);\r\n  }\r\n\r\n  remove(...args) {\r\n    this._each('unregister', args);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof DatasetController} args\r\n\t */\r\n  addControllers(...args) {\r\n    this._each('register', args, this.controllers);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Element} args\r\n\t */\r\n  addElements(...args) {\r\n    this._each('register', args, this.elements);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...any} args\r\n\t */\r\n  addPlugins(...args) {\r\n    this._each('register', args, this.plugins);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Scale} args\r\n\t */\r\n  addScales(...args) {\r\n    this._each('register', args, this.scales);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {typeof DatasetController}\r\n\t */\r\n  getController(id) {\r\n    return this._get(id, this.controllers, 'controller');\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {typeof Element}\r\n\t */\r\n  getElement(id) {\r\n    return this._get(id, this.elements, 'element');\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {object}\r\n\t */\r\n  getPlugin(id) {\r\n    return this._get(id, this.plugins, 'plugin');\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {typeof Scale}\r\n\t */\r\n  getScale(id) {\r\n    return this._get(id, this.scales, 'scale');\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof DatasetController} args\r\n\t */\r\n  removeControllers(...args) {\r\n    this._each('unregister', args, this.controllers);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Element} args\r\n\t */\r\n  removeElements(...args) {\r\n    this._each('unregister', args, this.elements);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...any} args\r\n\t */\r\n  removePlugins(...args) {\r\n    this._each('unregister', args, this.plugins);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Scale} args\r\n\t */\r\n  removeScales(...args) {\r\n    this._each('unregister', args, this.scales);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _each(method, args, typedRegistry) {\r\n    [...args].forEach(arg => {\r\n      const reg = typedRegistry || this._getRegistryForType(arg);\r\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\r\n        this._exec(method, reg, arg);\r\n      } else {\r\n        // Handle loopable args\r\n        // Use case:\r\n        //  import * as plugins from './plugins';\r\n        //  Chart.register(plugins);\r\n        each(arg, item => {\r\n          // If there are mixed types in the loopable, make sure those are\r\n          // registered in correct registry\r\n          // Use case: (treemap exporting controller, elements etc)\r\n          //  import * as treemap from 'chartjs-chart-treemap';\r\n          //  Chart.register(treemap);\r\n\r\n          const itemReg = typedRegistry || this._getRegistryForType(item);\r\n          this._exec(method, itemReg, item);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _exec(method, registry, component) {\r\n    const camelMethod = _capitalize(method);\r\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\r\n    registry[method](component);\r\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRegistryForType(type) {\r\n    for (let i = 0; i < this._typedRegistries.length; i++) {\r\n      const reg = this._typedRegistries[i];\r\n      if (reg.isForType(type)) {\r\n        return reg;\r\n      }\r\n    }\r\n    // plugins is the fallback registry\r\n    return this.plugins;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _get(id, typedRegistry, type) {\r\n    const item = typedRegistry.get(id);\r\n    if (item === undefined) {\r\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\r\n    }\r\n    return item;\r\n  }\r\n\r\n}\r\n\r\n// singleton instance\r\nexport default /* #__PURE__ */ new Registry();\r\n","import registry from './core.registry';\r\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core';\r\n\r\n/**\r\n * @typedef { import(\"./core.controller\").default } Chart\r\n * @typedef { import(\"../../types\").ChartEvent } ChartEvent\r\n * @typedef { import(\"../plugins/plugin.tooltip\").default } Tooltip\r\n */\r\n\r\n/**\r\n * @callback filterCallback\r\n * @param {{plugin: object, options: object}} value\r\n * @param {number} [index]\r\n * @param {array} [array]\r\n * @param {object} [thisArg]\r\n * @return {boolean}\r\n */\r\n\r\n\r\nexport default class PluginService {\r\n  constructor() {\r\n    this._init = [];\r\n  }\r\n\r\n  /**\r\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\r\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\r\n\t * returned value can be used, for instance, to interrupt the current action.\r\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\r\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\r\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\r\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\r\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\r\n\t */\r\n  notify(chart, hook, args, filter) {\r\n    if (hook === 'beforeInit') {\r\n      this._init = this._createDescriptors(chart, true);\r\n      this._notify(this._init, chart, 'install');\r\n    }\r\n\r\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\r\n    const result = this._notify(descriptors, chart, hook, args);\r\n\r\n    if (hook === 'afterDestroy') {\r\n      this._notify(descriptors, chart, 'stop');\r\n      this._notify(this._init, chart, 'uninstall');\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _notify(descriptors, chart, hook, args) {\r\n    args = args || {};\r\n    for (const descriptor of descriptors) {\r\n      const plugin = descriptor.plugin;\r\n      const method = plugin[hook];\r\n      const params = [chart, args, descriptor.options];\r\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  invalidate() {\r\n    // When plugins are registered, there is the possibility of a double\r\n    // invalidate situation. In this case, we only want to invalidate once.\r\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\r\n    // plugins are restarted without being correctly stopped.\r\n    // See https://github.com/chartjs/Chart.js/issues/8147\r\n    if (!isNullOrUndef(this._cache)) {\r\n      this._oldCache = this._cache;\r\n      this._cache = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @private\r\n\t */\r\n  _descriptors(chart) {\r\n    if (this._cache) {\r\n      return this._cache;\r\n    }\r\n\r\n    const descriptors = this._cache = this._createDescriptors(chart);\r\n\r\n    this._notifyStateChanges(chart);\r\n\r\n    return descriptors;\r\n  }\r\n\r\n  _createDescriptors(chart, all) {\r\n    const config = chart && chart.config;\r\n    const options = valueOrDefault(config.options && config.options.plugins, {});\r\n    const plugins = allPlugins(config);\r\n    // options === false => all plugins are disabled\r\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\r\n  }\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @private\r\n\t */\r\n  _notifyStateChanges(chart) {\r\n    const previousDescriptors = this._oldCache || [];\r\n    const descriptors = this._cache;\r\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\r\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\r\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"./core.config\").default} config\r\n */\r\nfunction allPlugins(config) {\r\n  const localIds = {};\r\n  const plugins = [];\r\n  const keys = Object.keys(registry.plugins.items);\r\n  for (let i = 0; i < keys.length; i++) {\r\n    plugins.push(registry.getPlugin(keys[i]));\r\n  }\r\n\r\n  const local = config.plugins || [];\r\n  for (let i = 0; i < local.length; i++) {\r\n    const plugin = local[i];\r\n\r\n    if (plugins.indexOf(plugin) === -1) {\r\n      plugins.push(plugin);\r\n      localIds[plugin.id] = true;\r\n    }\r\n  }\r\n\r\n  return {plugins, localIds};\r\n}\r\n\r\nfunction getOpts(options, all) {\r\n  if (!all && options === false) {\r\n    return null;\r\n  }\r\n  if (options === true) {\r\n    return {};\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\r\n  const result = [];\r\n  const context = chart.getContext();\r\n\r\n  for (const plugin of plugins) {\r\n    const id = plugin.id;\r\n    const opts = getOpts(options[id], all);\r\n    if (opts === null) {\r\n      continue;\r\n    }\r\n    result.push({\r\n      plugin,\r\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction pluginOpts(config, {plugin, local}, opts, context) {\r\n  const keys = config.pluginScopeKeys(plugin);\r\n  const scopes = config.getOptionScopes(opts, keys);\r\n  if (local && plugin.defaults) {\r\n    // make sure plugin defaults are in scopes for local (not registered) plugins\r\n    scopes.push(plugin.defaults);\r\n  }\r\n  return config.createResolver(scopes, context, [''], {\r\n    // These are just defaults that plugins can override\r\n    scriptable: false,\r\n    indexable: false,\r\n    allKeys: true\r\n  });\r\n}\r\n","import defaults, {overrides, descriptors} from './core.defaults';\r\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core';\r\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config';\r\n\r\nexport function getIndexAxis(type, options) {\r\n  const datasetDefaults = defaults.datasets[type] || {};\r\n  const datasetOptions = (options.datasets || {})[type] || {};\r\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\r\n}\r\n\r\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\r\n  let axis = id;\r\n  if (id === '_index_') {\r\n    axis = indexAxis;\r\n  } else if (id === '_value_') {\r\n    axis = indexAxis === 'x' ? 'y' : 'x';\r\n  }\r\n  return axis;\r\n}\r\n\r\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\r\n  return axis === indexAxis ? '_index_' : '_value_';\r\n}\r\n\r\nfunction axisFromPosition(position) {\r\n  if (position === 'top' || position === 'bottom') {\r\n    return 'x';\r\n  }\r\n  if (position === 'left' || position === 'right') {\r\n    return 'y';\r\n  }\r\n}\r\n\r\nexport function determineAxis(id, scaleOptions) {\r\n  if (id === 'x' || id === 'y' || id === 'r') {\r\n    return id;\r\n  }\r\n\r\n  id = scaleOptions.axis\r\n    || axisFromPosition(scaleOptions.position)\r\n    || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\r\n\r\n  if (id) {\r\n    return id;\r\n  }\r\n\r\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\r\n}\r\n\r\nfunction mergeScaleConfig(config, options) {\r\n  const chartDefaults = overrides[config.type] || {scales: {}};\r\n  const configScales = options.scales || {};\r\n  const chartIndexAxis = getIndexAxis(config.type, options);\r\n  const scales = Object.create(null);\r\n\r\n  // First figure out first scale id's per axis.\r\n  Object.keys(configScales).forEach(id => {\r\n    const scaleConf = configScales[id];\r\n    if (!isObject(scaleConf)) {\r\n      return console.error(`Invalid scale configuration for scale: ${id}`);\r\n    }\r\n    if (scaleConf._proxy) {\r\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\r\n    }\r\n    const axis = determineAxis(id, scaleConf);\r\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\r\n    const defaultScaleOptions = chartDefaults.scales || {};\r\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\r\n  });\r\n\r\n  // Then merge dataset defaults to scale configs\r\n  config.data.datasets.forEach(dataset => {\r\n    const type = dataset.type || config.type;\r\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\r\n    const datasetDefaults = overrides[type] || {};\r\n    const defaultScaleOptions = datasetDefaults.scales || {};\r\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\r\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\r\n      const id = dataset[axis + 'AxisID'] || axis;\r\n      scales[id] = scales[id] || Object.create(null);\r\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\r\n    });\r\n  });\r\n\r\n  // apply scale defaults, if not overridden by dataset defaults\r\n  Object.keys(scales).forEach(key => {\r\n    const scale = scales[key];\r\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\r\n  });\r\n\r\n  return scales;\r\n}\r\n\r\nfunction initOptions(config) {\r\n  const options = config.options || (config.options = {});\r\n\r\n  options.plugins = valueOrDefault(options.plugins, {});\r\n  options.scales = mergeScaleConfig(config, options);\r\n}\r\n\r\nfunction initData(data) {\r\n  data = data || {};\r\n  data.datasets = data.datasets || [];\r\n  data.labels = data.labels || [];\r\n  return data;\r\n}\r\n\r\nfunction initConfig(config) {\r\n  config = config || {};\r\n  config.data = initData(config.data);\r\n\r\n  initOptions(config);\r\n\r\n  return config;\r\n}\r\n\r\nconst keyCache = new Map();\r\nconst keysCached = new Set();\r\n\r\nfunction cachedKeys(cacheKey, generate) {\r\n  let keys = keyCache.get(cacheKey);\r\n  if (!keys) {\r\n    keys = generate();\r\n    keyCache.set(cacheKey, keys);\r\n    keysCached.add(keys);\r\n  }\r\n  return keys;\r\n}\r\n\r\nconst addIfFound = (set, obj, key) => {\r\n  const opts = resolveObjectKey(obj, key);\r\n  if (opts !== undefined) {\r\n    set.add(opts);\r\n  }\r\n};\r\n\r\nexport default class Config {\r\n  constructor(config) {\r\n    this._config = initConfig(config);\r\n    this._scopeCache = new Map();\r\n    this._resolverCache = new Map();\r\n  }\r\n\r\n  get platform() {\r\n    return this._config.platform;\r\n  }\r\n\r\n  get type() {\r\n    return this._config.type;\r\n  }\r\n\r\n  set type(type) {\r\n    this._config.type = type;\r\n  }\r\n\r\n  get data() {\r\n    return this._config.data;\r\n  }\r\n\r\n  set data(data) {\r\n    this._config.data = initData(data);\r\n  }\r\n\r\n  get options() {\r\n    return this._config.options;\r\n  }\r\n\r\n  set options(options) {\r\n    this._config.options = options;\r\n  }\r\n\r\n  get plugins() {\r\n    return this._config.plugins;\r\n  }\r\n\r\n  update() {\r\n    const config = this._config;\r\n    this.clearCache();\r\n    initOptions(config);\r\n  }\r\n\r\n  clearCache() {\r\n    this._scopeCache.clear();\r\n    this._resolverCache.clear();\r\n  }\r\n\r\n  /**\r\n   * Returns the option scope keys for resolving dataset options.\r\n   * These keys do not include the dataset itself, because it is not under options.\r\n   * @param {string} datasetType\r\n   * @return {string[][]}\r\n   */\r\n  datasetScopeKeys(datasetType) {\r\n    return cachedKeys(datasetType,\r\n      () => [[\r\n        `datasets.${datasetType}`,\r\n        ''\r\n      ]]);\r\n  }\r\n\r\n  /**\r\n   * Returns the option scope keys for resolving dataset animation options.\r\n   * These keys do not include the dataset itself, because it is not under options.\r\n   * @param {string} datasetType\r\n   * @param {string} transition\r\n   * @return {string[][]}\r\n   */\r\n  datasetAnimationScopeKeys(datasetType, transition) {\r\n    return cachedKeys(`${datasetType}.transition.${transition}`,\r\n      () => [\r\n        [\r\n          `datasets.${datasetType}.transitions.${transition}`,\r\n          `transitions.${transition}`,\r\n        ],\r\n        // The following are used for looking up the `animations` and `animation` keys\r\n        [\r\n          `datasets.${datasetType}`,\r\n          ''\r\n        ]\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * Returns the options scope keys for resolving element options that belong\r\n   * to an dataset. These keys do not include the dataset itself, because it\r\n   * is not under options.\r\n   * @param {string} datasetType\r\n   * @param {string} elementType\r\n   * @return {string[][]}\r\n   */\r\n  datasetElementScopeKeys(datasetType, elementType) {\r\n    return cachedKeys(`${datasetType}-${elementType}`,\r\n      () => [[\r\n        `datasets.${datasetType}.elements.${elementType}`,\r\n        `datasets.${datasetType}`,\r\n        `elements.${elementType}`,\r\n        ''\r\n      ]]);\r\n  }\r\n\r\n  /**\r\n   * Returns the options scope keys for resolving plugin options.\r\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\r\n   * @return {string[][]}\r\n   */\r\n  pluginScopeKeys(plugin) {\r\n    const id = plugin.id;\r\n    const type = this.type;\r\n    return cachedKeys(`${type}-plugin-${id}`,\r\n      () => [[\r\n        `plugins.${id}`,\r\n        ...plugin.additionalOptionScopes || [],\r\n      ]]);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _cachedScopes(mainScope, resetCache) {\r\n    const _scopeCache = this._scopeCache;\r\n    let cache = _scopeCache.get(mainScope);\r\n    if (!cache || resetCache) {\r\n      cache = new Map();\r\n      _scopeCache.set(mainScope, cache);\r\n    }\r\n    return cache;\r\n  }\r\n\r\n  /**\r\n   * Resolves the objects from options and defaults for option value resolution.\r\n   * @param {object} mainScope - The main scope object for options\r\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\r\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\r\n   */\r\n  getOptionScopes(mainScope, keyLists, resetCache) {\r\n    const {options, type} = this;\r\n    const cache = this._cachedScopes(mainScope, resetCache);\r\n    const cached = cache.get(keyLists);\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n\r\n    const scopes = new Set();\r\n\r\n    keyLists.forEach(keys => {\r\n      if (mainScope) {\r\n        scopes.add(mainScope);\r\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\r\n      }\r\n      keys.forEach(key => addIfFound(scopes, options, key));\r\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\r\n      keys.forEach(key => addIfFound(scopes, defaults, key));\r\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\r\n    });\r\n\r\n    const array = Array.from(scopes);\r\n    if (array.length === 0) {\r\n      array.push(Object.create(null));\r\n    }\r\n    if (keysCached.has(keyLists)) {\r\n      cache.set(keyLists, array);\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * Returns the option scopes for resolving chart options\r\n   * @return {object[]}\r\n   */\r\n  chartOptionScopes() {\r\n    const {options, type} = this;\r\n\r\n    return [\r\n      options,\r\n      overrides[type] || {},\r\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\r\n      {type},\r\n      defaults,\r\n      descriptors\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {object[]} scopes\r\n   * @param {string[]} names\r\n   * @param {function|object} context\r\n   * @param {string[]} [prefixes]\r\n   * @return {object}\r\n   */\r\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\r\n    const result = {$shared: true};\r\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\r\n    let options = resolver;\r\n    if (needContext(resolver, names)) {\r\n      result.$shared = false;\r\n      context = isFunction(context) ? context() : context;\r\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\r\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\r\n      options = _attachContext(resolver, context, subResolver);\r\n    }\r\n\r\n    for (const prop of names) {\r\n      result[prop] = options[prop];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @param {object[]} scopes\r\n   * @param {object} [context]\r\n   * @param {string[]} [prefixes]\r\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\r\n   */\r\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\r\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\r\n    return isObject(context)\r\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\r\n      : resolver;\r\n  }\r\n}\r\n\r\nfunction getResolver(resolverCache, scopes, prefixes) {\r\n  let cache = resolverCache.get(scopes);\r\n  if (!cache) {\r\n    cache = new Map();\r\n    resolverCache.set(scopes, cache);\r\n  }\r\n  const cacheKey = prefixes.join();\r\n  let cached = cache.get(cacheKey);\r\n  if (!cached) {\r\n    const resolver = _createResolver(scopes, prefixes);\r\n    cached = {\r\n      resolver,\r\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\r\n    };\r\n    cache.set(cacheKey, cached);\r\n  }\r\n  return cached;\r\n}\r\n\r\nconst hasFunction = value => isObject(value)\r\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\r\n\r\nfunction needContext(proxy, names) {\r\n  const {isScriptable, isIndexable} = _descriptors(proxy);\r\n\r\n  for (const prop of names) {\r\n    const scriptable = isScriptable(prop);\r\n    const indexable = isIndexable(prop);\r\n    const value = (indexable || scriptable) && proxy[prop];\r\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\r\n      || (indexable && isArray(value))) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","import animator from './core.animator';\r\nimport defaults, {overrides} from './core.defaults';\r\nimport Interaction from './core.interaction';\r\nimport layouts from './core.layouts';\r\nimport {_detectPlatform} from '../platform';\r\nimport PluginService from './core.plugins';\r\nimport registry from './core.registry';\r\nimport Config, {determineAxis, getIndexAxis} from './core.config';\r\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom';\r\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core';\r\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers';\r\n// @ts-ignore\r\nimport {version} from '../../package.json';\r\nimport {debounce} from '../helpers/helpers.extras';\r\n\r\n/**\r\n * @typedef { import('../../types').ChartEvent } ChartEvent\r\n * @typedef { import(\"../../types\").Point } Point\r\n */\r\n\r\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\r\nfunction positionIsHorizontal(position, axis) {\r\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\r\n}\r\n\r\nfunction compare2Level(l1, l2) {\r\n  return function(a, b) {\r\n    return a[l1] === b[l1]\r\n      ? a[l2] - b[l2]\r\n      : a[l1] - b[l1];\r\n  };\r\n}\r\n\r\nfunction onAnimationsComplete(context) {\r\n  const chart = context.chart;\r\n  const animationOptions = chart.options.animation;\r\n\r\n  chart.notifyPlugins('afterRender');\r\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\r\n}\r\n\r\nfunction onAnimationProgress(context) {\r\n  const chart = context.chart;\r\n  const animationOptions = chart.options.animation;\r\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\r\n}\r\n\r\n/**\r\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\r\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\r\n */\r\nfunction getCanvas(item) {\r\n  if (_isDomSupported() && typeof item === 'string') {\r\n    item = document.getElementById(item);\r\n  } else if (item && item.length) {\r\n    // Support for array based queries (such as jQuery)\r\n    item = item[0];\r\n  }\r\n\r\n  if (item && item.canvas) {\r\n    // Support for any object associated to a canvas (including a context2d)\r\n    item = item.canvas;\r\n  }\r\n  return item;\r\n}\r\n\r\nconst instances = {};\r\nconst getChart = (key) => {\r\n  const canvas = getCanvas(key);\r\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\r\n};\r\n\r\nfunction moveNumericKeys(obj, start, move) {\r\n  const keys = Object.keys(obj);\r\n  for (const key of keys) {\r\n    const intKey = +key;\r\n    if (intKey >= start) {\r\n      const value = obj[key];\r\n      delete obj[key];\r\n      if (move > 0 || intKey > start) {\r\n        obj[intKey + move] = value;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {ChartEvent} e\r\n * @param {ChartEvent|null} lastEvent\r\n * @param {boolean} inChartArea\r\n * @param {boolean} isClick\r\n * @returns {ChartEvent|null}\r\n */\r\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\r\n  if (!inChartArea || e.type === 'mouseout') {\r\n    return null;\r\n  }\r\n  if (isClick) {\r\n    return lastEvent;\r\n  }\r\n  return e;\r\n}\r\n\r\nfunction getDatasetArea(meta) {\r\n  const {xScale, yScale} = meta;\r\n  if (xScale && yScale) {\r\n    return {\r\n      left: xScale.left,\r\n      right: xScale.right,\r\n      top: yScale.top,\r\n      bottom: yScale.bottom\r\n    };\r\n  }\r\n}\r\n\r\nclass Chart {\r\n\r\n  static defaults = defaults;\r\n  static instances = instances;\r\n  static overrides = overrides;\r\n  static registry = registry;\r\n  static version = version;\r\n  static getChart = getChart;\r\n\r\n  static register(...items) {\r\n    registry.add(...items);\r\n    invalidatePlugins();\r\n  }\r\n\r\n  static unregister(...items) {\r\n    registry.remove(...items);\r\n    invalidatePlugins();\r\n  }\r\n\r\n  // eslint-disable-next-line max-statements\r\n  constructor(item, userConfig) {\r\n    const config = this.config = new Config(userConfig);\r\n    const initialCanvas = getCanvas(item);\r\n    const existingChart = getChart(initialCanvas);\r\n    if (existingChart) {\r\n      throw new Error(\r\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\r\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\r\n      );\r\n    }\r\n\r\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\r\n\r\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\r\n    this.platform.updateConfig(config);\r\n\r\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\r\n    const canvas = context && context.canvas;\r\n    const height = canvas && canvas.height;\r\n    const width = canvas && canvas.width;\r\n\r\n    this.id = uid();\r\n    this.ctx = context;\r\n    this.canvas = canvas;\r\n    this.width = width;\r\n    this.height = height;\r\n    this._options = options;\r\n    // Store the previously used aspect ratio to determine if a resize\r\n    // is needed during updates. Do this after _options is set since\r\n    // aspectRatio uses a getter\r\n    this._aspectRatio = this.aspectRatio;\r\n    this._layers = [];\r\n    this._metasets = [];\r\n    this._stacks = undefined;\r\n    this.boxes = [];\r\n    this.currentDevicePixelRatio = undefined;\r\n    this.chartArea = undefined;\r\n    this._active = [];\r\n    this._lastEvent = undefined;\r\n    this._listeners = {};\r\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\r\n    this._responsiveListeners = undefined;\r\n    this._sortedMetasets = [];\r\n    this.scales = {};\r\n    this._plugins = new PluginService();\r\n    this.$proxies = {};\r\n    this._hiddenIndices = {};\r\n    this.attached = false;\r\n    this._animationsDisabled = undefined;\r\n    this.$context = undefined;\r\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\r\n    this._dataChanges = [];\r\n\r\n    // Add the chart instance to the global namespace\r\n    instances[this.id] = this;\r\n\r\n    if (!context || !canvas) {\r\n      // The given item is not a compatible context2d element, let's return before finalizing\r\n      // the chart initialization but after setting basic chart / controller properties that\r\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\r\n      // https://github.com/chartjs/Chart.js/issues/2807\r\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\r\n      return;\r\n    }\r\n\r\n    animator.listen(this, 'complete', onAnimationsComplete);\r\n    animator.listen(this, 'progress', onAnimationProgress);\r\n\r\n    this._initialize();\r\n    if (this.attached) {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  get aspectRatio() {\r\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\r\n    if (!isNullOrUndef(aspectRatio)) {\r\n      // If aspectRatio is defined in options, use that.\r\n      return aspectRatio;\r\n    }\r\n\r\n    if (maintainAspectRatio && _aspectRatio) {\r\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\r\n      return _aspectRatio;\r\n    }\r\n\r\n    // Calculate\r\n    return height ? width / height : null;\r\n  }\r\n\r\n  get data() {\r\n    return this.config.data;\r\n  }\r\n\r\n  set data(data) {\r\n    this.config.data = data;\r\n  }\r\n\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  set options(options) {\r\n    this.config.options = options;\r\n  }\r\n\r\n  get registry() {\r\n    return registry;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _initialize() {\r\n    // Before init plugin notification\r\n    this.notifyPlugins('beforeInit');\r\n\r\n    if (this.options.responsive) {\r\n      this.resize();\r\n    } else {\r\n      retinaScale(this, this.options.devicePixelRatio);\r\n    }\r\n\r\n    this.bindEvents();\r\n\r\n    // After init plugin notification\r\n    this.notifyPlugins('afterInit');\r\n\r\n    return this;\r\n  }\r\n\r\n  clear() {\r\n    clearCanvas(this.canvas, this.ctx);\r\n    return this;\r\n  }\r\n\r\n  stop() {\r\n    animator.stop(this);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n\t * Resize the chart to its container or to explicit dimensions.\r\n\t * @param {number} [width]\r\n\t * @param {number} [height]\r\n\t */\r\n  resize(width, height) {\r\n    if (!animator.running(this)) {\r\n      this._resize(width, height);\r\n    } else {\r\n      this._resizeBeforeDraw = {width, height};\r\n    }\r\n  }\r\n\r\n  _resize(width, height) {\r\n    const options = this.options;\r\n    const canvas = this.canvas;\r\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\r\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\r\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\r\n    const mode = this.width ? 'resize' : 'attach';\r\n\r\n    this.width = newSize.width;\r\n    this.height = newSize.height;\r\n    this._aspectRatio = this.aspectRatio;\r\n    if (!retinaScale(this, newRatio, true)) {\r\n      return;\r\n    }\r\n\r\n    this.notifyPlugins('resize', {size: newSize});\r\n\r\n    callCallback(options.onResize, [this, newSize], this);\r\n\r\n    if (this.attached) {\r\n      if (this._doResize(mode)) {\r\n        // The resize update is delayed, only draw without updating.\r\n        this.render();\r\n      }\r\n    }\r\n  }\r\n\r\n  ensureScalesHaveIDs() {\r\n    const options = this.options;\r\n    const scalesOptions = options.scales || {};\r\n\r\n    each(scalesOptions, (axisOptions, axisID) => {\r\n      axisOptions.id = axisID;\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * Builds a map of scale ID to scale object for future lookup.\r\n\t */\r\n  buildOrUpdateScales() {\r\n    const options = this.options;\r\n    const scaleOpts = options.scales;\r\n    const scales = this.scales;\r\n    const updated = Object.keys(scales).reduce((obj, id) => {\r\n      obj[id] = false;\r\n      return obj;\r\n    }, {});\r\n    let items = [];\r\n\r\n    if (scaleOpts) {\r\n      items = items.concat(\r\n        Object.keys(scaleOpts).map((id) => {\r\n          const scaleOptions = scaleOpts[id];\r\n          const axis = determineAxis(id, scaleOptions);\r\n          const isRadial = axis === 'r';\r\n          const isHorizontal = axis === 'x';\r\n          return {\r\n            options: scaleOptions,\r\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\r\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\r\n          };\r\n        })\r\n      );\r\n    }\r\n\r\n    each(items, (item) => {\r\n      const scaleOptions = item.options;\r\n      const id = scaleOptions.id;\r\n      const axis = determineAxis(id, scaleOptions);\r\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\r\n\r\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\r\n        scaleOptions.position = item.dposition;\r\n      }\r\n\r\n      updated[id] = true;\r\n      let scale = null;\r\n      if (id in scales && scales[id].type === scaleType) {\r\n        scale = scales[id];\r\n      } else {\r\n        const scaleClass = registry.getScale(scaleType);\r\n        scale = new scaleClass({\r\n          id,\r\n          type: scaleType,\r\n          ctx: this.ctx,\r\n          chart: this\r\n        });\r\n        scales[scale.id] = scale;\r\n      }\r\n\r\n      scale.init(scaleOptions, options);\r\n    });\r\n    // clear up discarded scales\r\n    each(updated, (hasUpdated, id) => {\r\n      if (!hasUpdated) {\r\n        delete scales[id];\r\n      }\r\n    });\r\n\r\n    each(scales, (scale) => {\r\n      layouts.configure(this, scale, scale.options);\r\n      layouts.addBox(this, scale);\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateMetasets() {\r\n    const metasets = this._metasets;\r\n    const numData = this.data.datasets.length;\r\n    const numMeta = metasets.length;\r\n\r\n    metasets.sort((a, b) => a.index - b.index);\r\n    if (numMeta > numData) {\r\n      for (let i = numData; i < numMeta; ++i) {\r\n        this._destroyDatasetMeta(i);\r\n      }\r\n      metasets.splice(numData, numMeta - numData);\r\n    }\r\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _removeUnreferencedMetasets() {\r\n    const {_metasets: metasets, data: {datasets}} = this;\r\n    if (metasets.length > datasets.length) {\r\n      delete this._stacks;\r\n    }\r\n    metasets.forEach((meta, index) => {\r\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\r\n        this._destroyDatasetMeta(index);\r\n      }\r\n    });\r\n  }\r\n\r\n  buildOrUpdateControllers() {\r\n    const newControllers = [];\r\n    const datasets = this.data.datasets;\r\n    let i, ilen;\r\n\r\n    this._removeUnreferencedMetasets();\r\n\r\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\r\n      const dataset = datasets[i];\r\n      let meta = this.getDatasetMeta(i);\r\n      const type = dataset.type || this.config.type;\r\n\r\n      if (meta.type && meta.type !== type) {\r\n        this._destroyDatasetMeta(i);\r\n        meta = this.getDatasetMeta(i);\r\n      }\r\n      meta.type = type;\r\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\r\n      meta.order = dataset.order || 0;\r\n      meta.index = i;\r\n      meta.label = '' + dataset.label;\r\n      meta.visible = this.isDatasetVisible(i);\r\n\r\n      if (meta.controller) {\r\n        meta.controller.updateIndex(i);\r\n        meta.controller.linkScales();\r\n      } else {\r\n        const ControllerClass = registry.getController(type);\r\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\r\n        Object.assign(ControllerClass, {\r\n          dataElementType: registry.getElement(dataElementType),\r\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\r\n        });\r\n        meta.controller = new ControllerClass(this, i);\r\n        newControllers.push(meta.controller);\r\n      }\r\n    }\r\n\r\n    this._updateMetasets();\r\n    return newControllers;\r\n  }\r\n\r\n  /**\r\n\t * Reset the elements of all datasets\r\n\t * @private\r\n\t */\r\n  _resetElements() {\r\n    each(this.data.datasets, (dataset, datasetIndex) => {\r\n      this.getDatasetMeta(datasetIndex).controller.reset();\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n\t* Resets the chart back to its state before the initial animation\r\n\t*/\r\n  reset() {\r\n    this._resetElements();\r\n    this.notifyPlugins('reset');\r\n  }\r\n\r\n  update(mode) {\r\n    const config = this.config;\r\n\r\n    config.update();\r\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\r\n    const animsDisabled = this._animationsDisabled = !options.animation;\r\n\r\n    this._updateScales();\r\n    this._checkEventBindings();\r\n    this._updateHiddenIndices();\r\n\r\n    // plugins options references might have change, let's invalidate the cache\r\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\r\n    this._plugins.invalidate();\r\n\r\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    // Make sure dataset controllers are updated and new controllers are reset\r\n    const newControllers = this.buildOrUpdateControllers();\r\n\r\n    this.notifyPlugins('beforeElementsUpdate');\r\n\r\n    // Make sure all dataset controllers have correct meta data counts\r\n    let minPadding = 0;\r\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\r\n      const {controller} = this.getDatasetMeta(i);\r\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\r\n      // New controllers will be reset after the layout pass, so we only want to modify\r\n      // elements added to new datasets\r\n      controller.buildOrUpdateElements(reset);\r\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\r\n    }\r\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\r\n    this._updateLayout(minPadding);\r\n\r\n    // Only reset the controllers if we have animations\r\n    if (!animsDisabled) {\r\n      // Can only reset the new controllers after the scales have been updated\r\n      // Reset is done to get the starting point for the initial animation\r\n      each(newControllers, (controller) => {\r\n        controller.reset();\r\n      });\r\n    }\r\n\r\n    this._updateDatasets(mode);\r\n\r\n    // Do this before render so that any plugins that need final scale updates can use it\r\n    this.notifyPlugins('afterUpdate', {mode});\r\n\r\n    this._layers.sort(compare2Level('z', '_idx'));\r\n\r\n    // Replay last event from before update, or set hover styles on active elements\r\n    const {_active, _lastEvent} = this;\r\n    if (_lastEvent) {\r\n      this._eventHandler(_lastEvent, true);\r\n    } else if (_active.length) {\r\n      this._updateHoverStyles(_active, _active, true);\r\n    }\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _updateScales() {\r\n    each(this.scales, (scale) => {\r\n      layouts.removeBox(this, scale);\r\n    });\r\n\r\n    this.ensureScalesHaveIDs();\r\n    this.buildOrUpdateScales();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _checkEventBindings() {\r\n    const options = this.options;\r\n    const existingEvents = new Set(Object.keys(this._listeners));\r\n    const newEvents = new Set(options.events);\r\n\r\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\r\n      // The configured events have changed. Rebind.\r\n      this.unbindEvents();\r\n      this.bindEvents();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _updateHiddenIndices() {\r\n    const {_hiddenIndices} = this;\r\n    const changes = this._getUniformDataChanges() || [];\r\n    for (const {method, start, count} of changes) {\r\n      const move = method === '_removeElements' ? -count : count;\r\n      moveNumericKeys(_hiddenIndices, start, move);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _getUniformDataChanges() {\r\n    const _dataChanges = this._dataChanges;\r\n    if (!_dataChanges || !_dataChanges.length) {\r\n      return;\r\n    }\r\n\r\n    this._dataChanges = [];\r\n    const datasetCount = this.data.datasets.length;\r\n    const makeSet = (idx) => new Set(\r\n      _dataChanges\r\n        .filter(c => c[0] === idx)\r\n        .map((c, i) => i + ',' + c.splice(1).join(','))\r\n    );\r\n\r\n    const changeSet = makeSet(0);\r\n    for (let i = 1; i < datasetCount; i++) {\r\n      if (!setsEqual(changeSet, makeSet(i))) {\r\n        return;\r\n      }\r\n    }\r\n    return Array.from(changeSet)\r\n      .map(c => c.split(','))\r\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\r\n  }\r\n\r\n  /**\r\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\r\n\t * hook, in which case, plugins will not be called on `afterLayout`.\r\n\t * @private\r\n\t */\r\n  _updateLayout(minPadding) {\r\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    layouts.update(this, this.width, this.height, minPadding);\r\n\r\n    const area = this.chartArea;\r\n    const noArea = area.width <= 0 || area.height <= 0;\r\n\r\n    this._layers = [];\r\n    each(this.boxes, (box) => {\r\n      if (noArea && box.position === 'chartArea') {\r\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\r\n        return;\r\n      }\r\n\r\n      // configure is called twice, once in core.scale.update and once here.\r\n      // Here the boxes are fully updated and at their final positions.\r\n      if (box.configure) {\r\n        box.configure();\r\n      }\r\n      this._layers.push(...box._layers());\r\n    }, this);\r\n\r\n    this._layers.forEach((item, index) => {\r\n      item._idx = index;\r\n    });\r\n\r\n    this.notifyPlugins('afterLayout');\r\n  }\r\n\r\n  /**\r\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\r\n\t * @private\r\n\t */\r\n  _updateDatasets(mode) {\r\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\r\n      this.getDatasetMeta(i).controller.configure();\r\n    }\r\n\r\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\r\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\r\n    }\r\n\r\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\r\n  }\r\n\r\n  /**\r\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\r\n\t * @private\r\n\t */\r\n  _updateDataset(index, mode) {\r\n    const meta = this.getDatasetMeta(index);\r\n    const args = {meta, index, mode, cancelable: true};\r\n\r\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\r\n      return;\r\n    }\r\n\r\n    meta.controller._update(mode);\r\n\r\n    args.cancelable = false;\r\n    this.notifyPlugins('afterDatasetUpdate', args);\r\n  }\r\n\r\n  render() {\r\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    if (animator.has(this)) {\r\n      if (this.attached && !animator.running(this)) {\r\n        animator.start(this);\r\n      }\r\n    } else {\r\n      this.draw();\r\n      onAnimationsComplete({chart: this});\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    let i;\r\n    if (this._resizeBeforeDraw) {\r\n      const {width, height} = this._resizeBeforeDraw;\r\n      this._resize(width, height);\r\n      this._resizeBeforeDraw = null;\r\n    }\r\n    this.clear();\r\n\r\n    if (this.width <= 0 || this.height <= 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\r\n    // currently be part of layers. Instead, we draw\r\n    // layers <= 0 before(default, backward compat), and the rest after\r\n    const layers = this._layers;\r\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\r\n      layers[i].draw(this.chartArea);\r\n    }\r\n\r\n    this._drawDatasets();\r\n\r\n    // Rest of layers\r\n    for (; i < layers.length; ++i) {\r\n      layers[i].draw(this.chartArea);\r\n    }\r\n\r\n    this.notifyPlugins('afterDraw');\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getSortedDatasetMetas(filterVisible) {\r\n    const metasets = this._sortedMetasets;\r\n    const result = [];\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\r\n      const meta = metasets[i];\r\n      if (!filterVisible || meta.visible) {\r\n        result.push(meta);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n\t * Gets the visible dataset metas in drawing order\r\n\t * @return {object[]}\r\n\t */\r\n  getSortedVisibleDatasetMetas() {\r\n    return this._getSortedDatasetMetas(true);\r\n  }\r\n\r\n  /**\r\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\r\n\t * @private\r\n\t */\r\n  _drawDatasets() {\r\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    const metasets = this.getSortedVisibleDatasetMetas();\r\n    for (let i = metasets.length - 1; i >= 0; --i) {\r\n      this._drawDataset(metasets[i]);\r\n    }\r\n\r\n    this.notifyPlugins('afterDatasetsDraw');\r\n  }\r\n\r\n  /**\r\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\r\n\t * @private\r\n\t */\r\n  _drawDataset(meta) {\r\n    const ctx = this.ctx;\r\n    const clip = meta._clip;\r\n    const useClip = !clip.disabled;\r\n    const area = getDatasetArea(meta) || this.chartArea;\r\n    const args = {\r\n      meta,\r\n      index: meta.index,\r\n      cancelable: true\r\n    };\r\n\r\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\r\n      return;\r\n    }\r\n\r\n    if (useClip) {\r\n      clipArea(ctx, {\r\n        left: clip.left === false ? 0 : area.left - clip.left,\r\n        right: clip.right === false ? this.width : area.right + clip.right,\r\n        top: clip.top === false ? 0 : area.top - clip.top,\r\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\r\n      });\r\n    }\r\n\r\n    meta.controller.draw();\r\n\r\n    if (useClip) {\r\n      unclipArea(ctx);\r\n    }\r\n\r\n    args.cancelable = false;\r\n    this.notifyPlugins('afterDatasetDraw', args);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the given point is in the chart area.\r\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\r\n   * @returns {boolean}\r\n   */\r\n  isPointInArea(point) {\r\n    return _isPointInArea(point, this.chartArea, this._minPadding);\r\n  }\r\n\r\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\r\n    const method = Interaction.modes[mode];\r\n    if (typeof method === 'function') {\r\n      return method(this, e, options, useFinalPosition);\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  getDatasetMeta(datasetIndex) {\r\n    const dataset = this.data.datasets[datasetIndex];\r\n    const metasets = this._metasets;\r\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\r\n\r\n    if (!meta) {\r\n      meta = {\r\n        type: null,\r\n        data: [],\r\n        dataset: null,\r\n        controller: null,\r\n        hidden: null,\t\t\t// See isDatasetVisible() comment\r\n        xAxisID: null,\r\n        yAxisID: null,\r\n        order: dataset && dataset.order || 0,\r\n        index: datasetIndex,\r\n        _dataset: dataset,\r\n        _parsed: [],\r\n        _sorted: false\r\n      };\r\n      metasets.push(meta);\r\n    }\r\n\r\n    return meta;\r\n  }\r\n\r\n  getContext() {\r\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\r\n  }\r\n\r\n  getVisibleDatasetCount() {\r\n    return this.getSortedVisibleDatasetMetas().length;\r\n  }\r\n\r\n  isDatasetVisible(datasetIndex) {\r\n    const dataset = this.data.datasets[datasetIndex];\r\n    if (!dataset) {\r\n      return false;\r\n    }\r\n\r\n    const meta = this.getDatasetMeta(datasetIndex);\r\n\r\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\r\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\r\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\r\n  }\r\n\r\n  setDatasetVisibility(datasetIndex, visible) {\r\n    const meta = this.getDatasetMeta(datasetIndex);\r\n    meta.hidden = !visible;\r\n  }\r\n\r\n  toggleDataVisibility(index) {\r\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\r\n  }\r\n\r\n  getDataVisibility(index) {\r\n    return !this._hiddenIndices[index];\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateVisibility(datasetIndex, dataIndex, visible) {\r\n    const mode = visible ? 'show' : 'hide';\r\n    const meta = this.getDatasetMeta(datasetIndex);\r\n    const anims = meta.controller._resolveAnimations(undefined, mode);\r\n\r\n    if (defined(dataIndex)) {\r\n      meta.data[dataIndex].hidden = !visible;\r\n      this.update();\r\n    } else {\r\n      this.setDatasetVisibility(datasetIndex, visible);\r\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\r\n      anims.update(meta, {visible});\r\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\r\n    }\r\n  }\r\n\r\n  hide(datasetIndex, dataIndex) {\r\n    this._updateVisibility(datasetIndex, dataIndex, false);\r\n  }\r\n\r\n  show(datasetIndex, dataIndex) {\r\n    this._updateVisibility(datasetIndex, dataIndex, true);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _destroyDatasetMeta(datasetIndex) {\r\n    const meta = this._metasets[datasetIndex];\r\n    if (meta && meta.controller) {\r\n      meta.controller._destroy();\r\n    }\r\n    delete this._metasets[datasetIndex];\r\n  }\r\n\r\n  _stop() {\r\n    let i, ilen;\r\n    this.stop();\r\n    animator.remove(this);\r\n\r\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\r\n      this._destroyDatasetMeta(i);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.notifyPlugins('beforeDestroy');\r\n    const {canvas, ctx} = this;\r\n\r\n    this._stop();\r\n    this.config.clearCache();\r\n\r\n    if (canvas) {\r\n      this.unbindEvents();\r\n      clearCanvas(canvas, ctx);\r\n      this.platform.releaseContext(ctx);\r\n      this.canvas = null;\r\n      this.ctx = null;\r\n    }\r\n\r\n    delete instances[this.id];\r\n\r\n    this.notifyPlugins('afterDestroy');\r\n  }\r\n\r\n  toBase64Image(...args) {\r\n    return this.canvas.toDataURL(...args);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  bindEvents() {\r\n    this.bindUserEvents();\r\n    if (this.options.responsive) {\r\n      this.bindResponsiveEvents();\r\n    } else {\r\n      this.attached = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  bindUserEvents() {\r\n    const listeners = this._listeners;\r\n    const platform = this.platform;\r\n\r\n    const _add = (type, listener) => {\r\n      platform.addEventListener(this, type, listener);\r\n      listeners[type] = listener;\r\n    };\r\n\r\n    const listener = (e, x, y) => {\r\n      e.offsetX = x;\r\n      e.offsetY = y;\r\n      this._eventHandler(e);\r\n    };\r\n\r\n    each(this.options.events, (type) => _add(type, listener));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  bindResponsiveEvents() {\r\n    if (!this._responsiveListeners) {\r\n      this._responsiveListeners = {};\r\n    }\r\n    const listeners = this._responsiveListeners;\r\n    const platform = this.platform;\r\n\r\n    const _add = (type, listener) => {\r\n      platform.addEventListener(this, type, listener);\r\n      listeners[type] = listener;\r\n    };\r\n    const _remove = (type, listener) => {\r\n      if (listeners[type]) {\r\n        platform.removeEventListener(this, type, listener);\r\n        delete listeners[type];\r\n      }\r\n    };\r\n\r\n    const listener = (width, height) => {\r\n      if (this.canvas) {\r\n        this.resize(width, height);\r\n      }\r\n    };\r\n\r\n    let detached; // eslint-disable-line prefer-const\r\n    const attached = () => {\r\n      _remove('attach', attached);\r\n\r\n      this.attached = true;\r\n      this.resize();\r\n\r\n      _add('resize', listener);\r\n      _add('detach', detached);\r\n    };\r\n\r\n    detached = () => {\r\n      this.attached = false;\r\n\r\n      _remove('resize', listener);\r\n\r\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\r\n      this._stop();\r\n      this._resize(0, 0);\r\n\r\n      _add('attach', attached);\r\n    };\r\n\r\n    if (platform.isAttached(this.canvas)) {\r\n      attached();\r\n    } else {\r\n      detached();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  unbindEvents() {\r\n    each(this._listeners, (listener, type) => {\r\n      this.platform.removeEventListener(this, type, listener);\r\n    });\r\n    this._listeners = {};\r\n\r\n    each(this._responsiveListeners, (listener, type) => {\r\n      this.platform.removeEventListener(this, type, listener);\r\n    });\r\n    this._responsiveListeners = undefined;\r\n  }\r\n\r\n  updateHoverStyle(items, mode, enabled) {\r\n    const prefix = enabled ? 'set' : 'remove';\r\n    let meta, item, i, ilen;\r\n\r\n    if (mode === 'dataset') {\r\n      meta = this.getDatasetMeta(items[0].datasetIndex);\r\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\r\n    }\r\n\r\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n      item = items[i];\r\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\r\n      if (controller) {\r\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Get active (hovered) elements\r\n\t * @returns array\r\n\t */\r\n  getActiveElements() {\r\n    return this._active || [];\r\n  }\r\n\r\n  /**\r\n\t * Set active (hovered) elements\r\n\t * @param {array} activeElements New active data points\r\n\t */\r\n  setActiveElements(activeElements) {\r\n    const lastActive = this._active || [];\r\n    const active = activeElements.map(({datasetIndex, index}) => {\r\n      const meta = this.getDatasetMeta(datasetIndex);\r\n      if (!meta) {\r\n        throw new Error('No dataset found at index ' + datasetIndex);\r\n      }\r\n\r\n      return {\r\n        datasetIndex,\r\n        element: meta.data[index],\r\n        index,\r\n      };\r\n    });\r\n    const changed = !_elementsEqual(active, lastActive);\r\n\r\n    if (changed) {\r\n      this._active = active;\r\n      // Make sure we don't use the previous mouse event to override the active elements in update.\r\n      this._lastEvent = null;\r\n      this._updateHoverStyles(active, lastActive);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Calls enabled plugins on the specified hook and with the given args.\r\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\r\n\t * returned value can be used, for instance, to interrupt the current action.\r\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\r\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\r\n   * @param {import('./core.plugins').filterCallback} [filter] - Filtering function for limiting which plugins are notified\r\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\r\n\t */\r\n  notifyPlugins(hook, args, filter) {\r\n    return this._plugins.notify(this, hook, args, filter);\r\n  }\r\n\r\n  /**\r\n   * Check if a plugin with the specific ID is registered and enabled\r\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\r\n   * @returns {boolean}\r\n   */\r\n  isPluginEnabled(pluginId) {\r\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateHoverStyles(active, lastActive, replay) {\r\n    const hoverOptions = this.options.hover;\r\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\r\n    const deactivated = diff(lastActive, active);\r\n    const activated = replay ? active : diff(active, lastActive);\r\n\r\n    if (deactivated.length) {\r\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\r\n    }\r\n\r\n    if (activated.length && hoverOptions.mode) {\r\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _eventHandler(e, replay) {\r\n    const args = {\r\n      event: e,\r\n      replay,\r\n      cancelable: true,\r\n      inChartArea: this.isPointInArea(e)\r\n    };\r\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\r\n\r\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\r\n      return;\r\n    }\r\n\r\n    const changed = this._handleEvent(e, replay, args.inChartArea);\r\n\r\n    args.cancelable = false;\r\n    this.notifyPlugins('afterEvent', args, eventFilter);\r\n\r\n    if (changed || args.changed) {\r\n      this.render();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n\t * Handle an event\r\n\t * @param {ChartEvent} e the event to handle\r\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\r\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\r\n\t * @return {boolean} true if the chart needs to re-render\r\n\t * @private\r\n\t */\r\n  _handleEvent(e, replay, inChartArea) {\r\n    const {_active: lastActive = [], options} = this;\r\n\r\n    // If the event is replayed from `update`, we should evaluate with the final positions.\r\n    //\r\n    // The `replay`:\r\n    // It's the last event (excluding click) that has occurred before `update`.\r\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\r\n    //\r\n    // The why:\r\n    // If animations are active, the elements haven't moved yet compared to state before update.\r\n    // But if they will, we are activating the elements that would be active, if this check\r\n    // was done after the animations have completed. => \"final positions\".\r\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\r\n    // This is done so we do not have to evaluate the active elements each animation frame\r\n    // - it would be expensive.\r\n    const useFinalPosition = replay;\r\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\r\n    const isClick = _isClickEvent(e);\r\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\r\n\r\n    if (inChartArea) {\r\n      // Set _lastEvent to null while we are processing the event handlers.\r\n      // This prevents recursion if the handler calls chart.update()\r\n      this._lastEvent = null;\r\n\r\n      // Invoke onHover hook\r\n      callCallback(options.onHover, [e, active, this], this);\r\n\r\n      if (isClick) {\r\n        callCallback(options.onClick, [e, active, this], this);\r\n      }\r\n    }\r\n\r\n    const changed = !_elementsEqual(active, lastActive);\r\n    if (changed || replay) {\r\n      this._active = active;\r\n      this._updateHoverStyles(active, lastActive, replay);\r\n    }\r\n\r\n    this._lastEvent = lastEvent;\r\n\r\n    return changed;\r\n  }\r\n\r\n  /**\r\n   * @param {ChartEvent} e - The event\r\n   * @param {import('../../types').ActiveElement[]} lastActive - Previously active elements\r\n   * @param {boolean} inChartArea - Is the envent inside chartArea\r\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\r\n   * @returns {import('../../types').ActiveElement[]} - The active elements\r\n   * @pravate\r\n   */\r\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\r\n    if (e.type === 'mouseout') {\r\n      return [];\r\n    }\r\n\r\n    if (!inChartArea) {\r\n      // Let user control the active elements outside chartArea. Eg. using Legend.\r\n      return lastActive;\r\n    }\r\n\r\n    const hoverOptions = this.options.hover;\r\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\nfunction invalidatePlugins() {\r\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\r\n}\r\n\r\nexport default Chart;\r\n","/**\r\n * @namespace Chart._adapters\r\n * @since 2.8.0\r\n * @private\r\n */\r\n\r\nimport type {AnyObject} from '../../types/basic';\r\nimport type {ChartOptions} from '../../types';\r\n\r\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\r\n\r\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\r\n  readonly options: T;\r\n  /**\r\n   * Will called with chart options after adapter creation.\r\n   */\r\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\r\n  /**\r\n   * Returns a map of time formats for the supported formatting units defined\r\n   * in Unit as well as 'datetime' representing a detailed date/time string.\r\n   */\r\n  formats(this: DateAdapter<T>): Record<string, string>;\r\n  /**\r\n   * Parses the given `value` and return the associated timestamp.\r\n   * @param value - the value to parse (usually comes from the data)\r\n   * @param [format] - the expected data format\r\n   */\r\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\r\n  /**\r\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\r\n   * @param timestamp - the timestamp to format\r\n   * @param format - the date/time token\r\n   */\r\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\r\n  /**\r\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\r\n   * @param timestamp - the input timestamp\r\n   * @param amount - the amount to add\r\n   * @param unit - the unit as string\r\n   */\r\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\r\n  /**\r\n   * Returns the number of `unit` between the given timestamps.\r\n   * @param a - the input timestamp (reference)\r\n   * @param b - the timestamp to subtract\r\n   * @param unit - the unit as string\r\n   */\r\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\r\n  /**\r\n   * Returns start of `unit` for the given `timestamp`.\r\n   * @param timestamp - the input timestamp\r\n   * @param unit - the unit as string\r\n   * @param [weekday] - the ISO day of the week with 1 being Monday\r\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\r\n   */\r\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\r\n  /**\r\n   * Returns end of `unit` for the given `timestamp`.\r\n   * @param timestamp - the input timestamp\r\n   * @param unit - the unit as string\r\n   */\r\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\r\n}\r\n\r\nfunction abstract<T = void>(): T {\r\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\r\n}\r\n\r\n/**\r\n * Date adapter (current used by the time scale)\r\n * @namespace Chart._adapters._date\r\n * @memberof Chart._adapters\r\n * @private\r\n */\r\nclass DateAdapterBase implements DateAdapter {\r\n\r\n  /**\r\n   * Override default date adapter methods.\r\n   * Accepts type parameter to define options type.\r\n   * @example\r\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\r\n   *   init() {\r\n   *     console.log(this.options.myAdapterOption);\r\n   *   }\r\n   * })\r\n   */\r\n  static override<T extends AnyObject = AnyObject>(\r\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\r\n  ) {\r\n    Object.assign(DateAdapterBase.prototype, members);\r\n  }\r\n\r\n  readonly options: AnyObject;\r\n\r\n  constructor(options: AnyObject) {\r\n    this.options = options || {};\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  init() {}\r\n\r\n  formats(): Record<string, string> {\r\n    return abstract();\r\n  }\r\n\r\n  parse(): number | null {\r\n    return abstract();\r\n  }\r\n\r\n  format(): string {\r\n    return abstract();\r\n  }\r\n\r\n  add(): number {\r\n    return abstract();\r\n  }\r\n\r\n  diff(): number {\r\n    return abstract();\r\n  }\r\n\r\n  startOf(): number {\r\n    return abstract();\r\n  }\r\n\r\n  endOf(): number {\r\n    return abstract();\r\n  }\r\n}\r\n\r\nexport default {\r\n  _date: DateAdapterBase\r\n};\r\n","import DatasetController from '../core/core.datasetController';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  // eslint-disable-next-line no-console\n  console.log('thickness',thickness)\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    // eslint-disable-next-line no-console\n    console.log('thickness',barThickness)\n\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n       // eslint-disable-next-line no-console\n       console.log('maxBarThickness',maxBarThickness)\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController';\r\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core';\r\nimport {formatNumber} from '../helpers/helpers.intl';\r\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math';\r\n\r\n/**\r\n * @typedef { import(\"../core/core.controller\").default } Chart\r\n */\r\n\r\nfunction getRatioAndOffset(rotation, circumference, cutout) {\r\n  let ratioX = 1;\r\n  let ratioY = 1;\r\n  let offsetX = 0;\r\n  let offsetY = 0;\r\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\r\n  if (circumference < TAU) {\r\n    const startAngle = rotation;\r\n    const endAngle = startAngle + circumference;\r\n    const startX = Math.cos(startAngle);\r\n    const startY = Math.sin(startAngle);\r\n    const endX = Math.cos(endAngle);\r\n    const endY = Math.sin(endAngle);\r\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\r\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\r\n    const maxX = calcMax(0, startX, endX);\r\n    const maxY = calcMax(HALF_PI, startY, endY);\r\n    const minX = calcMin(PI, startX, endX);\r\n    const minY = calcMin(PI + HALF_PI, startY, endY);\r\n    ratioX = (maxX - minX) / 2;\r\n    ratioY = (maxY - minY) / 2;\r\n    offsetX = -(maxX + minX) / 2;\r\n    offsetY = -(maxY + minY) / 2;\r\n  }\r\n  return {ratioX, ratioY, offsetX, offsetY};\r\n}\r\n\r\nexport default class DoughnutController extends DatasetController {\r\n\r\n  static id = 'doughnut';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'arc',\r\n    animation: {\r\n      // Boolean - Whether we animate the rotation of the Doughnut\r\n      animateRotate: true,\r\n      // Boolean - Whether we animate scaling the Doughnut from the centre\r\n      animateScale: false\r\n    },\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\r\n      },\r\n    },\r\n    // The percentage of the chart that we cut out of the middle.\r\n    cutout: '50%',\r\n\r\n    // The rotation of the chart, where the first data arc begins.\r\n    rotation: 0,\r\n\r\n    // The total circumference of the chart.\r\n    circumference: 360,\r\n\r\n    // The outr radius of the chart\r\n    radius: '100%',\r\n\r\n    // Spacing between arcs\r\n    spacing: 0,\r\n\r\n    indexAxis: 'r',\r\n  };\r\n\r\n  static descriptors = {\r\n    _scriptable: (name) => name !== 'spacing',\r\n    _indexable: (name) => name !== 'spacing',\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    aspectRatio: 1,\r\n\r\n    // Need to override these to give a nice default\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          generateLabels(chart) {\r\n            const data = chart.data;\r\n            if (data.labels.length && data.datasets.length) {\r\n              const {labels: {pointStyle}} = chart.legend.options;\r\n\r\n              return data.labels.map((label, i) => {\r\n                const meta = chart.getDatasetMeta(0);\r\n                const style = meta.controller.getStyle(i);\r\n\r\n                return {\r\n                  text: label,\r\n                  fillStyle: style.backgroundColor,\r\n                  strokeStyle: style.borderColor,\r\n                  lineWidth: style.borderWidth,\r\n                  pointStyle: pointStyle,\r\n                  hidden: !chart.getDataVisibility(i),\r\n\r\n                  // Extra data used for toggling the correct item\r\n                  index: i\r\n                };\r\n              });\r\n            }\r\n            return [];\r\n          }\r\n        },\r\n\r\n        onClick(e, legendItem, legend) {\r\n          legend.chart.toggleDataVisibility(legendItem.index);\r\n          legend.chart.update();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  constructor(chart, datasetIndex) {\r\n    super(chart, datasetIndex);\r\n\r\n    this.enableOptionSharing = true;\r\n    this.innerRadius = undefined;\r\n    this.outerRadius = undefined;\r\n    this.offsetX = undefined;\r\n    this.offsetY = undefined;\r\n  }\r\n\r\n  linkScales() {}\r\n\r\n  /**\r\n\t * Override data parsing, since we are not using scales\r\n\t */\r\n  parse(start, count) {\r\n    const data = this.getDataset().data;\r\n    const meta = this._cachedMeta;\r\n\r\n    if (this._parsing === false) {\r\n      meta._parsed = data;\r\n    } else {\r\n      let getter = (i) => +data[i];\r\n\r\n      if (isObject(data[start])) {\r\n        const {key = 'value'} = this._parsing;\r\n        getter = (i) => +resolveObjectKey(data[i], key);\r\n      }\r\n\r\n      let i, ilen;\r\n      for (i = start, ilen = start + count; i < ilen; ++i) {\r\n        meta._parsed[i] = getter(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRotation() {\r\n    return toRadians(this.options.rotation - 90);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getCircumference() {\r\n    return toRadians(this.options.circumference);\r\n  }\r\n\r\n  /**\r\n\t * Get the maximal rotation & circumference extents\r\n\t * across all visible datasets.\r\n\t */\r\n  _getRotationExtents() {\r\n    let min = TAU;\r\n    let max = -TAU;\r\n\r\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\r\n      if (this.chart.isDatasetVisible(i)) {\r\n        const controller = this.chart.getDatasetMeta(i).controller;\r\n        const rotation = controller._getRotation();\r\n        const circumference = controller._getCircumference();\r\n\r\n        min = Math.min(min, rotation);\r\n        max = Math.max(max, rotation + circumference);\r\n      }\r\n    }\r\n\r\n    return {\r\n      rotation: min,\r\n      circumference: max - min,\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {string} mode\r\n\t */\r\n  update(mode) {\r\n    const chart = this.chart;\r\n    const {chartArea} = chart;\r\n    const meta = this._cachedMeta;\r\n    const arcs = meta.data;\r\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\r\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\r\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\r\n    const chartWeight = this._getRingWeight(this.index);\r\n\r\n    // Compute the maximal rotation & circumference limits.\r\n    // If we only consider our dataset, this can cause problems when two datasets\r\n    // are both less than a circle with different rotations (starting angles)\r\n    const {circumference, rotation} = this._getRotationExtents();\r\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\r\n    const maxWidth = (chartArea.width - spacing) / ratioX;\r\n    const maxHeight = (chartArea.height - spacing) / ratioY;\r\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\r\n    const outerRadius = toDimension(this.options.radius, maxRadius);\r\n    const innerRadius = Math.max(outerRadius * cutout, 0);\r\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\r\n    this.offsetX = offsetX * outerRadius;\r\n    this.offsetY = offsetY * outerRadius;\r\n\r\n    meta.total = this.calculateTotal();\r\n\r\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\r\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\r\n\r\n    this.updateElements(arcs, 0, arcs.length, mode);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _circumference(i, reset) {\r\n    const opts = this.options;\r\n    const meta = this._cachedMeta;\r\n    const circumference = this._getCircumference();\r\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\r\n      return 0;\r\n    }\r\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\r\n  }\r\n\r\n  updateElements(arcs, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const chart = this.chart;\r\n    const chartArea = chart.chartArea;\r\n    const opts = chart.options;\r\n    const animationOpts = opts.animation;\r\n    const centerX = (chartArea.left + chartArea.right) / 2;\r\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\r\n    const animateScale = reset && animationOpts.animateScale;\r\n    const innerRadius = animateScale ? 0 : this.innerRadius;\r\n    const outerRadius = animateScale ? 0 : this.outerRadius;\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n    let startAngle = this._getRotation();\r\n    let i;\r\n\r\n    for (i = 0; i < start; ++i) {\r\n      startAngle += this._circumference(i, reset);\r\n    }\r\n\r\n    for (i = start; i < start + count; ++i) {\r\n      const circumference = this._circumference(i, reset);\r\n      const arc = arcs[i];\r\n      const properties = {\r\n        x: centerX + this.offsetX,\r\n        y: centerY + this.offsetY,\r\n        startAngle,\r\n        endAngle: startAngle + circumference,\r\n        circumference,\r\n        outerRadius,\r\n        innerRadius\r\n      };\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\r\n      }\r\n      startAngle += circumference;\r\n\r\n      this.updateElement(arc, i, properties, mode);\r\n    }\r\n  }\r\n\r\n  calculateTotal() {\r\n    const meta = this._cachedMeta;\r\n    const metaData = meta.data;\r\n    let total = 0;\r\n    let i;\r\n\r\n    for (i = 0; i < metaData.length; i++) {\r\n      const value = meta._parsed[i];\r\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\r\n        total += Math.abs(value);\r\n      }\r\n    }\r\n\r\n    return total;\r\n  }\r\n\r\n  calculateCircumference(value) {\r\n    const total = this._cachedMeta.total;\r\n    if (total > 0 && !isNaN(value)) {\r\n      return TAU * (Math.abs(value) / total);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const chart = this.chart;\r\n    const labels = chart.data.labels || [];\r\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value,\r\n    };\r\n  }\r\n\r\n  getMaxBorderWidth(arcs) {\r\n    let max = 0;\r\n    const chart = this.chart;\r\n    let i, ilen, meta, controller, options;\r\n\r\n    if (!arcs) {\r\n      // Find the outmost visible dataset\r\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\r\n        if (chart.isDatasetVisible(i)) {\r\n          meta = chart.getDatasetMeta(i);\r\n          arcs = meta.data;\r\n          controller = meta.controller;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!arcs) {\r\n      return 0;\r\n    }\r\n\r\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\r\n      options = controller.resolveDataElementOptions(i);\r\n      if (options.borderAlign !== 'inner') {\r\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\r\n      }\r\n    }\r\n    return max;\r\n  }\r\n\r\n  getMaxOffset(arcs) {\r\n    let max = 0;\r\n\r\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\r\n      const options = this.resolveDataElementOptions(i);\r\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\r\n    }\r\n    return max;\r\n  }\r\n\r\n  /**\r\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\r\n\t * @private\r\n\t */\r\n  _getRingWeightOffset(datasetIndex) {\r\n    let ringWeightOffset = 0;\r\n\r\n    for (let i = 0; i < datasetIndex; ++i) {\r\n      if (this.chart.isDatasetVisible(i)) {\r\n        ringWeightOffset += this._getRingWeight(i);\r\n      }\r\n    }\r\n\r\n    return ringWeightOffset;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRingWeight(datasetIndex) {\r\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\r\n  }\r\n\r\n  /**\r\n\t * Returns the sum of all visible data set weights.\r\n\t * @private\r\n\t */\r\n  _getVisibleDatasetWeightTotal() {\r\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController';\r\nimport {valueOrDefault} from '../helpers/helpers.core';\r\n\r\nexport default class BubbleController extends DatasetController {\r\n\r\n  static id = 'bubble';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'point',\r\n\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'borderWidth', 'radius']\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    scales: {\r\n      x: {\r\n        type: 'linear'\r\n      },\r\n      y: {\r\n        type: 'linear'\r\n      }\r\n    }\r\n  };\r\n\r\n  initialize() {\r\n    this.enableOptionSharing = true;\r\n    super.initialize();\r\n  }\r\n\r\n  /**\r\n\t * Parse array of primitive values\r\n\t * @protected\r\n\t */\r\n  parsePrimitiveData(meta, data, start, count) {\r\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\r\n    for (let i = 0; i < parsed.length; i++) {\r\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of arrays\r\n\t * @protected\r\n\t */\r\n  parseArrayData(meta, data, start, count) {\r\n    const parsed = super.parseArrayData(meta, data, start, count);\r\n    for (let i = 0; i < parsed.length; i++) {\r\n      const item = data[start + i];\r\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of objects\r\n\t * @protected\r\n\t */\r\n  parseObjectData(meta, data, start, count) {\r\n    const parsed = super.parseObjectData(meta, data, start, count);\r\n    for (let i = 0; i < parsed.length; i++) {\r\n      const item = data[start + i];\r\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    const data = this._cachedMeta.data;\r\n\r\n    let max = 0;\r\n    for (let i = data.length - 1; i >= 0; --i) {\r\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\r\n    }\r\n    return max > 0 && max;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const labels = this.chart.data.labels || [];\r\n    const {xScale, yScale} = meta;\r\n    const parsed = this.getParsed(index);\r\n    const x = xScale.getLabelForValue(parsed.x);\r\n    const y = yScale.getLabelForValue(parsed.y);\r\n    const r = parsed._custom;\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\r\n    };\r\n  }\r\n\r\n  update(mode) {\r\n    const points = this._cachedMeta.data;\r\n\r\n    // Update Points\r\n    this.updateElements(points, 0, points.length, mode);\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {iScale, vScale} = this._cachedMeta;\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n\r\n    for (let i = start; i < start + count; i++) {\r\n      const point = points[i];\r\n      const parsed = !reset && this.getParsed(i);\r\n      const properties = {};\r\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\r\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\r\n\r\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n\r\n        if (reset) {\r\n          properties.options.radius = 0;\r\n        }\r\n      }\r\n\r\n      this.updateElement(point, i, properties, mode);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @param {number} index\r\n\t * @param {string} [mode]\r\n\t * @protected\r\n\t */\r\n  resolveDataElementOptions(index, mode) {\r\n    const parsed = this.getParsed(index);\r\n    let values = super.resolveDataElementOptions(index, mode);\r\n\r\n    // In case values were cached (and thus frozen), we need to clone the values\r\n    if (values.$shared) {\r\n      values = Object.assign({}, values, {$shared: false});\r\n    }\r\n\r\n    // Custom radius resolution\r\n    const radius = values.radius;\r\n    if (mode !== 'active') {\r\n      values.radius = 0;\r\n    }\r\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\r\n\r\n    return values;\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController';\r\nimport {isNullOrUndef} from '../helpers';\r\nimport {isNumber} from '../helpers/helpers.math';\r\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras';\r\n\r\nexport default class LineController extends DatasetController {\r\n\r\n  static id = 'line';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: 'line',\r\n    dataElementType: 'point',\r\n\r\n    showLine: true,\r\n    spanGaps: false,\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    scales: {\r\n      _index_: {\r\n        type: 'category',\r\n      },\r\n      _value_: {\r\n        type: 'linear',\r\n      },\r\n    }\r\n  };\r\n\r\n  initialize() {\r\n    this.enableOptionSharing = true;\r\n    this.supportsDecimation = true;\r\n    super.initialize();\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    const {dataset: line, data: points = [], _dataset} = meta;\r\n    // @ts-ignore\r\n    const animationsDisabled = this.chart._animationsDisabled;\r\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\r\n\r\n    this._drawStart = start;\r\n    this._drawCount = count;\r\n\r\n    if (_scaleRangesChanged(meta)) {\r\n      start = 0;\r\n      count = points.length;\r\n    }\r\n\r\n    // Update Line\r\n    line._chart = this.chart;\r\n    line._datasetIndex = this.index;\r\n    line._decimated = !!_dataset._decimated;\r\n    line.points = points;\r\n\r\n    const options = this.resolveDatasetElementOptions(mode);\r\n    if (!this.options.showLine) {\r\n      options.borderWidth = 0;\r\n    }\r\n    options.segment = this.options.segment;\r\n    this.updateElement(line, undefined, {\r\n      animated: !animationsDisabled,\r\n      options\r\n    }, mode);\r\n\r\n    // Update Points\r\n    this.updateElements(points, start, count, mode);\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n    const {spanGaps, segment} = this.options;\r\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\r\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\r\n    const end = start + count;\r\n    const pointsCount = points.length;\r\n    let prevParsed = start > 0 && this.getParsed(start - 1);\r\n\r\n    for (let i = 0; i < pointsCount; ++i) {\r\n      const point = points[i];\r\n      const properties = directUpdate ? point : {};\r\n\r\n      if (i < start || i >= end) {\r\n        properties.skip = true;\r\n        continue;\r\n      }\r\n\r\n      const parsed = this.getParsed(i);\r\n      const nullData = isNullOrUndef(parsed[vAxis]);\r\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\r\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\r\n\r\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\r\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\r\n      if (segment) {\r\n        properties.parsed = parsed;\r\n        properties.raw = _dataset.data[i];\r\n      }\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n      }\r\n\r\n      if (!directUpdate) {\r\n        this.updateElement(point, i, properties, mode);\r\n      }\r\n\r\n      prevParsed = parsed;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    const meta = this._cachedMeta;\r\n    const dataset = meta.dataset;\r\n    const border = dataset.options && dataset.options.borderWidth || 0;\r\n    const data = meta.data || [];\r\n    if (!data.length) {\r\n      return border;\r\n    }\r\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\r\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\r\n    return Math.max(border, firstPoint, lastPoint) / 2;\r\n  }\r\n\r\n  draw() {\r\n    const meta = this._cachedMeta;\r\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\r\n    super.draw();\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController';\r\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index';\r\n\r\nexport default class PolarAreaController extends DatasetController {\r\n\r\n  static id = 'polarArea';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    dataElementType: 'arc',\r\n    animation: {\r\n      animateRotate: true,\r\n      animateScale: true\r\n    },\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\r\n      },\r\n    },\r\n    indexAxis: 'r',\r\n    startAngle: 0,\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    aspectRatio: 1,\r\n\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          generateLabels(chart) {\r\n            const data = chart.data;\r\n            if (data.labels.length && data.datasets.length) {\r\n              const {labels: {pointStyle}} = chart.legend.options;\r\n\r\n              return data.labels.map((label, i) => {\r\n                const meta = chart.getDatasetMeta(0);\r\n                const style = meta.controller.getStyle(i);\r\n\r\n                return {\r\n                  text: label,\r\n                  fillStyle: style.backgroundColor,\r\n                  strokeStyle: style.borderColor,\r\n                  lineWidth: style.borderWidth,\r\n                  pointStyle: pointStyle,\r\n                  hidden: !chart.getDataVisibility(i),\r\n\r\n                  // Extra data used for toggling the correct item\r\n                  index: i\r\n                };\r\n              });\r\n            }\r\n            return [];\r\n          }\r\n        },\r\n\r\n        onClick(e, legendItem, legend) {\r\n          legend.chart.toggleDataVisibility(legendItem.index);\r\n          legend.chart.update();\r\n        }\r\n      }\r\n    },\r\n\r\n    scales: {\r\n      r: {\r\n        type: 'radialLinear',\r\n        angleLines: {\r\n          display: false\r\n        },\r\n        beginAtZero: true,\r\n        grid: {\r\n          circular: true\r\n        },\r\n        pointLabels: {\r\n          display: false\r\n        },\r\n        startAngle: 0\r\n      }\r\n    }\r\n  };\r\n\r\n  constructor(chart, datasetIndex) {\r\n    super(chart, datasetIndex);\r\n\r\n    this.innerRadius = undefined;\r\n    this.outerRadius = undefined;\r\n  }\r\n\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const chart = this.chart;\r\n    const labels = chart.data.labels || [];\r\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value,\r\n    };\r\n  }\r\n\r\n  parseObjectData(meta, data, start, count) {\r\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\r\n  }\r\n\r\n  update(mode) {\r\n    const arcs = this._cachedMeta.data;\r\n\r\n    this._updateRadius();\r\n    this.updateElements(arcs, 0, arcs.length, mode);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  getMinMax() {\r\n    const meta = this._cachedMeta;\r\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\r\n\r\n    meta.data.forEach((element, index) => {\r\n      const parsed = this.getParsed(index).r;\r\n\r\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\r\n        if (parsed < range.min) {\r\n          range.min = parsed;\r\n        }\r\n\r\n        if (parsed > range.max) {\r\n          range.max = parsed;\r\n        }\r\n      }\r\n    });\r\n\r\n    return range;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateRadius() {\r\n    const chart = this.chart;\r\n    const chartArea = chart.chartArea;\r\n    const opts = chart.options;\r\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\r\n\r\n    const outerRadius = Math.max(minSize / 2, 0);\r\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\r\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\r\n\r\n    this.outerRadius = outerRadius - (radiusLength * this.index);\r\n    this.innerRadius = this.outerRadius - radiusLength;\r\n  }\r\n\r\n  updateElements(arcs, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const chart = this.chart;\r\n    const opts = chart.options;\r\n    const animationOpts = opts.animation;\r\n    const scale = this._cachedMeta.rScale;\r\n    const centerX = scale.xCenter;\r\n    const centerY = scale.yCenter;\r\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\r\n    let angle = datasetStartAngle;\r\n    let i;\r\n\r\n    const defaultAngle = 360 / this.countVisibleElements();\r\n\r\n    for (i = 0; i < start; ++i) {\r\n      angle += this._computeAngle(i, mode, defaultAngle);\r\n    }\r\n    for (i = start; i < start + count; i++) {\r\n      const arc = arcs[i];\r\n      let startAngle = angle;\r\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\r\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\r\n      angle = endAngle;\r\n\r\n      if (reset) {\r\n        if (animationOpts.animateScale) {\r\n          outerRadius = 0;\r\n        }\r\n        if (animationOpts.animateRotate) {\r\n          startAngle = endAngle = datasetStartAngle;\r\n        }\r\n      }\r\n\r\n      const properties = {\r\n        x: centerX,\r\n        y: centerY,\r\n        innerRadius: 0,\r\n        outerRadius,\r\n        startAngle,\r\n        endAngle,\r\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\r\n      };\r\n\r\n      this.updateElement(arc, i, properties, mode);\r\n    }\r\n  }\r\n\r\n  countVisibleElements() {\r\n    const meta = this._cachedMeta;\r\n    let count = 0;\r\n\r\n    meta.data.forEach((element, index) => {\r\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\r\n        count++;\r\n      }\r\n    });\r\n\r\n    return count;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeAngle(index, mode, defaultAngle) {\r\n    return this.chart.getDataVisibility(index)\r\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\r\n      : 0;\r\n  }\r\n}\r\n","import DoughnutController from './controller.doughnut';\r\n\r\n// Pie charts are Doughnut chart with different defaults\r\nexport default class PieController extends DoughnutController {\r\n\r\n  static id = 'pie';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    // The percentage of the chart that we cut out of the middle.\r\n    cutout: 0,\r\n\r\n    // The rotation of the chart, where the first data arc begins.\r\n    rotation: 0,\r\n\r\n    // The total circumference of the chart.\r\n    circumference: 360,\r\n\r\n    // The outr radius of the chart\r\n    radius: '100%'\r\n  };\r\n}\r\n","import DatasetController from '../core/core.datasetController';\r\nimport {_parseObjectDataRadialScale} from '../helpers/index';\r\n\r\nexport default class RadarController extends DatasetController {\r\n\r\n  static id = 'radar';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: 'line',\r\n    dataElementType: 'point',\r\n    indexAxis: 'r',\r\n    showLine: true,\r\n    elements: {\r\n      line: {\r\n        fill: 'start'\r\n      }\r\n    },\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    aspectRatio: 1,\r\n\r\n    scales: {\r\n      r: {\r\n        type: 'radialLinear',\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const vScale = this._cachedMeta.vScale;\r\n    const parsed = this.getParsed(index);\r\n\r\n    return {\r\n      label: vScale.getLabels()[index],\r\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\r\n    };\r\n  }\r\n\r\n  parseObjectData(meta, data, start, count) {\r\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    const line = meta.dataset;\r\n    const points = meta.data || [];\r\n    const labels = meta.iScale.getLabels();\r\n\r\n    // Update Line\r\n    line.points = points;\r\n    // In resize mode only point locations change, so no need to set the points or options.\r\n    if (mode !== 'resize') {\r\n      const options = this.resolveDatasetElementOptions(mode);\r\n      if (!this.options.showLine) {\r\n        options.borderWidth = 0;\r\n      }\r\n\r\n      const properties = {\r\n        _loop: true,\r\n        _fullLoop: labels.length === points.length,\r\n        options\r\n      };\r\n\r\n      this.updateElement(line, undefined, properties, mode);\r\n    }\r\n\r\n    // Update Points\r\n    this.updateElements(points, 0, points.length, mode);\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const scale = this._cachedMeta.rScale;\r\n    const reset = mode === 'reset';\r\n\r\n    for (let i = start; i < start + count; i++) {\r\n      const point = points[i];\r\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\r\n\r\n      const x = reset ? scale.xCenter : pointPosition.x;\r\n      const y = reset ? scale.yCenter : pointPosition.y;\r\n\r\n      const properties = {\r\n        x,\r\n        y,\r\n        angle: pointPosition.angle,\r\n        skip: isNaN(x) || isNaN(y),\r\n        options\r\n      };\r\n\r\n      this.updateElement(point, i, properties, mode);\r\n    }\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController';\r\nimport {isNullOrUndef} from '../helpers';\r\nimport {isNumber} from '../helpers/helpers.math';\r\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras';\r\n\r\nexport default class ScatterController extends DatasetController {\r\n\r\n  static id = 'scatter';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'point',\r\n    showLine: false,\r\n    fill: false\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n\r\n    interaction: {\r\n      mode: 'point'\r\n    },\r\n\r\n    scales: {\r\n      x: {\r\n        type: 'linear'\r\n      },\r\n      y: {\r\n        type: 'linear'\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const labels = this.chart.data.labels || [];\r\n    const {xScale, yScale} = meta;\r\n    const parsed = this.getParsed(index);\r\n    const x = xScale.getLabelForValue(parsed.x);\r\n    const y = yScale.getLabelForValue(parsed.y);\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value: '(' + x + ', ' + y + ')'\r\n    };\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    const {data: points = []} = meta;\r\n    // @ts-ignore\r\n    const animationsDisabled = this.chart._animationsDisabled;\r\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\r\n\r\n    this._drawStart = start;\r\n    this._drawCount = count;\r\n\r\n    if (_scaleRangesChanged(meta)) {\r\n      start = 0;\r\n      count = points.length;\r\n    }\r\n\r\n    if (this.options.showLine) {\r\n\r\n      const {dataset: line, _dataset} = meta;\r\n\r\n      // Update Line\r\n      line._chart = this.chart;\r\n      line._datasetIndex = this.index;\r\n      line._decimated = !!_dataset._decimated;\r\n      line.points = points;\r\n\r\n      const options = this.resolveDatasetElementOptions(mode);\r\n      options.segment = this.options.segment;\r\n      this.updateElement(line, undefined, {\r\n        animated: !animationsDisabled,\r\n        options\r\n      }, mode);\r\n    }\r\n\r\n    // Update Points\r\n    this.updateElements(points, start, count, mode);\r\n  }\r\n\r\n  addElements() {\r\n    const {showLine} = this.options;\r\n\r\n    if (!this.datasetElementType && showLine) {\r\n      this.datasetElementType = this.chart.registry.getElement('line');\r\n    }\r\n\r\n    super.addElements();\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\r\n    const firstOpts = this.resolveDataElementOptions(start, mode);\r\n    const sharedOptions = this.getSharedOptions(firstOpts);\r\n    const includeOptions = this.includeOptions(mode, sharedOptions);\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n    const {spanGaps, segment} = this.options;\r\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\r\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\r\n    let prevParsed = start > 0 && this.getParsed(start - 1);\r\n\r\n    for (let i = start; i < start + count; ++i) {\r\n      const point = points[i];\r\n      const parsed = this.getParsed(i);\r\n      const properties = directUpdate ? point : {};\r\n      const nullData = isNullOrUndef(parsed[vAxis]);\r\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\r\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\r\n\r\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\r\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\r\n      if (segment) {\r\n        properties.parsed = parsed;\r\n        properties.raw = _dataset.data[i];\r\n      }\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n      }\r\n\r\n      if (!directUpdate) {\r\n        this.updateElement(point, i, properties, mode);\r\n      }\r\n\r\n      prevParsed = parsed;\r\n    }\r\n\r\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    const meta = this._cachedMeta;\r\n    const data = meta.data || [];\r\n\r\n    if (!this.options.showLine) {\r\n      let max = 0;\r\n      for (let i = data.length - 1; i >= 0; --i) {\r\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\r\n      }\r\n      return max > 0 && max;\r\n    }\r\n\r\n    const dataset = meta.dataset;\r\n    const border = dataset.options && dataset.options.borderWidth || 0;\r\n\r\n    if (!data.length) {\r\n      return border;\r\n    }\r\n\r\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\r\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\r\n    return Math.max(border, firstPoint, lastPoint) / 2;\r\n  }\r\n}\r\n","import Element from '../core/core.element';\r\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index';\r\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math';\r\nimport {_readValueToProps} from '../helpers/helpers.options';\r\nimport type {ArcOptions, Point} from '../../types';\r\n\r\n\r\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\r\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\r\n  let angleMargin = pixelMargin / outerRadius;\r\n\r\n  // Draw an inner border by clipping the arc and drawing a double-width border\r\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\r\n  if (innerRadius > pixelMargin) {\r\n    angleMargin = pixelMargin / innerRadius;\r\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\r\n  } else {\r\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\r\n  }\r\n  ctx.closePath();\r\n  ctx.clip();\r\n}\r\n\r\nfunction toRadiusCorners(value) {\r\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\r\n}\r\n\r\n/**\r\n * Parse border radius from the provided options\r\n */\r\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\r\n  const o = toRadiusCorners(arc.options.borderRadius);\r\n  const halfThickness = (outerRadius - innerRadius) / 2;\r\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\r\n\r\n  // Outer limits are complicated. We want to compute the available angular distance at\r\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\r\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\r\n  //\r\n  // If the borderRadius is large, that value can become negative.\r\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\r\n  // we know that the thickness term will dominate and compute the limits at that point\r\n  const computeOuterLimit = (val) => {\r\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\r\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\r\n  };\r\n\r\n  return {\r\n    outerStart: computeOuterLimit(o.outerStart),\r\n    outerEnd: computeOuterLimit(o.outerEnd),\r\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\r\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\r\n  };\r\n}\r\n\r\n/**\r\n * Convert (r, 𝜃) to (x, y)\r\n */\r\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\r\n  return {\r\n    x: x + r * Math.cos(theta),\r\n    y: y + r * Math.sin(theta),\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Path the arc, respecting the border radius\r\n *\r\n * 8 points of interest exist around the arc segment.\r\n * These points define the intersection of the arc edges and the corners.\r\n *\r\n *   Start      End\r\n *\r\n *    1---------2    Outer\r\n *   /           \\\r\n *   8           3\r\n *   |           |\r\n *   |           |\r\n *   7           4\r\n *   \\           /\r\n *    6---------5    Inner\r\n */\r\nfunction pathArc(\r\n  ctx: CanvasRenderingContext2D,\r\n  element: ArcElement,\r\n  offset: number,\r\n  spacing: number,\r\n  end: number,\r\n  circular: boolean,\r\n) {\r\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\r\n\r\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\r\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\r\n\r\n  let spacingOffset = 0;\r\n  const alpha = end - start;\r\n\r\n  if (spacing) {\r\n    // When spacing is present, it is the same for all items\r\n    // So we adjust the start and end angle of the arc such that\r\n    // the distance is the same as it would be without the spacing\r\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\r\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\r\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\r\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\r\n    spacingOffset = (alpha - adjustedAngle) / 2;\r\n  }\r\n\r\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\r\n  const angleOffset = (alpha - beta) / 2;\r\n  const startAngle = start + angleOffset + spacingOffset;\r\n  const endAngle = end - angleOffset - spacingOffset;\r\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\r\n\r\n  const outerStartAdjustedRadius = outerRadius - outerStart;\r\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\r\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\r\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\r\n\r\n  const innerStartAdjustedRadius = innerRadius + innerStart;\r\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\r\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\r\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\r\n\r\n  ctx.beginPath();\r\n\r\n  if (circular) {\r\n    // The first arc segment from point 1 to point 2\r\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);\r\n\r\n    // The corner segment from point 2 to point 3\r\n    if (outerEnd > 0) {\r\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\r\n    }\r\n\r\n    // The line from point 3 to point 4\r\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\r\n    ctx.lineTo(p4.x, p4.y);\r\n\r\n    // The corner segment from point 4 to point 5\r\n    if (innerEnd > 0) {\r\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\r\n    }\r\n\r\n    // The inner arc from point 5 to point 6\r\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);\r\n\r\n    // The corner segment from point 6 to point 7\r\n    if (innerStart > 0) {\r\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\r\n    }\r\n\r\n    // The line from point 7 to point 8\r\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\r\n    ctx.lineTo(p8.x, p8.y);\r\n\r\n    // The corner segment from point 8 to point 1\r\n    if (outerStart > 0) {\r\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\r\n    }\r\n  } else {\r\n    ctx.moveTo(x, y);\r\n\r\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\r\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\r\n    ctx.lineTo(outerStartX, outerStartY);\r\n\r\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\r\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\r\n    ctx.lineTo(outerEndX, outerEndY);\r\n  }\r\n\r\n  ctx.closePath();\r\n}\r\n\r\nfunction drawArc(\r\n  ctx: CanvasRenderingContext2D,\r\n  element: ArcElement,\r\n  offset: number,\r\n  spacing: number,\r\n  circular: boolean,\r\n) {\r\n  const {fullCircles, startAngle, circumference} = element;\r\n  let endAngle = element.endAngle;\r\n  if (fullCircles) {\r\n    pathArc(ctx, element, offset, spacing, startAngle + TAU, circular);\r\n\r\n    for (let i = 0; i < fullCircles; ++i) {\r\n      ctx.fill();\r\n    }\r\n\r\n    if (!isNaN(circumference)) {\r\n      endAngle = startAngle + circumference % TAU;\r\n      if (circumference % TAU === 0) {\r\n        endAngle += TAU;\r\n      }\r\n    }\r\n  }\r\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n  ctx.fill();\r\n  return endAngle;\r\n}\r\n\r\nfunction drawFullCircleBorders(ctx: CanvasRenderingContext2D, element: ArcElement, inner: boolean) {\r\n  const {x, y, startAngle, pixelMargin, fullCircles} = element;\r\n  const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);\r\n  const innerRadius = element.innerRadius + pixelMargin;\r\n\r\n  let i;\r\n\r\n  if (inner) {\r\n    clipArc(ctx, element, startAngle + TAU);\r\n  }\r\n\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, innerRadius, startAngle + TAU, startAngle, true);\r\n  for (i = 0; i < fullCircles; ++i) {\r\n    ctx.stroke();\r\n  }\r\n\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, outerRadius, startAngle, startAngle + TAU);\r\n  for (i = 0; i < fullCircles; ++i) {\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nfunction drawBorder(\r\n  ctx: CanvasRenderingContext2D,\r\n  element: ArcElement,\r\n  offset: number,\r\n  spacing: number,\r\n  endAngle: number,\r\n  circular: boolean,\r\n) {\r\n  const {options} = element;\r\n  const {borderWidth, borderJoinStyle} = options;\r\n  const inner = options.borderAlign === 'inner';\r\n\r\n  if (!borderWidth) {\r\n    return;\r\n  }\r\n\r\n  if (inner) {\r\n    ctx.lineWidth = borderWidth * 2;\r\n    ctx.lineJoin = borderJoinStyle || 'round';\r\n  } else {\r\n    ctx.lineWidth = borderWidth;\r\n    ctx.lineJoin = borderJoinStyle || 'bevel';\r\n  }\r\n\r\n  if (element.fullCircles) {\r\n    drawFullCircleBorders(ctx, element, inner);\r\n  }\r\n\r\n  if (inner) {\r\n    clipArc(ctx, element, endAngle);\r\n  }\r\n\r\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n  ctx.stroke();\r\n}\r\n\r\nexport interface ArcProps extends Point {\r\n  startAngle: number;\r\n  endAngle: number;\r\n  innerRadius: number;\r\n  outerRadius: number;\r\n  circumference: number;\r\n}\r\n\r\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\r\n\r\n  static id = 'arc';\r\n\r\n  static defaults = {\r\n    borderAlign: 'center',\r\n    borderColor: '#fff',\r\n    borderJoinStyle: undefined,\r\n    borderRadius: 0,\r\n    borderWidth: 2,\r\n    offset: 0,\r\n    spacing: 0,\r\n    angle: undefined,\r\n    circular: true,\r\n  };\r\n\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor'\r\n  };\r\n\r\n  circumference: number;\r\n  endAngle: number;\r\n  fullCircles: number;\r\n  innerRadius: number;\r\n  outerRadius: number;\r\n  pixelMargin: number;\r\n  startAngle: number;\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.options = undefined;\r\n    this.circumference = undefined;\r\n    this.startAngle = undefined;\r\n    this.endAngle = undefined;\r\n    this.innerRadius = undefined;\r\n    this.outerRadius = undefined;\r\n    this.pixelMargin = 0;\r\n    this.fullCircles = 0;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\r\n    const point = this.getProps(['x', 'y'], useFinalPosition);\r\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\r\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\r\n      'startAngle',\r\n      'endAngle',\r\n      'innerRadius',\r\n      'outerRadius',\r\n      'circumference'\r\n    ], useFinalPosition);\r\n    const rAdjust = this.options.spacing / 2;\r\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\r\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\r\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\r\n\r\n    return (betweenAngles && withinRadius);\r\n  }\r\n\r\n  getCenterPoint(useFinalPosition: boolean) {\r\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\r\n      'x',\r\n      'y',\r\n      'startAngle',\r\n      'endAngle',\r\n      'innerRadius',\r\n      'outerRadius',\r\n      'circumference',\r\n    ], useFinalPosition);\r\n    const {offset, spacing} = this.options;\r\n    const halfAngle = (startAngle + endAngle) / 2;\r\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\r\n    return {\r\n      x: x + Math.cos(halfAngle) * halfRadius,\r\n      y: y + Math.sin(halfAngle) * halfRadius\r\n    };\r\n  }\r\n\r\n  tooltipPosition(useFinalPosition: boolean) {\r\n    return this.getCenterPoint(useFinalPosition);\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    const {options, circumference} = this;\r\n    const offset = (options.offset || 0) / 4;\r\n    const spacing = (options.spacing || 0) / 2;\r\n    const circular = options.circular;\r\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\r\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\r\n\r\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\r\n      return;\r\n    }\r\n\r\n    ctx.save();\r\n\r\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\r\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\r\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\r\n    const radiusOffset = offset * fix;\r\n\r\n    ctx.fillStyle = options.backgroundColor;\r\n    ctx.strokeStyle = options.borderColor;\r\n\r\n    const endAngle = drawArc(ctx, this, radiusOffset, spacing, circular);\r\n    drawBorder(ctx, this, radiusOffset, spacing, endAngle, circular);\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n","import Element from '../core/core.element';\r\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation';\r\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment';\r\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas';\r\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve';\r\nimport {valueOrDefault} from '../helpers';\r\n\r\n/**\r\n * @typedef { import(\"./element.point\").default } PointElement\r\n */\r\n\r\nfunction setStyle(ctx, options, style = options) {\r\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\r\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\r\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\r\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\r\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\r\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\r\n}\r\n\r\nfunction lineTo(ctx, previous, target) {\r\n  ctx.lineTo(target.x, target.y);\r\n}\r\n\r\nfunction getLineMethod(options) {\r\n  if (options.stepped) {\r\n    return _steppedLineTo;\r\n  }\r\n\r\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\r\n    return _bezierCurveTo;\r\n  }\r\n\r\n  return lineTo;\r\n}\r\n\r\nfunction pathVars(points, segment, params = {}) {\r\n  const count = points.length;\r\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\r\n  const {start: segmentStart, end: segmentEnd} = segment;\r\n  const start = Math.max(paramsStart, segmentStart);\r\n  const end = Math.min(paramsEnd, segmentEnd);\r\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\r\n\r\n  return {\r\n    count,\r\n    start,\r\n    loop: segment.loop,\r\n    ilen: end < start && !outside ? count + end - start : end - start\r\n  };\r\n}\r\n\r\n/**\r\n * Create path from points, grouping by truncated x-coordinate\r\n * Points need to be in order by x-coordinate for this to work efficiently\r\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\r\n * @param {LineElement} line\r\n * @param {object} segment\r\n * @param {number} segment.start - start index of the segment, referring the points array\r\n * @param {number} segment.end - end index of the segment, referring the points array\r\n * @param {boolean} segment.loop - indicates that the segment is a loop\r\n * @param {object} params\r\n * @param {boolean} params.move - move to starting point (vs line to it)\r\n * @param {boolean} params.reverse - path the segment from end to start\r\n * @param {number} params.start - limit segment to points starting from `start` index\r\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\r\n */\r\nfunction pathSegment(ctx, line, segment, params) {\r\n  const {points, options} = line;\r\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\r\n  const lineMethod = getLineMethod(options);\r\n  // eslint-disable-next-line prefer-const\r\n  let {move = true, reverse} = params || {};\r\n  let i, point, prev;\r\n\r\n  for (i = 0; i <= ilen; ++i) {\r\n    point = points[(start + (reverse ? ilen - i : i)) % count];\r\n\r\n    if (point.skip) {\r\n      // If there is a skipped point inside a segment, spanGaps must be true\r\n      continue;\r\n    } else if (move) {\r\n      ctx.moveTo(point.x, point.y);\r\n      move = false;\r\n    } else {\r\n      lineMethod(ctx, prev, point, reverse, options.stepped);\r\n    }\r\n\r\n    prev = point;\r\n  }\r\n\r\n  if (loop) {\r\n    point = points[(start + (reverse ? ilen : 0)) % count];\r\n    lineMethod(ctx, prev, point, reverse, options.stepped);\r\n  }\r\n\r\n  return !!loop;\r\n}\r\n\r\n/**\r\n * Create path from points, grouping by truncated x-coordinate\r\n * Points need to be in order by x-coordinate for this to work efficiently\r\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\r\n * @param {LineElement} line\r\n * @param {object} segment\r\n * @param {number} segment.start - start index of the segment, referring the points array\r\n * @param {number} segment.end - end index of the segment, referring the points array\r\n * @param {boolean} segment.loop - indicates that the segment is a loop\r\n * @param {object} params\r\n * @param {boolean} params.move - move to starting point (vs line to it)\r\n * @param {boolean} params.reverse - path the segment from end to start\r\n * @param {number} params.start - limit segment to points starting from `start` index\r\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\r\n */\r\nfunction fastPathSegment(ctx, line, segment, params) {\r\n  const points = line.points;\r\n  const {count, start, ilen} = pathVars(points, segment, params);\r\n  const {move = true, reverse} = params || {};\r\n  let avgX = 0;\r\n  let countX = 0;\r\n  let i, point, prevX, minY, maxY, lastY;\r\n\r\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\r\n  const drawX = () => {\r\n    if (minY !== maxY) {\r\n      // Draw line to maxY and minY, using the average x-coordinate\r\n      ctx.lineTo(avgX, maxY);\r\n      ctx.lineTo(avgX, minY);\r\n      // Line to y-value of last point in group. So the line continues\r\n      // from correct position. Not using move, to have solid path.\r\n      ctx.lineTo(avgX, lastY);\r\n    }\r\n  };\r\n\r\n  if (move) {\r\n    point = points[pointIndex(0)];\r\n    ctx.moveTo(point.x, point.y);\r\n  }\r\n\r\n  for (i = 0; i <= ilen; ++i) {\r\n    point = points[pointIndex(i)];\r\n\r\n    if (point.skip) {\r\n      // If there is a skipped point inside a segment, spanGaps must be true\r\n      continue;\r\n    }\r\n\r\n    const x = point.x;\r\n    const y = point.y;\r\n    const truncX = x | 0; // truncated x-coordinate\r\n\r\n    if (truncX === prevX) {\r\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\r\n      if (y < minY) {\r\n        minY = y;\r\n      } else if (y > maxY) {\r\n        maxY = y;\r\n      }\r\n      // For first point in group, countX is `0`, so average will be `x` / 1.\r\n      avgX = (countX * avgX + x) / ++countX;\r\n    } else {\r\n      drawX();\r\n      // Draw line to next x-position, using the first (or only)\r\n      // y-value in that group\r\n      ctx.lineTo(x, y);\r\n\r\n      prevX = truncX;\r\n      countX = 0;\r\n      minY = maxY = y;\r\n    }\r\n    // Keep track of the last y-value in group\r\n    lastY = y;\r\n  }\r\n  drawX();\r\n}\r\n\r\n/**\r\n * @param {LineElement} line - the line\r\n * @returns {function}\r\n * @private\r\n */\r\nfunction _getSegmentMethod(line) {\r\n  const opts = line.options;\r\n  const borderDash = opts.borderDash && opts.borderDash.length;\r\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\r\n  return useFastPath ? fastPathSegment : pathSegment;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction _getInterpolationMethod(options) {\r\n  if (options.stepped) {\r\n    return _steppedInterpolation;\r\n  }\r\n\r\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\r\n    return _bezierInterpolation;\r\n  }\r\n\r\n  return _pointInLine;\r\n}\r\n\r\nfunction strokePathWithCache(ctx, line, start, count) {\r\n  let path = line._path;\r\n  if (!path) {\r\n    path = line._path = new Path2D();\r\n    if (line.path(path, start, count)) {\r\n      path.closePath();\r\n    }\r\n  }\r\n  setStyle(ctx, line.options);\r\n  ctx.stroke(path);\r\n}\r\n\r\nfunction strokePathDirect(ctx, line, start, count) {\r\n  const {segments, options} = line;\r\n  const segmentMethod = _getSegmentMethod(line);\r\n\r\n  for (const segment of segments) {\r\n    setStyle(ctx, options, segment.style);\r\n    ctx.beginPath();\r\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\r\n      ctx.closePath();\r\n    }\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nconst usePath2D = typeof Path2D === 'function';\r\n\r\nfunction draw(ctx, line, start, count) {\r\n  if (usePath2D && !line.options.segment) {\r\n    strokePathWithCache(ctx, line, start, count);\r\n  } else {\r\n    strokePathDirect(ctx, line, start, count);\r\n  }\r\n}\r\n\r\nexport default class LineElement extends Element {\r\n\r\n  static id = 'line';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    borderCapStyle: 'butt',\r\n    borderDash: [],\r\n    borderDashOffset: 0,\r\n    borderJoinStyle: 'miter',\r\n    borderWidth: 3,\r\n    capBezierPoints: true,\r\n    cubicInterpolationMode: 'default',\r\n    fill: false,\r\n    spanGaps: false,\r\n    stepped: false,\r\n    tension: 0,\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor',\r\n    borderColor: 'borderColor'\r\n  };\r\n\r\n\r\n  static descriptors = {\r\n    _scriptable: true,\r\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\r\n  };\r\n\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.animated = true;\r\n    this.options = undefined;\r\n    this._chart = undefined;\r\n    this._loop = undefined;\r\n    this._fullLoop = undefined;\r\n    this._path = undefined;\r\n    this._points = undefined;\r\n    this._segments = undefined;\r\n    this._decimated = false;\r\n    this._pointsUpdated = false;\r\n    this._datasetIndex = undefined;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  updateControlPoints(chartArea, indexAxis) {\r\n    const options = this.options;\r\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\r\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\r\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\r\n      this._pointsUpdated = true;\r\n    }\r\n  }\r\n\r\n  set points(points) {\r\n    this._points = points;\r\n    delete this._segments;\r\n    delete this._path;\r\n    this._pointsUpdated = false;\r\n  }\r\n\r\n  get points() {\r\n    return this._points;\r\n  }\r\n\r\n  get segments() {\r\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\r\n  }\r\n\r\n  /**\r\n\t * First non-skipped point on this line\r\n\t * @returns {PointElement|undefined}\r\n\t */\r\n  first() {\r\n    const segments = this.segments;\r\n    const points = this.points;\r\n    return segments.length && points[segments[0].start];\r\n  }\r\n\r\n  /**\r\n\t * Last non-skipped point on this line\r\n\t * @returns {PointElement|undefined}\r\n\t */\r\n  last() {\r\n    const segments = this.segments;\r\n    const points = this.points;\r\n    const count = segments.length;\r\n    return count && points[segments[count - 1].end];\r\n  }\r\n\r\n  /**\r\n\t * Interpolate a point in this line at the same value on `property` as\r\n\t * the reference `point` provided\r\n\t * @param {PointElement} point - the reference point\r\n\t * @param {string} property - the property to match on\r\n\t * @returns {PointElement|undefined}\r\n\t */\r\n  interpolate(point, property) {\r\n    const options = this.options;\r\n    const value = point[property];\r\n    const points = this.points;\r\n    const segments = _boundSegments(this, {property, start: value, end: value});\r\n\r\n    if (!segments.length) {\r\n      return;\r\n    }\r\n\r\n    const result = [];\r\n    const _interpolate = _getInterpolationMethod(options);\r\n    let i, ilen;\r\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\r\n      const {start, end} = segments[i];\r\n      const p1 = points[start];\r\n      const p2 = points[end];\r\n      if (p1 === p2) {\r\n        result.push(p1);\r\n        continue;\r\n      }\r\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\r\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\r\n      interpolated[property] = point[property];\r\n      result.push(interpolated);\r\n    }\r\n    return result.length === 1 ? result[0] : result;\r\n  }\r\n\r\n  /**\r\n\t * Append a segment of this line to current path.\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t * @param {object} segment\r\n\t * @param {number} segment.start - start index of the segment, referring the points array\r\n \t * @param {number} segment.end - end index of the segment, referring the points array\r\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\r\n\t * @param {object} params\r\n\t * @param {boolean} params.move - move to starting point (vs line to it)\r\n\t * @param {boolean} params.reverse - path the segment from end to start\r\n\t * @param {number} params.start - limit segment to points starting from `start` index\r\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\r\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\r\n\t */\r\n  pathSegment(ctx, segment, params) {\r\n    const segmentMethod = _getSegmentMethod(this);\r\n    return segmentMethod(ctx, this, segment, params);\r\n  }\r\n\r\n  /**\r\n\t * Append all segments of this line to current path.\r\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\r\n\t * @param {number} [start]\r\n\t * @param {number} [count]\r\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\r\n\t */\r\n  path(ctx, start, count) {\r\n    const segments = this.segments;\r\n    const segmentMethod = _getSegmentMethod(this);\r\n    let loop = this._loop;\r\n\r\n    start = start || 0;\r\n    count = count || (this.points.length - start);\r\n\r\n    for (const segment of segments) {\r\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\r\n    }\r\n    return !!loop;\r\n  }\r\n\r\n  /**\r\n\t * Draw\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t * @param {object} chartArea\r\n\t * @param {number} [start]\r\n\t * @param {number} [count]\r\n\t */\r\n  draw(ctx, chartArea, start, count) {\r\n    const options = this.options || {};\r\n    const points = this.points || [];\r\n\r\n    if (points.length && options.borderWidth) {\r\n      ctx.save();\r\n\r\n      draw(ctx, this, start, count);\r\n\r\n      ctx.restore();\r\n    }\r\n\r\n    if (this.animated) {\r\n      // When line is animated, the control points and path are not cached.\r\n      this._pointsUpdated = false;\r\n      this._path = undefined;\r\n    }\r\n  }\r\n}\r\n","import Element from '../core/core.element';\r\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas';\r\nimport {\r\n  type CartesianParsedData,\r\n  type ChartArea,\r\n  type Point,\r\n  type PointHoverOptions,\r\n  type PointOptions,\r\n} from '../../types';\r\n\r\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\r\n  const options = el.options;\r\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\r\n\r\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\r\n}\r\n\r\nexport type PointProps = Point\r\n\r\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\r\n\r\n  static id = 'point';\r\n\r\n  parsed: CartesianParsedData;\r\n  skip?: boolean;\r\n  stop?: boolean;\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    borderWidth: 1,\r\n    hitRadius: 1,\r\n    hoverBorderWidth: 1,\r\n    hoverRadius: 4,\r\n    pointStyle: 'circle',\r\n    radius: 3,\r\n    rotation: 0\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor',\r\n    borderColor: 'borderColor'\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.options = undefined;\r\n    this.parsed = undefined;\r\n    this.skip = undefined;\r\n    this.stop = undefined;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\r\n    const options = this.options;\r\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\r\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\r\n  }\r\n\r\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\r\n    return inRange(this, mouseX, 'x', useFinalPosition);\r\n  }\r\n\r\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\r\n    return inRange(this, mouseY, 'y', useFinalPosition);\r\n  }\r\n\r\n  getCenterPoint(useFinalPosition?: boolean) {\r\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\r\n    return {x, y};\r\n  }\r\n\r\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\r\n    options = options || this.options || {};\r\n    let radius = options.radius || 0;\r\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\r\n    const borderWidth = radius && options.borderWidth || 0;\r\n    return (radius + borderWidth) * 2;\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\r\n    const options = this.options;\r\n\r\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\r\n      return;\r\n    }\r\n\r\n    ctx.strokeStyle = options.borderColor;\r\n    ctx.lineWidth = options.borderWidth;\r\n    ctx.fillStyle = options.backgroundColor;\r\n    drawPoint(ctx, options, this.x, this.y);\r\n  }\r\n\r\n  getRange() {\r\n    const options = this.options || {};\r\n    // @ts-expect-error Fallbacks should never be hit in practice\r\n    return options.radius + options.hitRadius;\r\n  }\r\n}\r\n","import Element from '../core/core.element';\r\nimport {isObject, _isBetween, _limitValue} from '../helpers';\r\nimport {addRoundedRectPath} from '../helpers/helpers.canvas';\r\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options';\r\n\r\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\r\n\r\n/**\r\n * Helper function to get the bounds of the bar regardless of the orientation\r\n * @param {BarElement} bar the bar\r\n * @param {boolean} [useFinalPosition]\r\n * @return {object} bounds of the bar\r\n * @private\r\n */\r\nfunction getBarBounds(bar, useFinalPosition) {\r\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\r\n\r\n  let left, right, top, bottom, half;\r\n\r\n  if (bar.horizontal) {\r\n    half = height / 2;\r\n    left = Math.min(x, base);\r\n    right = Math.max(x, base);\r\n    top = y - half;\r\n    bottom = y + half;\r\n  } else {\r\n    half = width / 2;\r\n    left = x - half;\r\n    right = x + half;\r\n    top = Math.min(y, base);\r\n    bottom = Math.max(y, base);\r\n  }\r\n\r\n  return {left, top, right, bottom};\r\n}\r\n\r\nfunction skipOrLimit(skip, value, min, max) {\r\n  return skip ? 0 : _limitValue(value, min, max);\r\n}\r\n\r\nfunction parseBorderWidth(bar, maxW, maxH) {\r\n  const value = bar.options.borderWidth;\r\n  const skip = bar.borderSkipped;\r\n  const o = toTRBL(value);\r\n\r\n  return {\r\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\r\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\r\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\r\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\r\n  };\r\n}\r\n\r\nfunction parseBorderRadius(bar, maxW, maxH) {\r\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\r\n  const value = bar.options.borderRadius;\r\n  const o = toTRBLCorners(value);\r\n  const maxR = Math.min(maxW, maxH);\r\n  const skip = bar.borderSkipped;\r\n\r\n  // If the value is an object, assume the user knows what they are doing\r\n  // and apply as directed.\r\n  const enableBorder = enableBorderRadius || isObject(value);\r\n\r\n  return {\r\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\r\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\r\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\r\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\r\n  };\r\n}\r\n\r\nfunction boundingRects(bar) {\r\n  const bounds = getBarBounds(bar);\r\n  const width = bounds.right - bounds.left;\r\n  const height = bounds.bottom - bounds.top;\r\n  const border = parseBorderWidth(bar, width / 2, height / 2);\r\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\r\n\r\n  return {\r\n    outer: {\r\n      x: bounds.left,\r\n      y: bounds.top,\r\n      w: width,\r\n      h: height,\r\n      radius\r\n    },\r\n    inner: {\r\n      x: bounds.left + border.l,\r\n      y: bounds.top + border.t,\r\n      w: width - border.l - border.r,\r\n      h: height - border.t - border.b,\r\n      radius: {\r\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\r\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\r\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\r\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction inRange(bar, x, y, useFinalPosition) {\r\n  const skipX = x === null;\r\n  const skipY = y === null;\r\n  const skipBoth = skipX && skipY;\r\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\r\n\r\n  return bounds\r\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\r\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\r\n}\r\n\r\nfunction hasRadius(radius) {\r\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\r\n}\r\n\r\n/**\r\n * Add a path of a rectangle to the current sub-path\r\n * @param {CanvasRenderingContext2D} ctx Context\r\n * @param {*} rect Bounding rect\r\n */\r\nfunction addNormalRectPath(ctx, rect) {\r\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\r\n}\r\n\r\nfunction inflateRect(rect, amount, refRect = {}) {\r\n  const x = rect.x !== refRect.x ? -amount : 0;\r\n  const y = rect.y !== refRect.y ? -amount : 0;\r\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\r\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\r\n  return {\r\n    x: rect.x + x,\r\n    y: rect.y + y,\r\n    w: rect.w + w,\r\n    h: rect.h + h,\r\n    radius: rect.radius\r\n  };\r\n}\r\n\r\nexport default class BarElement extends Element {\r\n\r\n  static id = 'bar';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    borderSkipped: 'start',\r\n    borderWidth: 0,\r\n    borderRadius: 0,\r\n    inflateAmount: 'auto',\r\n    pointStyle: undefined\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor',\r\n    borderColor: 'borderColor'\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.options = undefined;\r\n    this.horizontal = undefined;\r\n    this.base = undefined;\r\n    this.width = undefined;\r\n    this.height = undefined;\r\n    this.inflateAmount = undefined;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\r\n    const {inner, outer} = boundingRects(this);\r\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\r\n\r\n    ctx.save();\r\n\r\n    if (outer.w !== inner.w || outer.h !== inner.h) {\r\n      ctx.beginPath();\r\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\r\n      ctx.clip();\r\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\r\n      ctx.fillStyle = borderColor;\r\n      ctx.fill('evenodd');\r\n    }\r\n\r\n    ctx.beginPath();\r\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\r\n    ctx.fillStyle = backgroundColor;\r\n    ctx.fill();\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  inRange(mouseX, mouseY, useFinalPosition) {\r\n    return inRange(this, mouseX, mouseY, useFinalPosition);\r\n  }\r\n\r\n  inXRange(mouseX, useFinalPosition) {\r\n    return inRange(this, mouseX, null, useFinalPosition);\r\n  }\r\n\r\n  inYRange(mouseY, useFinalPosition) {\r\n    return inRange(this, null, mouseY, useFinalPosition);\r\n  }\r\n\r\n  getCenterPoint(useFinalPosition) {\r\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\r\n    return {\r\n      x: horizontal ? (x + base) / 2 : x,\r\n      y: horizontal ? y : (y + base) / 2\r\n    };\r\n  }\r\n\r\n  getRange(axis) {\r\n    return axis === 'x' ? this.width / 2 : this.height / 2;\r\n  }\r\n}\r\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers';\r\n\r\nfunction lttbDecimation(data, start, count, availableWidth, options) {\r\n  /**\r\n   * Implementation of the Largest Triangle Three Buckets algorithm.\r\n   *\r\n   * This implementation is based on the original implementation by Sveinn Steinarsson\r\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\r\n   *\r\n   * The original implementation is MIT licensed.\r\n   */\r\n  const samples = options.samples || availableWidth;\r\n  // There are less points than the threshold, returning the whole array\r\n  if (samples >= count) {\r\n    return data.slice(start, start + count);\r\n  }\r\n\r\n  const decimated = [];\r\n\r\n  const bucketWidth = (count - 2) / (samples - 2);\r\n  let sampledIndex = 0;\r\n  const endIndex = start + count - 1;\r\n  // Starting from offset\r\n  let a = start;\r\n  let i, maxAreaPoint, maxArea, area, nextA;\r\n\r\n  decimated[sampledIndex++] = data[a];\r\n\r\n  for (i = 0; i < samples - 2; i++) {\r\n    let avgX = 0;\r\n    let avgY = 0;\r\n    let j;\r\n\r\n    // Adding offset\r\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\r\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\r\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\r\n\r\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\r\n      avgX += data[j].x;\r\n      avgY += data[j].y;\r\n    }\r\n\r\n    avgX /= avgRangeLength;\r\n    avgY /= avgRangeLength;\r\n\r\n    // Adding offset\r\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\r\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\r\n    const {x: pointAx, y: pointAy} = data[a];\r\n\r\n    // Note that this is changed from the original algorithm which initializes these\r\n    // values to 1. The reason for this change is that if the area is small, nextA\r\n    // would never be set and thus a crash would occur in the next loop as `a` would become\r\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\r\n    // initializing with a negative number is the correct solution.\r\n    maxArea = area = -1;\r\n\r\n    for (j = rangeOffs; j < rangeTo; j++) {\r\n      area = 0.5 * Math.abs(\r\n        (pointAx - avgX) * (data[j].y - pointAy) -\r\n        (pointAx - data[j].x) * (avgY - pointAy)\r\n      );\r\n\r\n      if (area > maxArea) {\r\n        maxArea = area;\r\n        maxAreaPoint = data[j];\r\n        nextA = j;\r\n      }\r\n    }\r\n\r\n    decimated[sampledIndex++] = maxAreaPoint;\r\n    a = nextA;\r\n  }\r\n\r\n  // Include the last point\r\n  decimated[sampledIndex++] = data[endIndex];\r\n\r\n  return decimated;\r\n}\r\n\r\nfunction minMaxDecimation(data, start, count, availableWidth) {\r\n  let avgX = 0;\r\n  let countX = 0;\r\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\r\n  const decimated = [];\r\n  const endIndex = start + count - 1;\r\n\r\n  const xMin = data[start].x;\r\n  const xMax = data[endIndex].x;\r\n  const dx = xMax - xMin;\r\n\r\n  for (i = start; i < start + count; ++i) {\r\n    point = data[i];\r\n    x = (point.x - xMin) / dx * availableWidth;\r\n    y = point.y;\r\n    const truncX = x | 0;\r\n\r\n    if (truncX === prevX) {\r\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\r\n      if (y < minY) {\r\n        minY = y;\r\n        minIndex = i;\r\n      } else if (y > maxY) {\r\n        maxY = y;\r\n        maxIndex = i;\r\n      }\r\n      // For first point in group, countX is `0`, so average will be `x` / 1.\r\n      // Use point.x here because we're computing the average data `x` value\r\n      avgX = (countX * avgX + point.x) / ++countX;\r\n    } else {\r\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\r\n      const lastIndex = i - 1;\r\n\r\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\r\n        // The interval is defined by 4 points: start, min, max, end.\r\n        // The starting point is already considered at this point, so we need to determine which\r\n        // of the other points to add. We need to sort these points to ensure the decimated data\r\n        // is still sorted and then ensure there are no duplicates.\r\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\r\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\r\n\r\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\r\n          decimated.push({\r\n            ...data[intermediateIndex1],\r\n            x: avgX,\r\n          });\r\n        }\r\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\r\n          decimated.push({\r\n            ...data[intermediateIndex2],\r\n            x: avgX\r\n          });\r\n        }\r\n      }\r\n\r\n      // lastIndex === startIndex will occur when a range has only 1 point which could\r\n      // happen with very uneven data\r\n      if (i > 0 && lastIndex !== startIndex) {\r\n        // Last point in the previous interval\r\n        decimated.push(data[lastIndex]);\r\n      }\r\n\r\n      // Start of the new interval\r\n      decimated.push(point);\r\n      prevX = truncX;\r\n      countX = 0;\r\n      minY = maxY = y;\r\n      minIndex = maxIndex = startIndex = i;\r\n    }\r\n  }\r\n\r\n  return decimated;\r\n}\r\n\r\nfunction cleanDecimatedDataset(dataset) {\r\n  if (dataset._decimated) {\r\n    const data = dataset._data;\r\n    delete dataset._decimated;\r\n    delete dataset._data;\r\n    Object.defineProperty(dataset, 'data', {value: data});\r\n  }\r\n}\r\n\r\nfunction cleanDecimatedData(chart) {\r\n  chart.data.datasets.forEach((dataset) => {\r\n    cleanDecimatedDataset(dataset);\r\n  });\r\n}\r\n\r\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\r\n  const pointCount = points.length;\r\n\r\n  let start = 0;\r\n  let count;\r\n\r\n  const {iScale} = meta;\r\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\r\n\r\n  if (minDefined) {\r\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\r\n  }\r\n  if (maxDefined) {\r\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\r\n  } else {\r\n    count = pointCount - start;\r\n  }\r\n\r\n  return {start, count};\r\n}\r\n\r\nexport default {\r\n  id: 'decimation',\r\n\r\n  defaults: {\r\n    algorithm: 'min-max',\r\n    enabled: false,\r\n  },\r\n\r\n  beforeElementsUpdate: (chart, args, options) => {\r\n    if (!options.enabled) {\r\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\r\n      cleanDecimatedData(chart);\r\n      return;\r\n    }\r\n\r\n    // Assume the entire chart is available to show a few more points than needed\r\n    const availableWidth = chart.width;\r\n\r\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\r\n      const {_data, indexAxis} = dataset;\r\n      const meta = chart.getDatasetMeta(datasetIndex);\r\n      const data = _data || dataset.data;\r\n\r\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\r\n        // Decimation is only supported for lines that have an X indexAxis\r\n        return;\r\n      }\r\n\r\n      if (!meta.controller.supportsDecimation) {\r\n        // Only line datasets are supported\r\n        return;\r\n      }\r\n\r\n      const xAxis = chart.scales[meta.xAxisID];\r\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\r\n        // Only linear interpolation is supported\r\n        return;\r\n      }\r\n\r\n      if (chart.options.parsing) {\r\n        // Plugin only supports data that does not need parsing\r\n        return;\r\n      }\r\n\r\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\r\n      const threshold = options.threshold || 4 * availableWidth;\r\n      if (count <= threshold) {\r\n        // No decimation is required until we are above this threshold\r\n        cleanDecimatedDataset(dataset);\r\n        return;\r\n      }\r\n\r\n      if (isNullOrUndef(_data)) {\r\n        // First time we are seeing this dataset\r\n        // We override the 'data' property with a setter that stores the\r\n        // raw data in _data, but reads the decimated data from _decimated\r\n        dataset._data = data;\r\n        delete dataset.data;\r\n        Object.defineProperty(dataset, 'data', {\r\n          configurable: true,\r\n          enumerable: true,\r\n          get: function() {\r\n            return this._decimated;\r\n          },\r\n          set: function(d) {\r\n            this._data = d;\r\n          }\r\n        });\r\n      }\r\n\r\n      // Point the chart to the decimated data\r\n      let decimated;\r\n      switch (options.algorithm) {\r\n      case 'lttb':\r\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\r\n        break;\r\n      case 'min-max':\r\n        decimated = minMaxDecimation(data, start, count, availableWidth);\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\r\n      }\r\n\r\n      dataset._decimated = decimated;\r\n    });\r\n  },\r\n\r\n  destroy(chart) {\r\n    cleanDecimatedData(chart);\r\n  }\r\n};\r\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers';\r\n\r\nexport function _segments(line, target, property) {\r\n  const segments = line.segments;\r\n  const points = line.points;\r\n  const tpoints = target.points;\r\n  const parts = [];\r\n\r\n  for (const segment of segments) {\r\n    let {start, end} = segment;\r\n    end = _findSegmentEnd(start, end, points);\r\n\r\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\r\n\r\n    if (!target.segments) {\r\n      // Special case for boundary not supporting `segments` (simpleArc)\r\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\r\n      parts.push({\r\n        source: segment,\r\n        target: bounds,\r\n        start: points[start],\r\n        end: points[end]\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\r\n    const targetSegments = _boundSegments(target, bounds);\r\n\r\n    for (const tgt of targetSegments) {\r\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\r\n      const fillSources = _boundSegment(segment, points, subBounds);\r\n\r\n      for (const fillSource of fillSources) {\r\n        parts.push({\r\n          source: fillSource,\r\n          target: tgt,\r\n          start: {\r\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\r\n          },\r\n          end: {\r\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return parts;\r\n}\r\n\r\nexport function _getBounds(property, first, last, loop) {\r\n  if (loop) {\r\n    return;\r\n  }\r\n  let start = first[property];\r\n  let end = last[property];\r\n\r\n  if (property === 'angle') {\r\n    start = _normalizeAngle(start);\r\n    end = _normalizeAngle(end);\r\n  }\r\n  return {property, start, end};\r\n}\r\n\r\nexport function _pointsFromSegments(boundary, line) {\r\n  const {x = null, y = null} = boundary || {};\r\n  const linePoints = line.points;\r\n  const points = [];\r\n  line.segments.forEach(({start, end}) => {\r\n    end = _findSegmentEnd(start, end, linePoints);\r\n    const first = linePoints[start];\r\n    const last = linePoints[end];\r\n    if (y !== null) {\r\n      points.push({x: first.x, y});\r\n      points.push({x: last.x, y});\r\n    } else if (x !== null) {\r\n      points.push({x, y: first.y});\r\n      points.push({x, y: last.y});\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nexport function _findSegmentEnd(start, end, points) {\r\n  for (;end > start; end--) {\r\n    const point = points[end];\r\n    if (!isNaN(point.x) && !isNaN(point.y)) {\r\n      break;\r\n    }\r\n  }\r\n  return end;\r\n}\r\n\r\nfunction _getEdge(a, b, prop, fn) {\r\n  if (a && b) {\r\n    return fn(a[prop], b[prop]);\r\n  }\r\n  return a ? a[prop] : b ? b[prop] : 0;\r\n}\r\n","/**\r\n * @typedef { import('../../core/core.controller').default } Chart\r\n * @typedef { import('../../core/core.scale').default } Scale\r\n * @typedef { import('../../elements/element.point').default } PointElement\r\n */\r\n\r\nimport {LineElement} from '../../elements';\r\nimport {isArray} from '../../helpers';\r\nimport {_pointsFromSegments} from './filler.segment';\r\n\r\n/**\r\n * @param {PointElement[] | { x: number; y: number; }} boundary\r\n * @param {LineElement} line\r\n * @return {LineElement?}\r\n */\r\nexport function _createBoundaryLine(boundary, line) {\r\n  let points = [];\r\n  let _loop = false;\r\n\r\n  if (isArray(boundary)) {\r\n    _loop = true;\r\n    // @ts-ignore\r\n    points = boundary;\r\n  } else {\r\n    points = _pointsFromSegments(boundary, line);\r\n  }\r\n\r\n  return points.length ? new LineElement({\r\n    points,\r\n    options: {tension: 0},\r\n    _loop,\r\n    _fullLoop: _loop\r\n  }) : null;\r\n}\r\n\r\nexport function _shouldApplyFill(source) {\r\n  return source && source.fill !== false;\r\n}\r\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core';\r\n\r\n/**\r\n * @typedef { import('../../core/core.scale').default } Scale\r\n * @typedef { import('../../elements/element.line').default } LineElement\r\n * @typedef { import('../../../types').FillTarget } FillTarget\r\n * @typedef { import('../../../types').ComplexFillTarget } ComplexFillTarget\r\n */\r\n\r\nexport function _resolveTarget(sources, index, propagate) {\r\n  const source = sources[index];\r\n  let fill = source.fill;\r\n  const visited = [index];\r\n  let target;\r\n\r\n  if (!propagate) {\r\n    return fill;\r\n  }\r\n\r\n  while (fill !== false && visited.indexOf(fill) === -1) {\r\n    if (!isFinite(fill)) {\r\n      return fill;\r\n    }\r\n\r\n    target = sources[fill];\r\n    if (!target) {\r\n      return false;\r\n    }\r\n\r\n    if (target.visible) {\r\n      return fill;\r\n    }\r\n\r\n    visited.push(fill);\r\n    fill = target.fill;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n * @param {number} index\r\n * @param {number} count\r\n */\r\nexport function _decodeFill(line, index, count) {\r\n  /** @type {string | {value: number}} */\r\n  const fill = parseFillOption(line);\r\n\r\n  if (isObject(fill)) {\r\n    return isNaN(fill.value) ? false : fill;\r\n  }\r\n\r\n  let target = parseFloat(fill);\r\n\r\n  if (isFinite(target) && Math.floor(target) === target) {\r\n    return decodeTargetIndex(fill[0], index, target, count);\r\n  }\r\n\r\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\r\n}\r\n\r\nfunction decodeTargetIndex(firstCh, index, target, count) {\r\n  if (firstCh === '-' || firstCh === '+') {\r\n    target = index + target;\r\n  }\r\n\r\n  if (target === index || target < 0 || target >= count) {\r\n    return false;\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * @param {FillTarget | ComplexFillTarget} fill\r\n * @param {Scale} scale\r\n * @returns {number | null}\r\n */\r\nexport function _getTargetPixel(fill, scale) {\r\n  let pixel = null;\r\n  if (fill === 'start') {\r\n    pixel = scale.bottom;\r\n  } else if (fill === 'end') {\r\n    pixel = scale.top;\r\n  } else if (isObject(fill)) {\r\n    // @ts-ignore\r\n    pixel = scale.getPixelForValue(fill.value);\r\n  } else if (scale.getBasePixel) {\r\n    pixel = scale.getBasePixel();\r\n  }\r\n  return pixel;\r\n}\r\n\r\n/**\r\n * @param {FillTarget | ComplexFillTarget} fill\r\n * @param {Scale} scale\r\n * @param {number} startValue\r\n * @returns {number | undefined}\r\n */\r\nexport function _getTargetValue(fill, scale, startValue) {\r\n  let value;\r\n\r\n  if (fill === 'start') {\r\n    value = startValue;\r\n  } else if (fill === 'end') {\r\n    value = scale.options.reverse ? scale.min : scale.max;\r\n  } else if (isObject(fill)) {\r\n    // @ts-ignore\r\n    value = fill.value;\r\n  } else {\r\n    value = scale.getBaseValue();\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n */\r\nfunction parseFillOption(line) {\r\n  const options = line.options;\r\n  const fillOption = options.fill;\r\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\r\n\r\n  if (fill === undefined) {\r\n    fill = !!options.backgroundColor;\r\n  }\r\n\r\n  if (fill === false || fill === null) {\r\n    return false;\r\n  }\r\n\r\n  if (fill === true) {\r\n    return 'origin';\r\n  }\r\n  return fill;\r\n}\r\n","/**\r\n * @typedef { import('../../core/core.controller').default } Chart\r\n * @typedef { import('../../core/core.scale').default } Scale\r\n * @typedef { import('../../elements/element.point').default } PointElement\r\n */\r\n\r\nimport {LineElement} from '../../elements';\r\nimport {_isBetween} from '../../helpers';\r\nimport {_createBoundaryLine} from './filler.helper';\r\n\r\n/**\r\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\r\n * @return {LineElement}\r\n */\r\nexport function _buildStackLine(source) {\r\n  const {scale, index, line} = source;\r\n  const points = [];\r\n  const segments = line.segments;\r\n  const sourcePoints = line.points;\r\n  const linesBelow = getLinesBelow(scale, index);\r\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\r\n\r\n  for (let i = 0; i < segments.length; i++) {\r\n    const segment = segments[i];\r\n    for (let j = segment.start; j <= segment.end; j++) {\r\n      addPointsBelow(points, sourcePoints[j], linesBelow);\r\n    }\r\n  }\r\n  return new LineElement({points, options: {}});\r\n}\r\n\r\n/**\r\n * @param {Scale} scale\r\n * @param {number} index\r\n * @return {LineElement[]}\r\n */\r\nfunction getLinesBelow(scale, index) {\r\n  const below = [];\r\n  const metas = scale.getMatchingVisibleMetas('line');\r\n\r\n  for (let i = 0; i < metas.length; i++) {\r\n    const meta = metas[i];\r\n    if (meta.index === index) {\r\n      break;\r\n    }\r\n    if (!meta.hidden) {\r\n      below.unshift(meta.dataset);\r\n    }\r\n  }\r\n  return below;\r\n}\r\n\r\n/**\r\n * @param {PointElement[]} points\r\n * @param {PointElement} sourcePoint\r\n * @param {LineElement[]} linesBelow\r\n */\r\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\r\n  const postponed = [];\r\n  for (let j = 0; j < linesBelow.length; j++) {\r\n    const line = linesBelow[j];\r\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\r\n\r\n    if (!point || (first && last)) {\r\n      continue;\r\n    }\r\n    if (first) {\r\n      // First point of an segment -> need to add another point before this,\r\n      // from next line below.\r\n      postponed.unshift(point);\r\n    } else {\r\n      points.push(point);\r\n      if (!last) {\r\n        // In the middle of an segment, no need to add more points.\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  points.push(...postponed);\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n * @param {PointElement} sourcePoint\r\n * @param {string} property\r\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\r\n */\r\nfunction findPoint(line, sourcePoint, property) {\r\n  const point = line.interpolate(sourcePoint, property);\r\n  if (!point) {\r\n    return {};\r\n  }\r\n\r\n  const pointValue = point[property];\r\n  const segments = line.segments;\r\n  const linePoints = line.points;\r\n  let first = false;\r\n  let last = false;\r\n  for (let i = 0; i < segments.length; i++) {\r\n    const segment = segments[i];\r\n    const firstValue = linePoints[segment.start][property];\r\n    const lastValue = linePoints[segment.end][property];\r\n    if (_isBetween(pointValue, firstValue, lastValue)) {\r\n      first = pointValue === firstValue;\r\n      last = pointValue === lastValue;\r\n      break;\r\n    }\r\n  }\r\n  return {first, last, point};\r\n}\r\n","import {TAU} from '../../helpers';\r\n\r\n// TODO: use elements.ArcElement instead\r\nexport class simpleArc {\r\n  constructor(opts) {\r\n    this.x = opts.x;\r\n    this.y = opts.y;\r\n    this.radius = opts.radius;\r\n  }\r\n\r\n  pathSegment(ctx, bounds, opts) {\r\n    const {x, y, radius} = this;\r\n    bounds = bounds || {start: 0, end: TAU};\r\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\r\n    return !opts.bounds;\r\n  }\r\n\r\n  interpolate(point) {\r\n    const {x, y, radius} = this;\r\n    const angle = point.angle;\r\n    return {\r\n      x: x + Math.cos(angle) * radius,\r\n      y: y + Math.sin(angle) * radius,\r\n      angle\r\n    };\r\n  }\r\n}\r\n","import {isFinite} from '../../helpers';\r\nimport {_createBoundaryLine} from './filler.helper';\r\nimport {_getTargetPixel, _getTargetValue} from './filler.options';\r\nimport {_buildStackLine} from './filler.target.stack';\r\nimport {simpleArc} from './simpleArc';\r\n\r\n/**\r\n * @typedef { import('../../core/core.controller').default } Chart\r\n * @typedef { import('../../core/core.scale').default } Scale\r\n * @typedef { import('../../elements/element.point').default } PointElement\r\n */\r\n\r\nexport function _getTarget(source) {\r\n  const {chart, fill, line} = source;\r\n\r\n  if (isFinite(fill)) {\r\n    return getLineByIndex(chart, fill);\r\n  }\r\n\r\n  if (fill === 'stack') {\r\n    return _buildStackLine(source);\r\n  }\r\n\r\n  if (fill === 'shape') {\r\n    return true;\r\n  }\r\n\r\n  const boundary = computeBoundary(source);\r\n\r\n  if (boundary instanceof simpleArc) {\r\n    return boundary;\r\n  }\r\n\r\n  return _createBoundaryLine(boundary, line);\r\n}\r\n\r\n/**\r\n * @param {Chart} chart\r\n * @param {number} index\r\n */\r\nfunction getLineByIndex(chart, index) {\r\n  const meta = chart.getDatasetMeta(index);\r\n  const visible = meta && chart.isDatasetVisible(index);\r\n  return visible ? meta.dataset : null;\r\n}\r\n\r\nfunction computeBoundary(source) {\r\n  const scale = source.scale || {};\r\n\r\n  if (scale.getPointPositionForValue) {\r\n    return computeCircularBoundary(source);\r\n  }\r\n  return computeLinearBoundary(source);\r\n}\r\n\r\n\r\nfunction computeLinearBoundary(source) {\r\n  const {scale = {}, fill} = source;\r\n  const pixel = _getTargetPixel(fill, scale);\r\n\r\n  if (isFinite(pixel)) {\r\n    const horizontal = scale.isHorizontal();\r\n\r\n    return {\r\n      x: horizontal ? pixel : null,\r\n      y: horizontal ? null : pixel\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction computeCircularBoundary(source) {\r\n  const {scale, fill} = source;\r\n  const options = scale.options;\r\n  const length = scale.getLabels().length;\r\n  const start = options.reverse ? scale.max : scale.min;\r\n  const value = _getTargetValue(fill, scale, start);\r\n  const target = [];\r\n\r\n  if (options.grid.circular) {\r\n    const center = scale.getPointPositionForValue(0, start);\r\n    return new simpleArc({\r\n      x: center.x,\r\n      y: center.y,\r\n      radius: scale.getDistanceFromCenterForValue(value)\r\n    });\r\n  }\r\n\r\n  for (let i = 0; i < length; ++i) {\r\n    target.push(scale.getPointPositionForValue(i, value));\r\n  }\r\n  return target;\r\n}\r\n\r\n","import {clipArea, unclipArea} from '../../helpers';\r\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment';\r\nimport {_getTarget} from './filler.target';\r\n\r\nexport function _drawfill(ctx, source, area) {\r\n  const target = _getTarget(source);\r\n  const {line, scale, axis} = source;\r\n  const lineOpts = line.options;\r\n  const fillOption = lineOpts.fill;\r\n  const color = lineOpts.backgroundColor;\r\n  const {above = color, below = color} = fillOption || {};\r\n  if (target && line.points.length) {\r\n    clipArea(ctx, area);\r\n    doFill(ctx, {line, target, above, below, area, scale, axis});\r\n    unclipArea(ctx);\r\n  }\r\n}\r\n\r\nfunction doFill(ctx, cfg) {\r\n  const {line, target, above, below, area, scale} = cfg;\r\n  const property = line._loop ? 'angle' : cfg.axis;\r\n\r\n  ctx.save();\r\n\r\n  if (property === 'x' && below !== above) {\r\n    clipVertical(ctx, target, area.top);\r\n    fill(ctx, {line, target, color: above, scale, property});\r\n    ctx.restore();\r\n    ctx.save();\r\n    clipVertical(ctx, target, area.bottom);\r\n  }\r\n  fill(ctx, {line, target, color: below, scale, property});\r\n\r\n  ctx.restore();\r\n}\r\n\r\nfunction clipVertical(ctx, target, clipY) {\r\n  const {segments, points} = target;\r\n  let first = true;\r\n  let lineLoop = false;\r\n\r\n  ctx.beginPath();\r\n  for (const segment of segments) {\r\n    const {start, end} = segment;\r\n    const firstPoint = points[start];\r\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\r\n    if (first) {\r\n      ctx.moveTo(firstPoint.x, firstPoint.y);\r\n      first = false;\r\n    } else {\r\n      ctx.lineTo(firstPoint.x, clipY);\r\n      ctx.lineTo(firstPoint.x, firstPoint.y);\r\n    }\r\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\r\n    if (lineLoop) {\r\n      ctx.closePath();\r\n    } else {\r\n      ctx.lineTo(lastPoint.x, clipY);\r\n    }\r\n  }\r\n\r\n  ctx.lineTo(target.first().x, clipY);\r\n  ctx.closePath();\r\n  ctx.clip();\r\n}\r\n\r\nfunction fill(ctx, cfg) {\r\n  const {line, target, property, color, scale} = cfg;\r\n  const segments = _segments(line, target, property);\r\n\r\n  for (const {source: src, target: tgt, start, end} of segments) {\r\n    const {style: {backgroundColor = color} = {}} = src;\r\n    const notShape = target !== true;\r\n\r\n    ctx.save();\r\n    ctx.fillStyle = backgroundColor;\r\n\r\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\r\n\r\n    ctx.beginPath();\r\n\r\n    const lineLoop = !!line.pathSegment(ctx, src);\r\n\r\n    let loop;\r\n    if (notShape) {\r\n      if (lineLoop) {\r\n        ctx.closePath();\r\n      } else {\r\n        interpolatedLineTo(ctx, target, end, property);\r\n      }\r\n\r\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\r\n      loop = lineLoop && targetLoop;\r\n      if (!loop) {\r\n        interpolatedLineTo(ctx, target, start, property);\r\n      }\r\n    }\r\n\r\n    ctx.closePath();\r\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\nfunction clipBounds(ctx, scale, bounds) {\r\n  const {top, bottom} = scale.chart.chartArea;\r\n  const {property, start, end} = bounds || {};\r\n  if (property === 'x') {\r\n    ctx.beginPath();\r\n    ctx.rect(start, top, end - start, bottom - top);\r\n    ctx.clip();\r\n  }\r\n}\r\n\r\nfunction interpolatedLineTo(ctx, target, point, property) {\r\n  const interpolatedPoint = target.interpolate(point, property);\r\n  if (interpolatedPoint) {\r\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\r\n  }\r\n}\r\n\r\n","/**\r\n * Plugin based on discussion from the following Chart.js issues:\r\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\r\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\r\n */\r\n\r\nimport LineElement from '../../elements/element.line';\r\nimport {_drawfill} from './filler.drawing';\r\nimport {_shouldApplyFill} from './filler.helper';\r\nimport {_decodeFill, _resolveTarget} from './filler.options';\r\n\r\nexport default {\r\n  id: 'filler',\r\n\r\n  afterDatasetsUpdate(chart, _args, options) {\r\n    const count = (chart.data.datasets || []).length;\r\n    const sources = [];\r\n    let meta, i, line, source;\r\n\r\n    for (i = 0; i < count; ++i) {\r\n      meta = chart.getDatasetMeta(i);\r\n      line = meta.dataset;\r\n      source = null;\r\n\r\n      if (line && line.options && line instanceof LineElement) {\r\n        source = {\r\n          visible: chart.isDatasetVisible(i),\r\n          index: i,\r\n          fill: _decodeFill(line, i, count),\r\n          chart,\r\n          axis: meta.controller.options.indexAxis,\r\n          scale: meta.vScale,\r\n          line,\r\n        };\r\n      }\r\n\r\n      meta.$filler = source;\r\n      sources.push(source);\r\n    }\r\n\r\n    for (i = 0; i < count; ++i) {\r\n      source = sources[i];\r\n      if (!source || source.fill === false) {\r\n        continue;\r\n      }\r\n\r\n      source.fill = _resolveTarget(sources, i, options.propagate);\r\n    }\r\n  },\r\n\r\n  beforeDraw(chart, _args, options) {\r\n    const draw = options.drawTime === 'beforeDraw';\r\n    const metasets = chart.getSortedVisibleDatasetMetas();\r\n    const area = chart.chartArea;\r\n    for (let i = metasets.length - 1; i >= 0; --i) {\r\n      const source = metasets[i].$filler;\r\n      if (!source) {\r\n        continue;\r\n      }\r\n\r\n      source.line.updateControlPoints(area, source.axis);\r\n      if (draw && source.fill) {\r\n        _drawfill(chart.ctx, source, area);\r\n      }\r\n    }\r\n  },\r\n\r\n  beforeDatasetsDraw(chart, _args, options) {\r\n    if (options.drawTime !== 'beforeDatasetsDraw') {\r\n      return;\r\n    }\r\n\r\n    const metasets = chart.getSortedVisibleDatasetMetas();\r\n    for (let i = metasets.length - 1; i >= 0; --i) {\r\n      const source = metasets[i].$filler;\r\n\r\n      if (_shouldApplyFill(source)) {\r\n        _drawfill(chart.ctx, source, chart.chartArea);\r\n      }\r\n    }\r\n  },\r\n\r\n  beforeDatasetDraw(chart, args, options) {\r\n    const source = args.meta.$filler;\r\n\r\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\r\n      return;\r\n    }\r\n\r\n    _drawfill(chart.ctx, source, chart.chartArea);\r\n  },\r\n\r\n  defaults: {\r\n    propagate: true,\r\n    drawTime: 'beforeDatasetDraw'\r\n  }\r\n};\r\n","import defaults from '../core/core.defaults';\r\nimport Element from '../core/core.element';\r\nimport layouts from '../core/core.layouts';\r\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas';\r\nimport {\r\n  _isBetween,\r\n  callback as call,\r\n  clipArea,\r\n  getRtlAdapter,\r\n  overrideTextDirection,\r\n  restoreTextDirection,\r\n  toFont,\r\n  toPadding,\r\n  unclipArea,\r\n  valueOrDefault,\r\n} from '../helpers/index';\r\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras';\r\nimport {toTRBLCorners} from '../helpers/helpers.options';\r\n\r\n/**\r\n * @typedef { import(\"../../types\").ChartEvent } ChartEvent\r\n */\r\n\r\nconst getBoxSize = (labelOpts, fontSize) => {\r\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\r\n\r\n  if (labelOpts.usePointStyle) {\r\n    boxHeight = Math.min(boxHeight, fontSize);\r\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\r\n  }\r\n\r\n  return {\r\n    boxWidth,\r\n    boxHeight,\r\n    itemHeight: Math.max(fontSize, boxHeight)\r\n  };\r\n};\r\n\r\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\r\n\r\nexport class Legend extends Element {\r\n\r\n  /**\r\n\t * @param {{ ctx: any; options: any; chart: any; }} config\r\n\t */\r\n  constructor(config) {\r\n    super();\r\n\r\n    this._added = false;\r\n\r\n    // Contains hit boxes for each dataset (in dataset order)\r\n    this.legendHitBoxes = [];\r\n\r\n    /**\r\n \t\t * @private\r\n \t\t */\r\n    this._hoveredItem = null;\r\n\r\n    // Are we in doughnut mode which has a different data type\r\n    this.doughnutMode = false;\r\n\r\n    this.chart = config.chart;\r\n    this.options = config.options;\r\n    this.ctx = config.ctx;\r\n    this.legendItems = undefined;\r\n    this.columnSizes = undefined;\r\n    this.lineWidths = undefined;\r\n    this.maxHeight = undefined;\r\n    this.maxWidth = undefined;\r\n    this.top = undefined;\r\n    this.bottom = undefined;\r\n    this.left = undefined;\r\n    this.right = undefined;\r\n    this.height = undefined;\r\n    this.width = undefined;\r\n    this._margins = undefined;\r\n    this.position = undefined;\r\n    this.weight = undefined;\r\n    this.fullSize = undefined;\r\n  }\r\n\r\n  update(maxWidth, maxHeight, margins) {\r\n    this.maxWidth = maxWidth;\r\n    this.maxHeight = maxHeight;\r\n    this._margins = margins;\r\n\r\n    this.setDimensions();\r\n    this.buildLabels();\r\n    this.fit();\r\n  }\r\n\r\n  setDimensions() {\r\n    if (this.isHorizontal()) {\r\n      this.width = this.maxWidth;\r\n      this.left = this._margins.left;\r\n      this.right = this.width;\r\n    } else {\r\n      this.height = this.maxHeight;\r\n      this.top = this._margins.top;\r\n      this.bottom = this.height;\r\n    }\r\n  }\r\n\r\n  buildLabels() {\r\n    const labelOpts = this.options.labels || {};\r\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\r\n\r\n    if (labelOpts.filter) {\r\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\r\n    }\r\n\r\n    if (labelOpts.sort) {\r\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\r\n    }\r\n\r\n    if (this.options.reverse) {\r\n      legendItems.reverse();\r\n    }\r\n\r\n    this.legendItems = legendItems;\r\n  }\r\n\r\n  fit() {\r\n    const {options, ctx} = this;\r\n\r\n    // The legend may not be displayed for a variety of reasons including\r\n    // the fact that the defaults got set to `false`.\r\n    // When the legend is not displayed, there are no guarantees that the options\r\n    // are correctly formatted so we need to bail out as early as possible.\r\n    if (!options.display) {\r\n      this.width = this.height = 0;\r\n      return;\r\n    }\r\n\r\n    const labelOpts = options.labels;\r\n    const labelFont = toFont(labelOpts.font);\r\n    const fontSize = labelFont.size;\r\n    const titleHeight = this._computeTitleHeight();\r\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\r\n\r\n    let width, height;\r\n\r\n    ctx.font = labelFont.string;\r\n\r\n    if (this.isHorizontal()) {\r\n      width = this.maxWidth; // fill all the width\r\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\r\n    } else {\r\n      height = this.maxHeight; // fill all the height\r\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\r\n    }\r\n\r\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\r\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\r\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\r\n    const hitboxes = this.legendHitBoxes = [];\r\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\r\n    const lineWidths = this.lineWidths = [0];\r\n    const lineHeight = itemHeight + padding;\r\n    let totalHeight = titleHeight;\r\n\r\n    ctx.textAlign = 'left';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    let row = -1;\r\n    let top = -lineHeight;\r\n    this.legendItems.forEach((legendItem, i) => {\r\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\r\n\r\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\r\n        totalHeight += lineHeight;\r\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\r\n        top += lineHeight;\r\n        row++;\r\n      }\r\n\r\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\r\n\r\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\r\n    });\r\n\r\n    return totalHeight;\r\n  }\r\n\r\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\r\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\r\n    const hitboxes = this.legendHitBoxes = [];\r\n    const columnSizes = this.columnSizes = [];\r\n    const heightLimit = maxHeight - titleHeight;\r\n\r\n    let totalWidth = padding;\r\n    let currentColWidth = 0;\r\n    let currentColHeight = 0;\r\n\r\n    let left = 0;\r\n    let col = 0;\r\n\r\n    this.legendItems.forEach((legendItem, i) => {\r\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\r\n\r\n      // If too tall, go to new column\r\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\r\n        totalWidth += currentColWidth + padding;\r\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\r\n        left += currentColWidth + padding;\r\n        col++;\r\n        currentColWidth = currentColHeight = 0;\r\n      }\r\n\r\n      // Store the hitbox width and height here. Final position will be updated in `draw`\r\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\r\n\r\n      // Get max width\r\n      currentColWidth = Math.max(currentColWidth, itemWidth);\r\n      currentColHeight += itemHeight + padding;\r\n    });\r\n\r\n    totalWidth += currentColWidth;\r\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\r\n\r\n    return totalWidth;\r\n  }\r\n\r\n  adjustHitBoxes() {\r\n    if (!this.options.display) {\r\n      return;\r\n    }\r\n    const titleHeight = this._computeTitleHeight();\r\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\r\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\r\n    if (this.isHorizontal()) {\r\n      let row = 0;\r\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\r\n      for (const hitbox of hitboxes) {\r\n        if (row !== hitbox.row) {\r\n          row = hitbox.row;\r\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\r\n        }\r\n        hitbox.top += this.top + titleHeight + padding;\r\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\r\n        left += hitbox.width + padding;\r\n      }\r\n    } else {\r\n      let col = 0;\r\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\r\n      for (const hitbox of hitboxes) {\r\n        if (hitbox.col !== col) {\r\n          col = hitbox.col;\r\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\r\n        }\r\n        hitbox.top = top;\r\n        hitbox.left += this.left + padding;\r\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\r\n        top += hitbox.height + padding;\r\n      }\r\n    }\r\n  }\r\n\r\n  isHorizontal() {\r\n    return this.options.position === 'top' || this.options.position === 'bottom';\r\n  }\r\n\r\n  draw() {\r\n    if (this.options.display) {\r\n      const ctx = this.ctx;\r\n      clipArea(ctx, this);\r\n\r\n      this._draw();\r\n\r\n      unclipArea(ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _draw() {\r\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\r\n    const {align, labels: labelOpts} = opts;\r\n    const defaultColor = defaults.color;\r\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\r\n    const labelFont = toFont(labelOpts.font);\r\n    const {padding} = labelOpts;\r\n    const fontSize = labelFont.size;\r\n    const halfFontSize = fontSize / 2;\r\n    let cursor;\r\n\r\n    this.drawTitle();\r\n\r\n    // Canvas setup\r\n    ctx.textAlign = rtlHelper.textAlign('left');\r\n    ctx.textBaseline = 'middle';\r\n    ctx.lineWidth = 0.5;\r\n    ctx.font = labelFont.string;\r\n\r\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\r\n\r\n    // current position\r\n    const drawLegendBox = function(x, y, legendItem) {\r\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\r\n        return;\r\n      }\r\n\r\n      // Set the ctx for the box\r\n      ctx.save();\r\n\r\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\r\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\r\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\r\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\r\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\r\n      ctx.lineWidth = lineWidth;\r\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\r\n\r\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\r\n\r\n      if (labelOpts.usePointStyle) {\r\n        // Recalculate x and y for drawPoint() because its expecting\r\n        // x and y to be center of figure (instead of top left)\r\n        const drawOptions = {\r\n          radius: boxHeight * Math.SQRT2 / 2,\r\n          pointStyle: legendItem.pointStyle,\r\n          rotation: legendItem.rotation,\r\n          borderWidth: lineWidth\r\n        };\r\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\r\n        const centerY = y + halfFontSize;\r\n\r\n        // Draw pointStyle as legend symbol\r\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\r\n      } else {\r\n        // Draw box as legend symbol\r\n        // Adjust position when boxHeight < fontSize (want it centered)\r\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\r\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\r\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\r\n\r\n        ctx.beginPath();\r\n\r\n        if (Object.values(borderRadius).some(v => v !== 0)) {\r\n          addRoundedRectPath(ctx, {\r\n            x: xBoxLeft,\r\n            y: yBoxTop,\r\n            w: boxWidth,\r\n            h: boxHeight,\r\n            radius: borderRadius,\r\n          });\r\n        } else {\r\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\r\n        }\r\n\r\n        ctx.fill();\r\n        if (lineWidth !== 0) {\r\n          ctx.stroke();\r\n        }\r\n      }\r\n\r\n      ctx.restore();\r\n    };\r\n\r\n    const fillText = function(x, y, legendItem) {\r\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\r\n        strikethrough: legendItem.hidden,\r\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\r\n      });\r\n    };\r\n\r\n    // Horizontal\r\n    const isHorizontal = this.isHorizontal();\r\n    const titleHeight = this._computeTitleHeight();\r\n    if (isHorizontal) {\r\n      cursor = {\r\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\r\n        y: this.top + padding + titleHeight,\r\n        line: 0\r\n      };\r\n    } else {\r\n      cursor = {\r\n        x: this.left + padding,\r\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\r\n        line: 0\r\n      };\r\n    }\r\n\r\n    overrideTextDirection(this.ctx, opts.textDirection);\r\n\r\n    const lineHeight = itemHeight + padding;\r\n    this.legendItems.forEach((legendItem, i) => {\r\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\r\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\r\n\r\n      const textWidth = ctx.measureText(legendItem.text).width;\r\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\r\n      const width = boxWidth + halfFontSize + textWidth;\r\n      let x = cursor.x;\r\n      let y = cursor.y;\r\n\r\n      rtlHelper.setWidth(this.width);\r\n\r\n      if (isHorizontal) {\r\n        if (i > 0 && x + width + padding > this.right) {\r\n          y = cursor.y += lineHeight;\r\n          cursor.line++;\r\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\r\n        }\r\n      } else if (i > 0 && y + lineHeight > this.bottom) {\r\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\r\n        cursor.line++;\r\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\r\n      }\r\n\r\n      const realX = rtlHelper.x(x);\r\n\r\n      drawLegendBox(realX, y, legendItem);\r\n\r\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\r\n\r\n      // Fill the actual label\r\n      fillText(rtlHelper.x(x), y, legendItem);\r\n\r\n      if (isHorizontal) {\r\n        cursor.x += width + padding;\r\n      } else if (typeof legendItem.text !== 'string') {\r\n        const fontLineHeight = labelFont.lineHeight;\r\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\r\n      } else {\r\n        cursor.y += lineHeight;\r\n      }\r\n    });\r\n\r\n    restoreTextDirection(this.ctx, opts.textDirection);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawTitle() {\r\n    const opts = this.options;\r\n    const titleOpts = opts.title;\r\n    const titleFont = toFont(titleOpts.font);\r\n    const titlePadding = toPadding(titleOpts.padding);\r\n\r\n    if (!titleOpts.display) {\r\n      return;\r\n    }\r\n\r\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\r\n    const ctx = this.ctx;\r\n    const position = titleOpts.position;\r\n    const halfFontSize = titleFont.size / 2;\r\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\r\n    let y;\r\n\r\n    // These defaults are used when the legend is vertical.\r\n    // When horizontal, they are computed below.\r\n    let left = this.left;\r\n    let maxWidth = this.width;\r\n\r\n    if (this.isHorizontal()) {\r\n      // Move left / right so that the title is above the legend lines\r\n      maxWidth = Math.max(...this.lineWidths);\r\n      y = this.top + topPaddingPlusHalfFontSize;\r\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\r\n    } else {\r\n      // Move down so that the title is above the legend stack in every alignment\r\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\r\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\r\n    }\r\n\r\n    // Now that we know the left edge of the inner legend box, compute the correct\r\n    // X coordinate from the title alignment\r\n    const x = _alignStartEnd(position, left, left + maxWidth);\r\n\r\n    // Canvas setup\r\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\r\n    ctx.textBaseline = 'middle';\r\n    ctx.strokeStyle = titleOpts.color;\r\n    ctx.fillStyle = titleOpts.color;\r\n    ctx.font = titleFont.string;\r\n\r\n    renderText(ctx, titleOpts.text, x, y, titleFont);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeTitleHeight() {\r\n    const titleOpts = this.options.title;\r\n    const titleFont = toFont(titleOpts.font);\r\n    const titlePadding = toPadding(titleOpts.padding);\r\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getLegendItemAt(x, y) {\r\n    let i, hitBox, lh;\r\n\r\n    if (_isBetween(x, this.left, this.right)\r\n      && _isBetween(y, this.top, this.bottom)) {\r\n      // See if we are touching one of the dataset boxes\r\n      lh = this.legendHitBoxes;\r\n      for (i = 0; i < lh.length; ++i) {\r\n        hitBox = lh[i];\r\n\r\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\r\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\r\n          // Touching an element\r\n          return this.legendItems[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n\t * Handle an event\r\n\t * @param {ChartEvent} e - The event to handle\r\n\t */\r\n  handleEvent(e) {\r\n    const opts = this.options;\r\n    if (!isListened(e.type, opts)) {\r\n      return;\r\n    }\r\n\r\n    // Chart event already has relative position in it\r\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\r\n\r\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\r\n      const previous = this._hoveredItem;\r\n      const sameItem = itemsEqual(previous, hoveredItem);\r\n      if (previous && !sameItem) {\r\n        call(opts.onLeave, [e, previous, this], this);\r\n      }\r\n\r\n      this._hoveredItem = hoveredItem;\r\n\r\n      if (hoveredItem && !sameItem) {\r\n        call(opts.onHover, [e, hoveredItem, this], this);\r\n      }\r\n    } else if (hoveredItem) {\r\n      call(opts.onClick, [e, hoveredItem, this], this);\r\n    }\r\n  }\r\n}\r\n\r\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\r\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\r\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\r\n  return {itemWidth, itemHeight};\r\n}\r\n\r\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\r\n  let legendItemText = legendItem.text;\r\n  if (legendItemText && typeof legendItemText !== 'string') {\r\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\r\n  }\r\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\r\n}\r\n\r\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\r\n  let itemHeight = _itemHeight;\r\n  if (typeof legendItem.text !== 'string') {\r\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\r\n  }\r\n  return itemHeight;\r\n}\r\n\r\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\r\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\r\n  return fontLineHeight * labelHeight;\r\n}\r\n\r\nfunction isListened(type, opts) {\r\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\r\n    return true;\r\n  }\r\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default {\r\n  id: 'legend',\r\n\r\n  /**\r\n\t * For tests\r\n\t * @private\r\n\t */\r\n  _element: Legend,\r\n\r\n  start(chart, _args, options) {\r\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\r\n    layouts.configure(chart, legend, options);\r\n    layouts.addBox(chart, legend);\r\n  },\r\n\r\n  stop(chart) {\r\n    layouts.removeBox(chart, chart.legend);\r\n    delete chart.legend;\r\n  },\r\n\r\n  // During the beforeUpdate step, the layout configuration needs to run\r\n  // This ensures that if the legend position changes (via an option update)\r\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\r\n  beforeUpdate(chart, _args, options) {\r\n    const legend = chart.legend;\r\n    layouts.configure(chart, legend, options);\r\n    legend.options = options;\r\n  },\r\n\r\n  // The labels need to be built after datasets are updated to ensure that colors\r\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\r\n  afterUpdate(chart) {\r\n    const legend = chart.legend;\r\n    legend.buildLabels();\r\n    legend.adjustHitBoxes();\r\n  },\r\n\r\n\r\n  afterEvent(chart, args) {\r\n    if (!args.replay) {\r\n      chart.legend.handleEvent(args.event);\r\n    }\r\n  },\r\n\r\n  defaults: {\r\n    display: true,\r\n    position: 'top',\r\n    align: 'center',\r\n    fullSize: true,\r\n    reverse: false,\r\n    weight: 1000,\r\n\r\n    // a callback that will handle\r\n    onClick(e, legendItem, legend) {\r\n      const index = legendItem.datasetIndex;\r\n      const ci = legend.chart;\r\n      if (ci.isDatasetVisible(index)) {\r\n        ci.hide(index);\r\n        legendItem.hidden = true;\r\n      } else {\r\n        ci.show(index);\r\n        legendItem.hidden = false;\r\n      }\r\n    },\r\n\r\n    onHover: null,\r\n    onLeave: null,\r\n\r\n    labels: {\r\n      color: (ctx) => ctx.chart.options.color,\r\n      boxWidth: 40,\r\n      padding: 10,\r\n      // Generates labels shown in the legend\r\n      // Valid properties to return:\r\n      // text : text to display\r\n      // fillStyle : fill of coloured box\r\n      // strokeStyle: stroke of coloured box\r\n      // hidden : if this legend item refers to a hidden item\r\n      // lineCap : cap style for line\r\n      // lineDash\r\n      // lineDashOffset :\r\n      // lineJoin :\r\n      // lineWidth :\r\n      generateLabels(chart) {\r\n        const datasets = chart.data.datasets;\r\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\r\n\r\n        return chart._getSortedDatasetMetas().map((meta) => {\r\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\r\n          const borderWidth = toPadding(style.borderWidth);\r\n\r\n          return {\r\n            text: datasets[meta.index].label,\r\n            fillStyle: style.backgroundColor,\r\n            fontColor: color,\r\n            hidden: !meta.visible,\r\n            lineCap: style.borderCapStyle,\r\n            lineDash: style.borderDash,\r\n            lineDashOffset: style.borderDashOffset,\r\n            lineJoin: style.borderJoinStyle,\r\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\r\n            strokeStyle: style.borderColor,\r\n            pointStyle: pointStyle || style.pointStyle,\r\n            rotation: style.rotation,\r\n            textAlign: textAlign || style.textAlign,\r\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\r\n\r\n            // Below is extra data used for toggling the datasets\r\n            datasetIndex: meta.index\r\n          };\r\n        }, this);\r\n      }\r\n    },\r\n\r\n    title: {\r\n      color: (ctx) => ctx.chart.options.color,\r\n      display: false,\r\n      position: 'center',\r\n      text: '',\r\n    }\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: (name) => !name.startsWith('on'),\r\n    labels: {\r\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\r\n    }\r\n  },\r\n};\r\n","import Element from '../core/core.element';\r\nimport layouts from '../core/core.layouts';\r\nimport {PI, isArray, toPadding, toFont} from '../helpers';\r\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras';\r\nimport {renderText} from '../helpers/helpers.canvas';\r\n\r\nexport class Title extends Element {\r\n  /**\r\n\t * @param {{ ctx: any; options: any; chart: any; }} config\r\n\t */\r\n  constructor(config) {\r\n    super();\r\n\r\n    this.chart = config.chart;\r\n    this.options = config.options;\r\n    this.ctx = config.ctx;\r\n    this._padding = undefined;\r\n    this.top = undefined;\r\n    this.bottom = undefined;\r\n    this.left = undefined;\r\n    this.right = undefined;\r\n    this.width = undefined;\r\n    this.height = undefined;\r\n    this.position = undefined;\r\n    this.weight = undefined;\r\n    this.fullSize = undefined;\r\n  }\r\n\r\n  update(maxWidth, maxHeight) {\r\n    const opts = this.options;\r\n\r\n    this.left = 0;\r\n    this.top = 0;\r\n\r\n    if (!opts.display) {\r\n      this.width = this.height = this.right = this.bottom = 0;\r\n      return;\r\n    }\r\n\r\n    this.width = this.right = maxWidth;\r\n    this.height = this.bottom = maxHeight;\r\n\r\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\r\n    this._padding = toPadding(opts.padding);\r\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\r\n\r\n    if (this.isHorizontal()) {\r\n      this.height = textSize;\r\n    } else {\r\n      this.width = textSize;\r\n    }\r\n  }\r\n\r\n  isHorizontal() {\r\n    const pos = this.options.position;\r\n    return pos === 'top' || pos === 'bottom';\r\n  }\r\n\r\n  _drawArgs(offset) {\r\n    const {top, left, bottom, right, options} = this;\r\n    const align = options.align;\r\n    let rotation = 0;\r\n    let maxWidth, titleX, titleY;\r\n\r\n    if (this.isHorizontal()) {\r\n      titleX = _alignStartEnd(align, left, right);\r\n      titleY = top + offset;\r\n      maxWidth = right - left;\r\n    } else {\r\n      if (options.position === 'left') {\r\n        titleX = left + offset;\r\n        titleY = _alignStartEnd(align, bottom, top);\r\n        rotation = PI * -0.5;\r\n      } else {\r\n        titleX = right - offset;\r\n        titleY = _alignStartEnd(align, top, bottom);\r\n        rotation = PI * 0.5;\r\n      }\r\n      maxWidth = bottom - top;\r\n    }\r\n    return {titleX, titleY, maxWidth, rotation};\r\n  }\r\n\r\n  draw() {\r\n    const ctx = this.ctx;\r\n    const opts = this.options;\r\n\r\n    if (!opts.display) {\r\n      return;\r\n    }\r\n\r\n    const fontOpts = toFont(opts.font);\r\n    const lineHeight = fontOpts.lineHeight;\r\n    const offset = lineHeight / 2 + this._padding.top;\r\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\r\n\r\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\r\n      color: opts.color,\r\n      maxWidth,\r\n      rotation,\r\n      textAlign: _toLeftRightCenter(opts.align),\r\n      textBaseline: 'middle',\r\n      translation: [titleX, titleY],\r\n    });\r\n  }\r\n}\r\n\r\nfunction createTitle(chart, titleOpts) {\r\n  const title = new Title({\r\n    ctx: chart.ctx,\r\n    options: titleOpts,\r\n    chart\r\n  });\r\n\r\n  layouts.configure(chart, title, titleOpts);\r\n  layouts.addBox(chart, title);\r\n  chart.titleBlock = title;\r\n}\r\n\r\nexport default {\r\n  id: 'title',\r\n\r\n  /**\r\n\t * For tests\r\n\t * @private\r\n\t */\r\n  _element: Title,\r\n\r\n  start(chart, _args, options) {\r\n    createTitle(chart, options);\r\n  },\r\n\r\n  stop(chart) {\r\n    const titleBlock = chart.titleBlock;\r\n    layouts.removeBox(chart, titleBlock);\r\n    delete chart.titleBlock;\r\n  },\r\n\r\n  beforeUpdate(chart, _args, options) {\r\n    const title = chart.titleBlock;\r\n    layouts.configure(chart, title, options);\r\n    title.options = options;\r\n  },\r\n\r\n  defaults: {\r\n    align: 'center',\r\n    display: false,\r\n    font: {\r\n      weight: 'bold',\r\n    },\r\n    fullSize: true,\r\n    padding: 10,\r\n    position: 'top',\r\n    text: '',\r\n    weight: 2000         // by default greater than legend (1000) to be above\r\n  },\r\n\r\n  defaultRoutes: {\r\n    color: 'color'\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: true,\r\n    _indexable: false,\r\n  },\r\n};\r\n","import {Title} from './plugin.title';\r\nimport layouts from '../core/core.layouts';\r\n\r\nconst map = new WeakMap();\r\n\r\nexport default {\r\n  id: 'subtitle',\r\n\r\n  start(chart, _args, options) {\r\n    const title = new Title({\r\n      ctx: chart.ctx,\r\n      options,\r\n      chart\r\n    });\r\n\r\n    layouts.configure(chart, title, options);\r\n    layouts.addBox(chart, title);\r\n    map.set(chart, title);\r\n  },\r\n\r\n  stop(chart) {\r\n    layouts.removeBox(chart, map.get(chart));\r\n    map.delete(chart);\r\n  },\r\n\r\n  beforeUpdate(chart, _args, options) {\r\n    const title = map.get(chart);\r\n    layouts.configure(chart, title, options);\r\n    title.options = options;\r\n  },\r\n\r\n  defaults: {\r\n    align: 'center',\r\n    display: false,\r\n    font: {\r\n      weight: 'normal',\r\n    },\r\n    fullSize: true,\r\n    padding: 0,\r\n    position: 'top',\r\n    text: '',\r\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\r\n  },\r\n\r\n  defaultRoutes: {\r\n    color: 'color'\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: true,\r\n    _indexable: false,\r\n  },\r\n};\r\n","import Animations from '../core/core.animations';\r\nimport Element from '../core/core.element';\r\nimport {addRoundedRectPath} from '../helpers/helpers.canvas';\r\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core';\r\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options';\r\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl';\r\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math';\r\nimport {createContext, drawPoint} from '../helpers';\r\n\r\n/**\r\n * @typedef { import(\"../platform/platform.base\").Chart } Chart\r\n * @typedef { import(\"../../types\").ChartEvent } ChartEvent\r\n * @typedef { import(\"../../types\").ActiveElement } ActiveElement\r\n * @typedef { import(\"../core/core.interaction\").InteractionItem } InteractionItem\r\n */\r\n\r\nconst positioners = {\r\n  /**\r\n\t * Average mode places the tooltip at the average position of the elements shown\r\n\t */\r\n  average(items) {\r\n    if (!items.length) {\r\n      return false;\r\n    }\r\n\r\n    let i, len;\r\n    let x = 0;\r\n    let y = 0;\r\n    let count = 0;\r\n\r\n    for (i = 0, len = items.length; i < len; ++i) {\r\n      const el = items[i].element;\r\n      if (el && el.hasValue()) {\r\n        const pos = el.tooltipPosition();\r\n        x += pos.x;\r\n        y += pos.y;\r\n        ++count;\r\n      }\r\n    }\r\n\r\n    return {\r\n      x: x / count,\r\n      y: y / count\r\n    };\r\n  },\r\n\r\n  /**\r\n\t * Gets the tooltip position nearest of the item nearest to the event position\r\n\t */\r\n  nearest(items, eventPosition) {\r\n    if (!items.length) {\r\n      return false;\r\n    }\r\n\r\n    let x = eventPosition.x;\r\n    let y = eventPosition.y;\r\n    let minDistance = Number.POSITIVE_INFINITY;\r\n    let i, len, nearestElement;\r\n\r\n    for (i = 0, len = items.length; i < len; ++i) {\r\n      const el = items[i].element;\r\n      if (el && el.hasValue()) {\r\n        const center = el.getCenterPoint();\r\n        const d = distanceBetweenPoints(eventPosition, center);\r\n\r\n        if (d < minDistance) {\r\n          minDistance = d;\r\n          nearestElement = el;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (nearestElement) {\r\n      const tp = nearestElement.tooltipPosition();\r\n      x = tp.x;\r\n      y = tp.y;\r\n    }\r\n\r\n    return {\r\n      x,\r\n      y\r\n    };\r\n  }\r\n};\r\n\r\n// Helper to push or concat based on if the 2nd parameter is an array or not\r\nfunction pushOrConcat(base, toPush) {\r\n  if (toPush) {\r\n    if (isArray(toPush)) {\r\n      // base = base.concat(toPush);\r\n      Array.prototype.push.apply(base, toPush);\r\n    } else {\r\n      base.push(toPush);\r\n    }\r\n  }\r\n\r\n  return base;\r\n}\r\n\r\n/**\r\n * Returns array of strings split by newline\r\n * @param {*} str - The value to split by newline.\r\n * @returns {string|string[]} value if newline present - Returned from String split() method\r\n * @function\r\n */\r\nfunction splitNewlines(str) {\r\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\r\n    return str.split('\\n');\r\n  }\r\n  return str;\r\n}\r\n\r\n\r\n/**\r\n * Private helper to create a tooltip item model\r\n * @param {Chart} chart\r\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\r\n * @return new tooltip item\r\n */\r\nfunction createTooltipItem(chart, item) {\r\n  const {element, datasetIndex, index} = item;\r\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\r\n  const {label, value} = controller.getLabelAndValue(index);\r\n\r\n  return {\r\n    chart,\r\n    label,\r\n    parsed: controller.getParsed(index),\r\n    raw: chart.data.datasets[datasetIndex].data[index],\r\n    formattedValue: value,\r\n    dataset: controller.getDataset(),\r\n    dataIndex: index,\r\n    datasetIndex,\r\n    element\r\n  };\r\n}\r\n\r\n/**\r\n * Get the size of the tooltip\r\n */\r\nfunction getTooltipSize(tooltip, options) {\r\n  const ctx = tooltip.chart.ctx;\r\n  const {body, footer, title} = tooltip;\r\n  const {boxWidth, boxHeight} = options;\r\n  const bodyFont = toFont(options.bodyFont);\r\n  const titleFont = toFont(options.titleFont);\r\n  const footerFont = toFont(options.footerFont);\r\n  const titleLineCount = title.length;\r\n  const footerLineCount = footer.length;\r\n  const bodyLineItemCount = body.length;\r\n\r\n  const padding = toPadding(options.padding);\r\n  let height = padding.height;\r\n  let width = 0;\r\n\r\n  // Count of all lines in the body\r\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\r\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\r\n\r\n  if (titleLineCount) {\r\n    height += titleLineCount * titleFont.lineHeight\r\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\r\n\t\t\t+ options.titleMarginBottom;\r\n  }\r\n  if (combinedBodyLength) {\r\n    // Body lines may include some extra height depending on boxHeight\r\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\r\n    height += bodyLineItemCount * bodyLineHeight\r\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\r\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\r\n  }\r\n  if (footerLineCount) {\r\n    height += options.footerMarginTop\r\n\t\t\t+ footerLineCount * footerFont.lineHeight\r\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\r\n  }\r\n\r\n  // Title width\r\n  let widthPadding = 0;\r\n  const maxLineWidth = function(line) {\r\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\r\n  };\r\n\r\n  ctx.save();\r\n\r\n  ctx.font = titleFont.string;\r\n  each(tooltip.title, maxLineWidth);\r\n\r\n  // Body width\r\n  ctx.font = bodyFont.string;\r\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\r\n\r\n  // Body lines may include some extra width due to the color box\r\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\r\n  each(body, (bodyItem) => {\r\n    each(bodyItem.before, maxLineWidth);\r\n    each(bodyItem.lines, maxLineWidth);\r\n    each(bodyItem.after, maxLineWidth);\r\n  });\r\n\r\n  // Reset back to 0\r\n  widthPadding = 0;\r\n\r\n  // Footer width\r\n  ctx.font = footerFont.string;\r\n  each(tooltip.footer, maxLineWidth);\r\n\r\n  ctx.restore();\r\n\r\n  // Add padding\r\n  width += padding.width;\r\n\r\n  return {width, height};\r\n}\r\n\r\nfunction determineYAlign(chart, size) {\r\n  const {y, height} = size;\r\n\r\n  if (y < height / 2) {\r\n    return 'top';\r\n  } else if (y > (chart.height - height / 2)) {\r\n    return 'bottom';\r\n  }\r\n  return 'center';\r\n}\r\n\r\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\r\n  const {x, width} = size;\r\n  const caret = options.caretSize + options.caretPadding;\r\n  if (xAlign === 'left' && x + width + caret > chart.width) {\r\n    return true;\r\n  }\r\n\r\n  if (xAlign === 'right' && x - width - caret < 0) {\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction determineXAlign(chart, options, size, yAlign) {\r\n  const {x, width} = size;\r\n  const {width: chartWidth, chartArea: {left, right}} = chart;\r\n  let xAlign = 'center';\r\n\r\n  if (yAlign === 'center') {\r\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\r\n  } else if (x <= width / 2) {\r\n    xAlign = 'left';\r\n  } else if (x >= chartWidth - width / 2) {\r\n    xAlign = 'right';\r\n  }\r\n\r\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\r\n    xAlign = 'center';\r\n  }\r\n\r\n  return xAlign;\r\n}\r\n\r\n/**\r\n * Helper to get the alignment of a tooltip given the size\r\n */\r\nfunction determineAlignment(chart, options, size) {\r\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\r\n\r\n  return {\r\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\r\n    yAlign\r\n  };\r\n}\r\n\r\nfunction alignX(size, xAlign) {\r\n  let {x, width} = size;\r\n  if (xAlign === 'right') {\r\n    x -= width;\r\n  } else if (xAlign === 'center') {\r\n    x -= (width / 2);\r\n  }\r\n  return x;\r\n}\r\n\r\nfunction alignY(size, yAlign, paddingAndSize) {\r\n  // eslint-disable-next-line prefer-const\r\n  let {y, height} = size;\r\n  if (yAlign === 'top') {\r\n    y += paddingAndSize;\r\n  } else if (yAlign === 'bottom') {\r\n    y -= height + paddingAndSize;\r\n  } else {\r\n    y -= (height / 2);\r\n  }\r\n  return y;\r\n}\r\n\r\n/**\r\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\r\n */\r\nfunction getBackgroundPoint(options, size, alignment, chart) {\r\n  const {caretSize, caretPadding, cornerRadius} = options;\r\n  const {xAlign, yAlign} = alignment;\r\n  const paddingAndSize = caretSize + caretPadding;\r\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\r\n\r\n  let x = alignX(size, xAlign);\r\n  const y = alignY(size, yAlign, paddingAndSize);\r\n\r\n  if (yAlign === 'center') {\r\n    if (xAlign === 'left') {\r\n      x += paddingAndSize;\r\n    } else if (xAlign === 'right') {\r\n      x -= paddingAndSize;\r\n    }\r\n  } else if (xAlign === 'left') {\r\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\r\n  } else if (xAlign === 'right') {\r\n    x += Math.max(topRight, bottomRight) + caretSize;\r\n  }\r\n\r\n  return {\r\n    x: _limitValue(x, 0, chart.width - size.width),\r\n    y: _limitValue(y, 0, chart.height - size.height)\r\n  };\r\n}\r\n\r\nfunction getAlignedX(tooltip, align, options) {\r\n  const padding = toPadding(options.padding);\r\n\r\n  return align === 'center'\r\n    ? tooltip.x + tooltip.width / 2\r\n    : align === 'right'\r\n      ? tooltip.x + tooltip.width - padding.right\r\n      : tooltip.x + padding.left;\r\n}\r\n\r\n/**\r\n * Helper to build before and after body lines\r\n */\r\nfunction getBeforeAfterBodyLines(callback) {\r\n  return pushOrConcat([], splitNewlines(callback));\r\n}\r\n\r\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\r\n  return createContext(parent, {\r\n    tooltip,\r\n    tooltipItems,\r\n    type: 'tooltip'\r\n  });\r\n}\r\n\r\nfunction overrideCallbacks(callbacks, context) {\r\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\r\n  return override ? callbacks.override(override) : callbacks;\r\n}\r\n\r\nconst defaultCallbacks = {\r\n  // Args are: (tooltipItems, data)\r\n  beforeTitle: noop,\r\n  title(tooltipItems) {\r\n    if (tooltipItems.length > 0) {\r\n      const item = tooltipItems[0];\r\n      const labels = item.chart.data.labels;\r\n      const labelCount = labels ? labels.length : 0;\r\n\r\n      if (this && this.options && this.options.mode === 'dataset') {\r\n        return item.dataset.label || '';\r\n      } else if (item.label) {\r\n        return item.label;\r\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\r\n        return labels[item.dataIndex];\r\n      }\r\n    }\r\n\r\n    return '';\r\n  },\r\n  afterTitle: noop,\r\n\r\n  // Args are: (tooltipItems, data)\r\n  beforeBody: noop,\r\n\r\n  // Args are: (tooltipItem, data)\r\n  beforeLabel: noop,\r\n  label(tooltipItem) {\r\n    if (this && this.options && this.options.mode === 'dataset') {\r\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\r\n    }\r\n\r\n    let label = tooltipItem.dataset.label || '';\r\n\r\n    if (label) {\r\n      label += ': ';\r\n    }\r\n    const value = tooltipItem.formattedValue;\r\n    if (!isNullOrUndef(value)) {\r\n      label += value;\r\n    }\r\n    return label;\r\n  },\r\n  labelColor(tooltipItem) {\r\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\r\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\r\n    return {\r\n      borderColor: options.borderColor,\r\n      backgroundColor: options.backgroundColor,\r\n      borderWidth: options.borderWidth,\r\n      borderDash: options.borderDash,\r\n      borderDashOffset: options.borderDashOffset,\r\n      borderRadius: 0,\r\n    };\r\n  },\r\n  labelTextColor() {\r\n    return this.options.bodyColor;\r\n  },\r\n  labelPointStyle(tooltipItem) {\r\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\r\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\r\n    return {\r\n      pointStyle: options.pointStyle,\r\n      rotation: options.rotation,\r\n    };\r\n  },\r\n  afterLabel: noop,\r\n\r\n  // Args are: (tooltipItems, data)\r\n  afterBody: noop,\r\n\r\n  // Args are: (tooltipItems, data)\r\n  beforeFooter: noop,\r\n  footer: noop,\r\n  afterFooter: noop\r\n};\r\n\r\n/**\r\n * Invoke callback from object with context and arguments.\r\n * If callback returns `undefined`, then will be invoked default callback.\r\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\r\n * @param {keyof typeof defaultCallbacks} name\r\n * @param {*} ctx\r\n * @param {*} arg\r\n * @returns {any}\r\n */\r\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\r\n  const result = callbacks[name].call(ctx, arg);\r\n\r\n  if (typeof result === 'undefined') {\r\n    return defaultCallbacks[name].call(ctx, arg);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport class Tooltip extends Element {\r\n\r\n  /**\r\n   * @namespace Chart.Tooltip.positioners\r\n   */\r\n  static positioners = positioners;\r\n\r\n  constructor(config) {\r\n    super();\r\n\r\n    this.opacity = 0;\r\n    this._active = [];\r\n    this._eventPosition = undefined;\r\n    this._size = undefined;\r\n    this._cachedAnimations = undefined;\r\n    this._tooltipItems = [];\r\n    this.$animations = undefined;\r\n    this.$context = undefined;\r\n    this.chart = config.chart;\r\n    this.options = config.options;\r\n    this.dataPoints = undefined;\r\n    this.title = undefined;\r\n    this.beforeBody = undefined;\r\n    this.body = undefined;\r\n    this.afterBody = undefined;\r\n    this.footer = undefined;\r\n    this.xAlign = undefined;\r\n    this.yAlign = undefined;\r\n    this.x = undefined;\r\n    this.y = undefined;\r\n    this.height = undefined;\r\n    this.width = undefined;\r\n    this.caretX = undefined;\r\n    this.caretY = undefined;\r\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\r\n    // and `labelTextColors` to create a single variable\r\n    this.labelColors = undefined;\r\n    this.labelPointStyles = undefined;\r\n    this.labelTextColors = undefined;\r\n  }\r\n\r\n  initialize(options) {\r\n    this.options = options;\r\n    this._cachedAnimations = undefined;\r\n    this.$context = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resolveAnimations() {\r\n    const cached = this._cachedAnimations;\r\n\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n\r\n    const chart = this.chart;\r\n    const options = this.options.setContext(this.getContext());\r\n    const opts = options.enabled && chart.options.animation && options.animations;\r\n    const animations = new Animations(this.chart, opts);\r\n    if (opts._cacheable) {\r\n      this._cachedAnimations = Object.freeze(animations);\r\n    }\r\n\r\n    return animations;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getContext() {\r\n    return this.$context ||\r\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\r\n  }\r\n\r\n  getTitle(context, options) {\r\n    const {callbacks} = options;\r\n\r\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\r\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\r\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\r\n\r\n    let lines = [];\r\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\r\n    lines = pushOrConcat(lines, splitNewlines(title));\r\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\r\n\r\n    return lines;\r\n  }\r\n\r\n  getBeforeBody(tooltipItems, options) {\r\n    return getBeforeAfterBodyLines(\r\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\r\n    );\r\n  }\r\n\r\n  getBody(tooltipItems, options) {\r\n    const {callbacks} = options;\r\n    const bodyItems = [];\r\n\r\n    each(tooltipItems, (context) => {\r\n      const bodyItem = {\r\n        before: [],\r\n        lines: [],\r\n        after: []\r\n      };\r\n      const scoped = overrideCallbacks(callbacks, context);\r\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\r\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\r\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\r\n\r\n      bodyItems.push(bodyItem);\r\n    });\r\n\r\n    return bodyItems;\r\n  }\r\n\r\n  getAfterBody(tooltipItems, options) {\r\n    return getBeforeAfterBodyLines(\r\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\r\n    );\r\n  }\r\n\r\n  // Get the footer and beforeFooter and afterFooter lines\r\n  getFooter(tooltipItems, options) {\r\n    const {callbacks} = options;\r\n\r\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\r\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\r\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\r\n\r\n    let lines = [];\r\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\r\n    lines = pushOrConcat(lines, splitNewlines(footer));\r\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\r\n\r\n    return lines;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _createItems(options) {\r\n    const active = this._active;\r\n    const data = this.chart.data;\r\n    const labelColors = [];\r\n    const labelPointStyles = [];\r\n    const labelTextColors = [];\r\n    let tooltipItems = [];\r\n    let i, len;\r\n\r\n    for (i = 0, len = active.length; i < len; ++i) {\r\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\r\n    }\r\n\r\n    // If the user provided a filter function, use it to modify the tooltip items\r\n    if (options.filter) {\r\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\r\n    }\r\n\r\n    // If the user provided a sorting function, use it to modify the tooltip items\r\n    if (options.itemSort) {\r\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\r\n    }\r\n\r\n    // Determine colors for boxes\r\n    each(tooltipItems, (context) => {\r\n      const scoped = overrideCallbacks(options.callbacks, context);\r\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\r\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\r\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\r\n    });\r\n\r\n    this.labelColors = labelColors;\r\n    this.labelPointStyles = labelPointStyles;\r\n    this.labelTextColors = labelTextColors;\r\n    this.dataPoints = tooltipItems;\r\n    return tooltipItems;\r\n  }\r\n\r\n  update(changed, replay) {\r\n    const options = this.options.setContext(this.getContext());\r\n    const active = this._active;\r\n    let properties;\r\n    let tooltipItems = [];\r\n\r\n    if (!active.length) {\r\n      if (this.opacity !== 0) {\r\n        properties = {\r\n          opacity: 0\r\n        };\r\n      }\r\n    } else {\r\n      const position = positioners[options.position].call(this, active, this._eventPosition);\r\n      tooltipItems = this._createItems(options);\r\n\r\n      this.title = this.getTitle(tooltipItems, options);\r\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\r\n      this.body = this.getBody(tooltipItems, options);\r\n      this.afterBody = this.getAfterBody(tooltipItems, options);\r\n      this.footer = this.getFooter(tooltipItems, options);\r\n\r\n      const size = this._size = getTooltipSize(this, options);\r\n      const positionAndSize = Object.assign({}, position, size);\r\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\r\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\r\n\r\n      this.xAlign = alignment.xAlign;\r\n      this.yAlign = alignment.yAlign;\r\n\r\n      properties = {\r\n        opacity: 1,\r\n        x: backgroundPoint.x,\r\n        y: backgroundPoint.y,\r\n        width: size.width,\r\n        height: size.height,\r\n        caretX: position.x,\r\n        caretY: position.y\r\n      };\r\n    }\r\n\r\n    this._tooltipItems = tooltipItems;\r\n    this.$context = undefined;\r\n\r\n    if (properties) {\r\n      this._resolveAnimations().update(this, properties);\r\n    }\r\n\r\n    if (changed && options.external) {\r\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\r\n    }\r\n  }\r\n\r\n  drawCaret(tooltipPoint, ctx, size, options) {\r\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\r\n\r\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\r\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\r\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\r\n  }\r\n\r\n  getCaretPosition(tooltipPoint, size, options) {\r\n    const {xAlign, yAlign} = this;\r\n    const {caretSize, cornerRadius} = options;\r\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\r\n    const {x: ptX, y: ptY} = tooltipPoint;\r\n    const {width, height} = size;\r\n    let x1, x2, x3, y1, y2, y3;\r\n\r\n    if (yAlign === 'center') {\r\n      y2 = ptY + (height / 2);\r\n\r\n      if (xAlign === 'left') {\r\n        x1 = ptX;\r\n        x2 = x1 - caretSize;\r\n\r\n        // Left draws bottom -> top, this y1 is on the bottom\r\n        y1 = y2 + caretSize;\r\n        y3 = y2 - caretSize;\r\n      } else {\r\n        x1 = ptX + width;\r\n        x2 = x1 + caretSize;\r\n\r\n        // Right draws top -> bottom, thus y1 is on the top\r\n        y1 = y2 - caretSize;\r\n        y3 = y2 + caretSize;\r\n      }\r\n\r\n      x3 = x1;\r\n    } else {\r\n      if (xAlign === 'left') {\r\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\r\n      } else if (xAlign === 'right') {\r\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\r\n      } else {\r\n        x2 = this.caretX;\r\n      }\r\n\r\n      if (yAlign === 'top') {\r\n        y1 = ptY;\r\n        y2 = y1 - caretSize;\r\n\r\n        // Top draws left -> right, thus x1 is on the left\r\n        x1 = x2 - caretSize;\r\n        x3 = x2 + caretSize;\r\n      } else {\r\n        y1 = ptY + height;\r\n        y2 = y1 + caretSize;\r\n\r\n        // Bottom draws right -> left, thus x1 is on the right\r\n        x1 = x2 + caretSize;\r\n        x3 = x2 - caretSize;\r\n      }\r\n      y3 = y1;\r\n    }\r\n    return {x1, x2, x3, y1, y2, y3};\r\n  }\r\n\r\n  drawTitle(pt, ctx, options) {\r\n    const title = this.title;\r\n    const length = title.length;\r\n    let titleFont, titleSpacing, i;\r\n\r\n    if (length) {\r\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n\r\n      pt.x = getAlignedX(this, options.titleAlign, options);\r\n\r\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\r\n      ctx.textBaseline = 'middle';\r\n\r\n      titleFont = toFont(options.titleFont);\r\n      titleSpacing = options.titleSpacing;\r\n\r\n      ctx.fillStyle = options.titleColor;\r\n      ctx.font = titleFont.string;\r\n\r\n      for (i = 0; i < length; ++i) {\r\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\r\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\r\n\r\n        if (i + 1 === length) {\r\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\r\n    const labelColors = this.labelColors[i];\r\n    const labelPointStyle = this.labelPointStyles[i];\r\n    const {boxHeight, boxWidth, boxPadding} = options;\r\n    const bodyFont = toFont(options.bodyFont);\r\n    const colorX = getAlignedX(this, 'left', options);\r\n    const rtlColorX = rtlHelper.x(colorX);\r\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\r\n    const colorY = pt.y + yOffSet;\r\n\r\n    if (options.usePointStyle) {\r\n      const drawOptions = {\r\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\r\n        pointStyle: labelPointStyle.pointStyle,\r\n        rotation: labelPointStyle.rotation,\r\n        borderWidth: 1\r\n      };\r\n      // Recalculate x and y for drawPoint() because its expecting\r\n      // x and y to be center of figure (instead of top left)\r\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\r\n      const centerY = colorY + boxHeight / 2;\r\n\r\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\r\n      ctx.strokeStyle = options.multiKeyBackground;\r\n      ctx.fillStyle = options.multiKeyBackground;\r\n      drawPoint(ctx, drawOptions, centerX, centerY);\r\n\r\n      // Draw the point\r\n      ctx.strokeStyle = labelColors.borderColor;\r\n      ctx.fillStyle = labelColors.backgroundColor;\r\n      drawPoint(ctx, drawOptions, centerX, centerY);\r\n    } else {\r\n      // Border\r\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1); // TODO, v4 remove fallback\r\n      ctx.strokeStyle = labelColors.borderColor;\r\n      ctx.setLineDash(labelColors.borderDash || []);\r\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\r\n\r\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\r\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\r\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\r\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\r\n\r\n      if (Object.values(borderRadius).some(v => v !== 0)) {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = options.multiKeyBackground;\r\n        addRoundedRectPath(ctx, {\r\n          x: outerX,\r\n          y: colorY,\r\n          w: boxWidth,\r\n          h: boxHeight,\r\n          radius: borderRadius,\r\n        });\r\n        ctx.fill();\r\n        ctx.stroke();\r\n\r\n        // Inner square\r\n        ctx.fillStyle = labelColors.backgroundColor;\r\n        ctx.beginPath();\r\n        addRoundedRectPath(ctx, {\r\n          x: innerX,\r\n          y: colorY + 1,\r\n          w: boxWidth - 2,\r\n          h: boxHeight - 2,\r\n          radius: borderRadius,\r\n        });\r\n        ctx.fill();\r\n      } else {\r\n        // Normal rect\r\n        ctx.fillStyle = options.multiKeyBackground;\r\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\r\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\r\n        // Inner square\r\n        ctx.fillStyle = labelColors.backgroundColor;\r\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\r\n      }\r\n    }\r\n\r\n    // restore fillStyle\r\n    ctx.fillStyle = this.labelTextColors[i];\r\n  }\r\n\r\n  drawBody(pt, ctx, options) {\r\n    const {body} = this;\r\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\r\n    const bodyFont = toFont(options.bodyFont);\r\n    let bodyLineHeight = bodyFont.lineHeight;\r\n    let xLinePadding = 0;\r\n\r\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n\r\n    const fillLineOfText = function(line) {\r\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\r\n      pt.y += bodyLineHeight + bodySpacing;\r\n    };\r\n\r\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\r\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\r\n\r\n    ctx.textAlign = bodyAlign;\r\n    ctx.textBaseline = 'middle';\r\n    ctx.font = bodyFont.string;\r\n\r\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\r\n\r\n    // Before body lines\r\n    ctx.fillStyle = options.bodyColor;\r\n    each(this.beforeBody, fillLineOfText);\r\n\r\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\r\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\r\n      : 0;\r\n\r\n    // Draw body lines now\r\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\r\n      bodyItem = body[i];\r\n      textColor = this.labelTextColors[i];\r\n\r\n      ctx.fillStyle = textColor;\r\n      each(bodyItem.before, fillLineOfText);\r\n\r\n      lines = bodyItem.lines;\r\n      // Draw Legend-like boxes if needed\r\n      if (displayColors && lines.length) {\r\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\r\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\r\n      }\r\n\r\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\r\n        fillLineOfText(lines[j]);\r\n        // Reset for any lines that don't include colorbox\r\n        bodyLineHeight = bodyFont.lineHeight;\r\n      }\r\n\r\n      each(bodyItem.after, fillLineOfText);\r\n    }\r\n\r\n    // Reset back to 0 for after body\r\n    xLinePadding = 0;\r\n    bodyLineHeight = bodyFont.lineHeight;\r\n\r\n    // After body lines\r\n    each(this.afterBody, fillLineOfText);\r\n    pt.y -= bodySpacing; // Remove last body spacing\r\n  }\r\n\r\n  drawFooter(pt, ctx, options) {\r\n    const footer = this.footer;\r\n    const length = footer.length;\r\n    let footerFont, i;\r\n\r\n    if (length) {\r\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n\r\n      pt.x = getAlignedX(this, options.footerAlign, options);\r\n      pt.y += options.footerMarginTop;\r\n\r\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\r\n      ctx.textBaseline = 'middle';\r\n\r\n      footerFont = toFont(options.footerFont);\r\n\r\n      ctx.fillStyle = options.footerColor;\r\n      ctx.font = footerFont.string;\r\n\r\n      for (i = 0; i < length; ++i) {\r\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\r\n        pt.y += footerFont.lineHeight + options.footerSpacing;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawBackground(pt, ctx, tooltipSize, options) {\r\n    const {xAlign, yAlign} = this;\r\n    const {x, y} = pt;\r\n    const {width, height} = tooltipSize;\r\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\r\n\r\n    ctx.fillStyle = options.backgroundColor;\r\n    ctx.strokeStyle = options.borderColor;\r\n    ctx.lineWidth = options.borderWidth;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + topLeft, y);\r\n    if (yAlign === 'top') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x + width - topRight, y);\r\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\r\n    if (yAlign === 'center' && xAlign === 'right') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x + width, y + height - bottomRight);\r\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\r\n    if (yAlign === 'bottom') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x + bottomLeft, y + height);\r\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\r\n    if (yAlign === 'center' && xAlign === 'left') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x, y + topLeft);\r\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\r\n    ctx.closePath();\r\n\r\n    ctx.fill();\r\n\r\n    if (options.borderWidth > 0) {\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Update x/y animation targets when _active elements are animating too\r\n\t * @private\r\n\t */\r\n  _updateAnimationTarget(options) {\r\n    const chart = this.chart;\r\n    const anims = this.$animations;\r\n    const animX = anims && anims.x;\r\n    const animY = anims && anims.y;\r\n    if (animX || animY) {\r\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\r\n      if (!position) {\r\n        return;\r\n      }\r\n      const size = this._size = getTooltipSize(this, options);\r\n      const positionAndSize = Object.assign({}, position, this._size);\r\n      const alignment = determineAlignment(chart, options, positionAndSize);\r\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\r\n      if (animX._to !== point.x || animY._to !== point.y) {\r\n        this.xAlign = alignment.xAlign;\r\n        this.yAlign = alignment.yAlign;\r\n        this.width = size.width;\r\n        this.height = size.height;\r\n        this.caretX = position.x;\r\n        this.caretY = position.y;\r\n        this._resolveAnimations().update(this, point);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if the tooltip will draw anything\r\n   * @returns {boolean} True if the tooltip will render\r\n   */\r\n  _willRender() {\r\n    return !!this.opacity;\r\n  }\r\n\r\n  draw(ctx) {\r\n    const options = this.options.setContext(this.getContext());\r\n    let opacity = this.opacity;\r\n\r\n    if (!opacity) {\r\n      return;\r\n    }\r\n\r\n    this._updateAnimationTarget(options);\r\n\r\n    const tooltipSize = {\r\n      width: this.width,\r\n      height: this.height\r\n    };\r\n    const pt = {\r\n      x: this.x,\r\n      y: this.y\r\n    };\r\n\r\n    // IE11/Edge does not like very small opacities, so snap to 0\r\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\r\n\r\n    const padding = toPadding(options.padding);\r\n\r\n    // Truthy/falsey value for empty tooltip\r\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\r\n\r\n    if (options.enabled && hasTooltipContent) {\r\n      ctx.save();\r\n      ctx.globalAlpha = opacity;\r\n\r\n      // Draw Background\r\n      this.drawBackground(pt, ctx, tooltipSize, options);\r\n\r\n      overrideTextDirection(ctx, options.textDirection);\r\n\r\n      pt.y += padding.top;\r\n\r\n      // Titles\r\n      this.drawTitle(pt, ctx, options);\r\n\r\n      // Body\r\n      this.drawBody(pt, ctx, options);\r\n\r\n      // Footer\r\n      this.drawFooter(pt, ctx, options);\r\n\r\n      restoreTextDirection(ctx, options.textDirection);\r\n\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Get active elements in the tooltip\r\n\t * @returns {Array} Array of elements that are active in the tooltip\r\n\t */\r\n  getActiveElements() {\r\n    return this._active || [];\r\n  }\r\n\r\n  /**\r\n\t * Set active elements in the tooltip\r\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\r\n\t * @param {object} eventPosition Synthetic event position used in positioning\r\n\t */\r\n  setActiveElements(activeElements, eventPosition) {\r\n    const lastActive = this._active;\r\n    const active = activeElements.map(({datasetIndex, index}) => {\r\n      const meta = this.chart.getDatasetMeta(datasetIndex);\r\n\r\n      if (!meta) {\r\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\r\n      }\r\n\r\n      return {\r\n        datasetIndex,\r\n        element: meta.data[index],\r\n        index,\r\n      };\r\n    });\r\n    const changed = !_elementsEqual(lastActive, active);\r\n    const positionChanged = this._positionChanged(active, eventPosition);\r\n\r\n    if (changed || positionChanged) {\r\n      this._active = active;\r\n      this._eventPosition = eventPosition;\r\n      this._ignoreReplayEvents = true;\r\n      this.update(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Handle an event\r\n\t * @param {ChartEvent} e - The event to handle\r\n\t * @param {boolean} [replay] - This is a replayed event (from update)\r\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\r\n\t * @returns {boolean} true if the tooltip changed\r\n\t */\r\n  handleEvent(e, replay, inChartArea = true) {\r\n    if (replay && this._ignoreReplayEvents) {\r\n      return false;\r\n    }\r\n    this._ignoreReplayEvents = false;\r\n\r\n    const options = this.options;\r\n    const lastActive = this._active || [];\r\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\r\n\r\n    // When there are multiple items shown, but the tooltip position is nearest mode\r\n    // an update may need to be made because our position may have changed even though\r\n    // the items are the same as before.\r\n    const positionChanged = this._positionChanged(active, e);\r\n\r\n    // Remember Last Actives\r\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\r\n\r\n    // Only handle target event on tooltip change\r\n    if (changed) {\r\n      this._active = active;\r\n\r\n      if (options.enabled || options.external) {\r\n        this._eventPosition = {\r\n          x: e.x,\r\n          y: e.y\r\n        };\r\n\r\n        this.update(true, replay);\r\n      }\r\n    }\r\n\r\n    return changed;\r\n  }\r\n\r\n  /**\r\n\t * Helper for determining the active elements for event\r\n\t * @param {ChartEvent} e - The event to handle\r\n\t * @param {InteractionItem[]} lastActive - Previously active elements\r\n\t * @param {boolean} [replay] - This is a replayed event (from update)\r\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\r\n\t * @returns {InteractionItem[]} - Active elements\r\n\t * @private\r\n\t */\r\n  _getActiveElements(e, lastActive, replay, inChartArea) {\r\n    const options = this.options;\r\n\r\n    if (e.type === 'mouseout') {\r\n      return [];\r\n    }\r\n\r\n    if (!inChartArea) {\r\n      // Let user control the active elements outside chartArea. Eg. using Legend.\r\n      return lastActive;\r\n    }\r\n\r\n    // Find Active Elements for tooltips\r\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\r\n\r\n    if (options.reverse) {\r\n      active.reverse();\r\n    }\r\n\r\n    return active;\r\n  }\r\n\r\n  /**\r\n\t * Determine if the active elements + event combination changes the\r\n\t * tooltip position\r\n\t * @param {array} active - Active elements\r\n\t * @param {ChartEvent} e - Event that triggered the position change\r\n\t * @returns {boolean} True if the position has changed\r\n\t */\r\n  _positionChanged(active, e) {\r\n    const {caretX, caretY, options} = this;\r\n    const position = positioners[options.position].call(this, active, e);\r\n    return position !== false && (caretX !== position.x || caretY !== position.y);\r\n  }\r\n}\r\n\r\nexport default {\r\n  id: 'tooltip',\r\n  _element: Tooltip,\r\n  positioners,\r\n\r\n  afterInit(chart, _args, options) {\r\n    if (options) {\r\n      chart.tooltip = new Tooltip({chart, options});\r\n    }\r\n  },\r\n\r\n  beforeUpdate(chart, _args, options) {\r\n    if (chart.tooltip) {\r\n      chart.tooltip.initialize(options);\r\n    }\r\n  },\r\n\r\n  reset(chart, _args, options) {\r\n    if (chart.tooltip) {\r\n      chart.tooltip.initialize(options);\r\n    }\r\n  },\r\n\r\n  afterDraw(chart) {\r\n    const tooltip = chart.tooltip;\r\n\r\n    if (tooltip && tooltip._willRender()) {\r\n      const args = {\r\n        tooltip\r\n      };\r\n\r\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\r\n        return;\r\n      }\r\n\r\n      tooltip.draw(chart.ctx);\r\n\r\n      chart.notifyPlugins('afterTooltipDraw', args);\r\n    }\r\n  },\r\n\r\n  afterEvent(chart, args) {\r\n    if (chart.tooltip) {\r\n      // If the event is replayed from `update`, we should evaluate with the final positions.\r\n      const useFinalPosition = args.replay;\r\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\r\n        // notify chart about the change, so it will render\r\n        args.changed = true;\r\n      }\r\n    }\r\n  },\r\n\r\n  defaults: {\r\n    enabled: true,\r\n    external: null,\r\n    position: 'average',\r\n    backgroundColor: 'rgba(0,0,0,0.8)',\r\n    titleColor: '#fff',\r\n    titleFont: {\r\n      weight: 'bold',\r\n    },\r\n    titleSpacing: 2,\r\n    titleMarginBottom: 6,\r\n    titleAlign: 'left',\r\n    bodyColor: '#fff',\r\n    bodySpacing: 2,\r\n    bodyFont: {\r\n    },\r\n    bodyAlign: 'left',\r\n    footerColor: '#fff',\r\n    footerSpacing: 2,\r\n    footerMarginTop: 6,\r\n    footerFont: {\r\n      weight: 'bold',\r\n    },\r\n    footerAlign: 'left',\r\n    padding: 6,\r\n    caretPadding: 2,\r\n    caretSize: 5,\r\n    cornerRadius: 6,\r\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\r\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\r\n    multiKeyBackground: '#fff',\r\n    displayColors: true,\r\n    boxPadding: 0,\r\n    borderColor: 'rgba(0,0,0,0)',\r\n    borderWidth: 0,\r\n    animation: {\r\n      duration: 400,\r\n      easing: 'easeOutQuart',\r\n    },\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\r\n      },\r\n      opacity: {\r\n        easing: 'linear',\r\n        duration: 200\r\n      }\r\n    },\r\n    callbacks: defaultCallbacks\r\n  },\r\n\r\n  defaultRoutes: {\r\n    bodyFont: 'font',\r\n    footerFont: 'font',\r\n    titleFont: 'font'\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\r\n    _indexable: false,\r\n    callbacks: {\r\n      _scriptable: false,\r\n      _indexable: false,\r\n    },\r\n    animation: {\r\n      _fallback: false\r\n    },\r\n    animations: {\r\n      _fallback: 'animation'\r\n    }\r\n  },\r\n\r\n  // Resolve additionally from `interaction` options and defaults.\r\n  additionalOptionScopes: ['interaction']\r\n};\r\n","import Scale from '../core/core.scale';\r\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers';\r\n\r\nconst addIfString = (labels, raw, index, addedLabels) => {\r\n  if (typeof raw === 'string') {\r\n    index = labels.push(raw) - 1;\r\n    addedLabels.unshift({index, label: raw});\r\n  } else if (isNaN(raw)) {\r\n    index = null;\r\n  }\r\n  return index;\r\n};\r\n\r\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\r\n  const first = labels.indexOf(raw);\r\n  if (first === -1) {\r\n    return addIfString(labels, raw, index, addedLabels);\r\n  }\r\n  const last = labels.lastIndexOf(raw);\r\n  return first !== last ? index : first;\r\n}\r\n\r\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\r\n\r\nfunction _getLabelForValue(value) {\r\n  const labels = this.getLabels();\r\n\r\n  if (value >= 0 && value < labels.length) {\r\n    return labels[value];\r\n  }\r\n  return value;\r\n}\r\n\r\nexport default class CategoryScale extends Scale {\r\n\r\n  static id = 'category';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    ticks: {\r\n      callback: _getLabelForValue\r\n    }\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this._startValue = undefined;\r\n    this._valueRange = 0;\r\n    this._addedLabels = [];\r\n  }\r\n\r\n  init(scaleOptions) {\r\n    const added = this._addedLabels;\r\n    if (added.length) {\r\n      const labels = this.getLabels();\r\n      for (const {index, label} of added) {\r\n        if (labels[index] === label) {\r\n          labels.splice(index, 1);\r\n        }\r\n      }\r\n      this._addedLabels = [];\r\n    }\r\n    super.init(scaleOptions);\r\n  }\r\n\r\n  parse(raw, index) {\r\n    if (isNullOrUndef(raw)) {\r\n      return null;\r\n    }\r\n    const labels = this.getLabels();\r\n    index = isFinite(index) && labels[index] === raw ? index\r\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\r\n    return validIndex(index, labels.length - 1);\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const {minDefined, maxDefined} = this.getUserBounds();\r\n    let {min, max} = this.getMinMax(true);\r\n\r\n    if (this.options.bounds === 'ticks') {\r\n      if (!minDefined) {\r\n        min = 0;\r\n      }\r\n      if (!maxDefined) {\r\n        max = this.getLabels().length - 1;\r\n      }\r\n    }\r\n\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  buildTicks() {\r\n    const min = this.min;\r\n    const max = this.max;\r\n    const offset = this.options.offset;\r\n    const ticks = [];\r\n    let labels = this.getLabels();\r\n\r\n    // If we are viewing some subset of labels, slice the original array\r\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\r\n\r\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\r\n    this._startValue = this.min - (offset ? 0.5 : 0);\r\n\r\n    for (let value = min; value <= max; value++) {\r\n      ticks.push({value});\r\n    }\r\n    return ticks;\r\n  }\r\n\r\n  getLabelForValue(value) {\r\n    return _getLabelForValue.call(this, value);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    super.configure();\r\n\r\n    if (!this.isHorizontal()) {\r\n      // For backward compatibility, vertical category scale reverse is inverted.\r\n      this._reversePixels = !this._reversePixels;\r\n    }\r\n  }\r\n\r\n  // Used to get data value locations. Value can either be an index or a numerical value\r\n  getPixelForValue(value) {\r\n    if (typeof value !== 'number') {\r\n      value = this.parse(value);\r\n    }\r\n\r\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\r\n  }\r\n\r\n  // Must override base implementation because it calls getPixelForValue\r\n  // and category scale can have duplicate values\r\n  getPixelForTick(index) {\r\n    const ticks = this.ticks;\r\n    if (index < 0 || index > ticks.length - 1) {\r\n      return null;\r\n    }\r\n    return this.getPixelForValue(ticks[index].value);\r\n  }\r\n\r\n  getValueForPixel(pixel) {\r\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\r\n  }\r\n\r\n  getBasePixel() {\r\n    return this.bottom;\r\n  }\r\n}\r\n","import {isNullOrUndef} from '../helpers/helpers.core';\r\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math';\r\nimport Scale from '../core/core.scale';\r\nimport {formatNumber} from '../helpers/helpers.intl';\r\n\r\n/**\r\n * Generate a set of linear ticks for an axis\r\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\r\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\r\n *    Note that the generationOptions.maxCount setting is respected in this scenario\r\n *\r\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\r\n *    spacing = (max - min) / count\r\n *    Ticks are generated as [min, min + spacing, ..., max]\r\n *\r\n * 3. If generationOptions.count is defined\r\n *    spacing = (niceMax - niceMin) / count\r\n *\r\n * 4. Compute optimal spacing of ticks using niceNum algorithm\r\n *\r\n * @param generationOptions the options used to generate the ticks\r\n * @param dataRange the range of the data\r\n * @returns {object[]} array of tick objects\r\n */\r\nfunction generateTicks(generationOptions, dataRange) {\r\n  const ticks = [];\r\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\r\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\r\n  // for details.\r\n\r\n  const MIN_SPACING = 1e-14;\r\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\r\n  const unit = step || 1;\r\n  const maxSpaces = maxTicks - 1;\r\n  const {min: rmin, max: rmax} = dataRange;\r\n  const minDefined = !isNullOrUndef(min);\r\n  const maxDefined = !isNullOrUndef(max);\r\n  const countDefined = !isNullOrUndef(count);\r\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\r\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\r\n  let factor, niceMin, niceMax, numSpaces;\r\n\r\n  // Beyond MIN_SPACING floating point numbers being to lose precision\r\n  // such that we can't do the math necessary to generate ticks\r\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\r\n    return [{value: rmin}, {value: rmax}];\r\n  }\r\n\r\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\r\n  if (numSpaces > maxSpaces) {\r\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\r\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\r\n  }\r\n\r\n  if (!isNullOrUndef(precision)) {\r\n    // If the user specified a precision, round to that number of decimal places\r\n    factor = Math.pow(10, precision);\r\n    spacing = Math.ceil(spacing * factor) / factor;\r\n  }\r\n\r\n  if (bounds === 'ticks') {\r\n    niceMin = Math.floor(rmin / spacing) * spacing;\r\n    niceMax = Math.ceil(rmax / spacing) * spacing;\r\n  } else {\r\n    niceMin = rmin;\r\n    niceMax = rmax;\r\n  }\r\n\r\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\r\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\r\n    // spacing = step;\r\n    // numSpaces = (max - min) / spacing;\r\n    // Note that we round here to handle the case where almostWhole translated an FP error\r\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\r\n    spacing = (max - min) / numSpaces;\r\n    niceMin = min;\r\n    niceMax = max;\r\n  } else if (countDefined) {\r\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\r\n    // Sometimes these are no-ops, but it makes the code a lot clearer\r\n    // and when a user defined range is specified, we want the correct ticks\r\n    niceMin = minDefined ? min : niceMin;\r\n    niceMax = maxDefined ? max : niceMax;\r\n    numSpaces = count - 1;\r\n    spacing = (niceMax - niceMin) / numSpaces;\r\n  } else {\r\n    // Case 4\r\n    numSpaces = (niceMax - niceMin) / spacing;\r\n\r\n    // If very close to our rounded value, use it.\r\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\r\n      numSpaces = Math.round(numSpaces);\r\n    } else {\r\n      numSpaces = Math.ceil(numSpaces);\r\n    }\r\n  }\r\n\r\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\r\n  // until this point\r\n  const decimalPlaces = Math.max(\r\n    _decimalPlaces(spacing),\r\n    _decimalPlaces(niceMin)\r\n  );\r\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\r\n  niceMin = Math.round(niceMin * factor) / factor;\r\n  niceMax = Math.round(niceMax * factor) / factor;\r\n\r\n  let j = 0;\r\n  if (minDefined) {\r\n    if (includeBounds && niceMin !== min) {\r\n      ticks.push({value: min});\r\n\r\n      if (niceMin < min) {\r\n        j++; // Skip niceMin\r\n      }\r\n      // If the next nice tick is close to min, skip it\r\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\r\n        j++;\r\n      }\r\n    } else if (niceMin < min) {\r\n      j++;\r\n    }\r\n  }\r\n\r\n  for (; j < numSpaces; ++j) {\r\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\r\n  }\r\n\r\n  if (maxDefined && includeBounds && niceMax !== max) {\r\n    // If the previous tick is too close to max, replace it with max, else add max\r\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\r\n      ticks[ticks.length - 1].value = max;\r\n    } else {\r\n      ticks.push({value: max});\r\n    }\r\n  } else if (!maxDefined || niceMax === max) {\r\n    ticks.push({value: niceMax});\r\n  }\r\n\r\n  return ticks;\r\n}\r\n\r\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\r\n  const rad = toRadians(minRotation);\r\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\r\n  const length = 0.75 * minSpacing * ('' + value).length;\r\n  return Math.min(minSpacing / ratio, length);\r\n}\r\n\r\nexport default class LinearScaleBase extends Scale {\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this.start = undefined;\r\n    /** @type {number} */\r\n    this.end = undefined;\r\n    /** @type {number} */\r\n    this._startValue = undefined;\r\n    /** @type {number} */\r\n    this._endValue = undefined;\r\n    this._valueRange = 0;\r\n  }\r\n\r\n  parse(raw, index) { // eslint-disable-line no-unused-vars\r\n    if (isNullOrUndef(raw)) {\r\n      return null;\r\n    }\r\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\r\n      return null;\r\n    }\r\n\r\n    return +raw;\r\n  }\r\n\r\n  handleTickRangeOptions() {\r\n    const {beginAtZero} = this.options;\r\n    const {minDefined, maxDefined} = this.getUserBounds();\r\n    let {min, max} = this;\r\n\r\n    const setMin = v => (min = minDefined ? min : v);\r\n    const setMax = v => (max = maxDefined ? max : v);\r\n\r\n    if (beginAtZero) {\r\n      const minSign = sign(min);\r\n      const maxSign = sign(max);\r\n\r\n      if (minSign < 0 && maxSign < 0) {\r\n        setMax(0);\r\n      } else if (minSign > 0 && maxSign > 0) {\r\n        setMin(0);\r\n      }\r\n    }\r\n\r\n    if (min === max) {\r\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\r\n\r\n      setMax(max + offset);\r\n\r\n      if (!beginAtZero) {\r\n        setMin(min - offset);\r\n      }\r\n    }\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  getTickLimit() {\r\n    const tickOpts = this.options.ticks;\r\n    // eslint-disable-next-line prefer-const\r\n    let {maxTicksLimit, stepSize} = tickOpts;\r\n    let maxTicks;\r\n\r\n    if (stepSize) {\r\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\r\n      if (maxTicks > 1000) {\r\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\r\n        maxTicks = 1000;\r\n      }\r\n    } else {\r\n      maxTicks = this.computeTickLimit();\r\n      maxTicksLimit = maxTicksLimit || 11;\r\n    }\r\n\r\n    if (maxTicksLimit) {\r\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\r\n    }\r\n\r\n    return maxTicks;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  computeTickLimit() {\r\n    return Number.POSITIVE_INFINITY;\r\n  }\r\n\r\n  buildTicks() {\r\n    const opts = this.options;\r\n    const tickOpts = opts.ticks;\r\n\r\n    // Figure out what the max number of ticks we can support it is based on the size of\r\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\r\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\r\n    // the graph. Make sure we always have at least 2 ticks\r\n    let maxTicks = this.getTickLimit();\r\n    maxTicks = Math.max(2, maxTicks);\r\n\r\n    const numericGeneratorOptions = {\r\n      maxTicks,\r\n      bounds: opts.bounds,\r\n      min: opts.min,\r\n      max: opts.max,\r\n      precision: tickOpts.precision,\r\n      step: tickOpts.stepSize,\r\n      count: tickOpts.count,\r\n      maxDigits: this._maxDigits(),\r\n      horizontal: this.isHorizontal(),\r\n      minRotation: tickOpts.minRotation || 0,\r\n      includeBounds: tickOpts.includeBounds !== false\r\n    };\r\n    const dataRange = this._range || this;\r\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\r\n\r\n    // At this point, we need to update our max and min given the tick values,\r\n    // since we probably have expanded the range of the scale\r\n    if (opts.bounds === 'ticks') {\r\n      _setMinAndMaxByKey(ticks, this, 'value');\r\n    }\r\n\r\n    if (opts.reverse) {\r\n      ticks.reverse();\r\n\r\n      this.start = this.max;\r\n      this.end = this.min;\r\n    } else {\r\n      this.start = this.min;\r\n      this.end = this.max;\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    const ticks = this.ticks;\r\n    let start = this.min;\r\n    let end = this.max;\r\n\r\n    super.configure();\r\n\r\n    if (this.options.offset && ticks.length) {\r\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\r\n      start -= offset;\r\n      end += offset;\r\n    }\r\n    this._startValue = start;\r\n    this._endValue = end;\r\n    this._valueRange = end - start;\r\n  }\r\n\r\n  getLabelForValue(value) {\r\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\r\n  }\r\n}\r\n","import {isFinite} from '../helpers/helpers.core';\r\nimport LinearScaleBase from './scale.linearbase';\r\nimport Ticks from '../core/core.ticks';\r\nimport {toRadians} from '../helpers';\r\n\r\nexport default class LinearScale extends LinearScaleBase {\r\n\r\n  static id = 'linear';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    ticks: {\r\n      callback: Ticks.formatters.numeric\r\n    }\r\n  };\r\n\r\n\r\n  determineDataLimits() {\r\n    const {min, max} = this.getMinMax(true);\r\n\r\n    this.min = isFinite(min) ? min : 0;\r\n    this.max = isFinite(max) ? max : 1;\r\n\r\n    // Common base implementation to handle min, max, beginAtZero\r\n    this.handleTickRangeOptions();\r\n  }\r\n\r\n  /**\r\n\t * Returns the maximum number of ticks based on the scale dimension\r\n\t * @protected\r\n \t */\r\n  computeTickLimit() {\r\n    const horizontal = this.isHorizontal();\r\n    const length = horizontal ? this.width : this.height;\r\n    const minRotation = toRadians(this.options.ticks.minRotation);\r\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\r\n    const tickFont = this._resolveTickFontOptions(0);\r\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\r\n  }\r\n\r\n  // Utils\r\n  getPixelForValue(value) {\r\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\r\n  }\r\n\r\n  getValueForPixel(pixel) {\r\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\r\n  }\r\n}\r\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core';\r\nimport {formatNumber} from '../helpers/helpers.intl';\r\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math';\r\nimport Scale from '../core/core.scale';\r\nimport LinearScaleBase from './scale.linearbase';\r\nimport Ticks from '../core/core.ticks';\r\n\r\nconst log10Floor = v => Math.floor(log10(v));\r\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\r\n\r\nfunction isMajor(tickVal) {\r\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\r\n  return remain === 1;\r\n}\r\n\r\nfunction steps(min, max, rangeExp) {\r\n  const rangeStep = Math.pow(10, rangeExp);\r\n  const start = Math.floor(min / rangeStep);\r\n  const end = Math.ceil(max / rangeStep);\r\n  return end - start;\r\n}\r\n\r\nfunction startExp(min, max) {\r\n  const range = max - min;\r\n  let rangeExp = log10Floor(range);\r\n  while (steps(min, max, rangeExp) > 10) {\r\n    rangeExp++;\r\n  }\r\n  while (steps(min, max, rangeExp) < 10) {\r\n    rangeExp--;\r\n  }\r\n  return Math.min(rangeExp, log10Floor(min));\r\n}\r\n\r\n\r\n/**\r\n * Generate a set of logarithmic ticks\r\n * @param generationOptions the options used to generate the ticks\r\n * @param dataRange the range of the data\r\n * @returns {object[]} array of tick objects\r\n */\r\nfunction generateTicks(generationOptions, {min, max}) {\r\n  min = finiteOrDefault(generationOptions.min, min);\r\n  const ticks = [];\r\n  const minExp = log10Floor(min);\r\n  let exp = startExp(min, max);\r\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\r\n  const stepSize = Math.pow(10, exp);\r\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\r\n  const start = Math.round((min - base) * precision) / precision;\r\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\r\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\r\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\r\n  while (value < max) {\r\n    ticks.push({value, major: isMajor(value), significand});\r\n    if (significand >= 10) {\r\n      significand = significand < 15 ? 15 : 20;\r\n    } else {\r\n      significand++;\r\n    }\r\n    if (significand >= 20) {\r\n      exp++;\r\n      significand = 2;\r\n      precision = exp >= 0 ? 1 : precision;\r\n    }\r\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\r\n  }\r\n  const lastTick = finiteOrDefault(generationOptions.max, value);\r\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\r\n\r\n  return ticks;\r\n}\r\n\r\nexport default class LogarithmicScale extends Scale {\r\n\r\n  static id = 'logarithmic';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    ticks: {\r\n      callback: Ticks.formatters.logarithmic,\r\n      major: {\r\n        enabled: true\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this.start = undefined;\r\n    /** @type {number} */\r\n    this.end = undefined;\r\n    /** @type {number} */\r\n    this._startValue = undefined;\r\n    this._valueRange = 0;\r\n  }\r\n\r\n  parse(raw, index) {\r\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\r\n    if (value === 0) {\r\n      this._zero = true;\r\n      return undefined;\r\n    }\r\n    return isFinite(value) && value > 0 ? value : null;\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const {min, max} = this.getMinMax(true);\r\n\r\n    this.min = isFinite(min) ? Math.max(0, min) : null;\r\n    this.max = isFinite(max) ? Math.max(0, max) : null;\r\n\r\n    if (this.options.beginAtZero) {\r\n      this._zero = true;\r\n    }\r\n\r\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\r\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\r\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\r\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\r\n    }\r\n\r\n    this.handleTickRangeOptions();\r\n  }\r\n\r\n  handleTickRangeOptions() {\r\n    const {minDefined, maxDefined} = this.getUserBounds();\r\n    let min = this.min;\r\n    let max = this.max;\r\n\r\n    const setMin = v => (min = minDefined ? min : v);\r\n    const setMax = v => (max = maxDefined ? max : v);\r\n\r\n    if (min === max) {\r\n      if (min <= 0) { // includes null\r\n        setMin(1);\r\n        setMax(10);\r\n      } else {\r\n        setMin(changeExponent(min, -1));\r\n        setMax(changeExponent(max, +1));\r\n      }\r\n    }\r\n    if (min <= 0) {\r\n      setMin(changeExponent(max, -1));\r\n    }\r\n    if (max <= 0) {\r\n\r\n      setMax(changeExponent(min, +1));\r\n    }\r\n\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  buildTicks() {\r\n    const opts = this.options;\r\n\r\n    const generationOptions = {\r\n      min: this._userMin,\r\n      max: this._userMax\r\n    };\r\n    const ticks = generateTicks(generationOptions, this);\r\n\r\n    // At this point, we need to update our max and min given the tick values,\r\n    // since we probably have expanded the range of the scale\r\n    if (opts.bounds === 'ticks') {\r\n      _setMinAndMaxByKey(ticks, this, 'value');\r\n    }\r\n\r\n    if (opts.reverse) {\r\n      ticks.reverse();\r\n\r\n      this.start = this.max;\r\n      this.end = this.min;\r\n    } else {\r\n      this.start = this.min;\r\n      this.end = this.max;\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value\r\n\t * @return {string}\r\n\t */\r\n  getLabelForValue(value) {\r\n    return value === undefined\r\n      ? '0'\r\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    const start = this.min;\r\n\r\n    super.configure();\r\n\r\n    this._startValue = log10(start);\r\n    this._valueRange = log10(this.max) - log10(start);\r\n  }\r\n\r\n  getPixelForValue(value) {\r\n    if (value === undefined || value === 0) {\r\n      value = this.min;\r\n    }\r\n    if (value === null || isNaN(value)) {\r\n      return NaN;\r\n    }\r\n    return this.getPixelForDecimal(value === this.min\r\n      ? 0\r\n      : (log10(value) - this._startValue) / this._valueRange);\r\n  }\r\n\r\n  getValueForPixel(pixel) {\r\n    const decimal = this.getDecimalForPixel(pixel);\r\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\r\n  }\r\n}\r\n","import defaults from '../core/core.defaults';\r\nimport {_longestText, addRoundedRectPath, renderText} from '../helpers/helpers.canvas';\r\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math';\r\nimport LinearScaleBase from './scale.linearbase';\r\nimport Ticks from '../core/core.ticks';\r\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core';\r\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options';\r\n\r\nfunction getTickBackdropHeight(opts) {\r\n  const tickOpts = opts.ticks;\r\n\r\n  if (tickOpts.display && opts.display) {\r\n    const padding = toPadding(tickOpts.backdropPadding);\r\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction measureLabelSize(ctx, font, label) {\r\n  label = isArray(label) ? label : [label];\r\n  return {\r\n    w: _longestText(ctx, font.string, label),\r\n    h: label.length * font.lineHeight\r\n  };\r\n}\r\n\r\nfunction determineLimits(angle, pos, size, min, max) {\r\n  if (angle === min || angle === max) {\r\n    return {\r\n      start: pos - (size / 2),\r\n      end: pos + (size / 2)\r\n    };\r\n  } else if (angle < min || angle > max) {\r\n    return {\r\n      start: pos - size,\r\n      end: pos\r\n    };\r\n  }\r\n\r\n  return {\r\n    start: pos,\r\n    end: pos + size\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to fit a radial linear scale with point labels\r\n */\r\nfunction fitWithPointLabels(scale) {\r\n\r\n  // Right, this is really confusing and there is a lot of maths going on here\r\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\r\n  //\r\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\r\n  //\r\n  // Solution:\r\n  //\r\n  // We assume the radius of the polygon is half the size of the canvas at first\r\n  // at each index we check if the text overlaps.\r\n  //\r\n  // Where it does, we store that angle and that index.\r\n  //\r\n  // After finding the largest index and angle we calculate how much we need to remove\r\n  // from the shape radius to move the point inwards by that x.\r\n  //\r\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\r\n  // along with labels.\r\n  //\r\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\r\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\r\n  //\r\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\r\n  // and position it in the most space efficient manner\r\n  //\r\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\r\n\r\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\r\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\r\n  const orig = {\r\n    l: scale.left + scale._padding.left,\r\n    r: scale.right - scale._padding.right,\r\n    t: scale.top + scale._padding.top,\r\n    b: scale.bottom - scale._padding.bottom\r\n  };\r\n  const limits = Object.assign({}, orig);\r\n  const labelSizes = [];\r\n  const padding = [];\r\n  const valueCount = scale._pointLabels.length;\r\n  const pointLabelOpts = scale.options.pointLabels;\r\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\r\n\r\n  for (let i = 0; i < valueCount; i++) {\r\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\r\n    padding[i] = opts.padding;\r\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\r\n    const plFont = toFont(opts.font);\r\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\r\n    labelSizes[i] = textSize;\r\n\r\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\r\n    const angle = Math.round(toDegrees(angleRadians));\r\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\r\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\r\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\r\n  }\r\n\r\n  scale.setCenterPoint(\r\n    orig.l - limits.l,\r\n    limits.r - orig.r,\r\n    orig.t - limits.t,\r\n    limits.b - orig.b\r\n  );\r\n\r\n  // Now that text size is determined, compute the full positions\r\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\r\n}\r\n\r\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\r\n  const sin = Math.abs(Math.sin(angle));\r\n  const cos = Math.abs(Math.cos(angle));\r\n  let x = 0;\r\n  let y = 0;\r\n  if (hLimits.start < orig.l) {\r\n    x = (orig.l - hLimits.start) / sin;\r\n    limits.l = Math.min(limits.l, orig.l - x);\r\n  } else if (hLimits.end > orig.r) {\r\n    x = (hLimits.end - orig.r) / sin;\r\n    limits.r = Math.max(limits.r, orig.r + x);\r\n  }\r\n  if (vLimits.start < orig.t) {\r\n    y = (orig.t - vLimits.start) / cos;\r\n    limits.t = Math.min(limits.t, orig.t - y);\r\n  } else if (vLimits.end > orig.b) {\r\n    y = (vLimits.end - orig.b) / cos;\r\n    limits.b = Math.max(limits.b, orig.b + y);\r\n  }\r\n}\r\n\r\nfunction buildPointLabelItems(scale, labelSizes, padding) {\r\n  const items = [];\r\n  const valueCount = scale._pointLabels.length;\r\n  const opts = scale.options;\r\n  const extra = getTickBackdropHeight(opts) / 2;\r\n  const outerDistance = scale.drawingArea;\r\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\r\n\r\n  for (let i = 0; i < valueCount; i++) {\r\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\r\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\r\n    const size = labelSizes[i];\r\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\r\n    const textAlign = getTextAlignForAngle(angle);\r\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\r\n\r\n    items.push({\r\n      // Text position\r\n      x: pointLabelPosition.x,\r\n      y,\r\n\r\n      // Text rendering data\r\n      textAlign,\r\n\r\n      // Bounding box\r\n      left,\r\n      top: y,\r\n      right: left + size.w,\r\n      bottom: y + size.h\r\n    });\r\n  }\r\n  return items;\r\n}\r\n\r\nfunction getTextAlignForAngle(angle) {\r\n  if (angle === 0 || angle === 180) {\r\n    return 'center';\r\n  } else if (angle < 180) {\r\n    return 'left';\r\n  }\r\n\r\n  return 'right';\r\n}\r\n\r\nfunction leftForTextAlign(x, w, align) {\r\n  if (align === 'right') {\r\n    x -= w;\r\n  } else if (align === 'center') {\r\n    x -= (w / 2);\r\n  }\r\n  return x;\r\n}\r\n\r\nfunction yForAngle(y, h, angle) {\r\n  if (angle === 90 || angle === 270) {\r\n    y -= (h / 2);\r\n  } else if (angle > 270 || angle < 90) {\r\n    y -= h;\r\n  }\r\n  return y;\r\n}\r\n\r\nfunction drawPointLabels(scale, labelCount) {\r\n  const {ctx, options: {pointLabels}} = scale;\r\n\r\n  for (let i = labelCount - 1; i >= 0; i--) {\r\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\r\n    const plFont = toFont(optsAtIndex.font);\r\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\r\n    const {backdropColor} = optsAtIndex;\r\n\r\n    if (!isNullOrUndef(backdropColor)) {\r\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\r\n      const padding = toPadding(optsAtIndex.backdropPadding);\r\n      ctx.fillStyle = backdropColor;\r\n\r\n      const backdropLeft = left - padding.left;\r\n      const backdropTop = top - padding.top;\r\n      const backdropWidth = right - left + padding.width;\r\n      const backdropHeight = bottom - top + padding.height;\r\n\r\n      if (Object.values(borderRadius).some(v => v !== 0)) {\r\n        ctx.beginPath();\r\n        addRoundedRectPath(ctx, {\r\n          x: backdropLeft,\r\n          y: backdropTop,\r\n          w: backdropWidth,\r\n          h: backdropHeight,\r\n          radius: borderRadius,\r\n        });\r\n        ctx.fill();\r\n      } else {\r\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\r\n      }\r\n    }\r\n\r\n    renderText(\r\n      ctx,\r\n      scale._pointLabels[i],\r\n      x,\r\n      y + (plFont.lineHeight / 2),\r\n      plFont,\r\n      {\r\n        color: optsAtIndex.color,\r\n        textAlign: textAlign,\r\n        textBaseline: 'middle'\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\r\n  const {ctx} = scale;\r\n  if (circular) {\r\n    // Draw circular arcs between the points\r\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\r\n  } else {\r\n    // Draw straight lines connecting each index\r\n    let pointPosition = scale.getPointPosition(0, radius);\r\n    ctx.moveTo(pointPosition.x, pointPosition.y);\r\n\r\n    for (let i = 1; i < labelCount; i++) {\r\n      pointPosition = scale.getPointPosition(i, radius);\r\n      ctx.lineTo(pointPosition.x, pointPosition.y);\r\n    }\r\n  }\r\n}\r\n\r\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\r\n  const ctx = scale.ctx;\r\n  const circular = gridLineOpts.circular;\r\n\r\n  const {color, lineWidth} = gridLineOpts;\r\n\r\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\r\n    return;\r\n  }\r\n\r\n  ctx.save();\r\n  ctx.strokeStyle = color;\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.setLineDash(borderOpts.dash);\r\n  ctx.lineDashOffset = borderOpts.dashOffset;\r\n\r\n  ctx.beginPath();\r\n  pathRadiusLine(scale, radius, circular, labelCount);\r\n  ctx.closePath();\r\n  ctx.stroke();\r\n  ctx.restore();\r\n}\r\n\r\nfunction createPointLabelContext(parent, index, label) {\r\n  return createContext(parent, {\r\n    label,\r\n    index,\r\n    type: 'pointLabel'\r\n  });\r\n}\r\n\r\nexport default class RadialLinearScale extends LinearScaleBase {\r\n\r\n  static id = 'radialLinear';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    display: true,\r\n\r\n    // Boolean - Whether to animate scaling the chart from the centre\r\n    animate: true,\r\n    position: 'chartArea',\r\n\r\n    angleLines: {\r\n      display: true,\r\n      lineWidth: 1,\r\n      borderDash: [],\r\n      borderDashOffset: 0.0\r\n    },\r\n\r\n    grid: {\r\n      circular: false\r\n    },\r\n\r\n    startAngle: 0,\r\n\r\n    // label settings\r\n    ticks: {\r\n      // Boolean - Show a backdrop to the scale label\r\n      showLabelBackdrop: true,\r\n\r\n      callback: Ticks.formatters.numeric\r\n    },\r\n\r\n    pointLabels: {\r\n      backdropColor: undefined,\r\n\r\n      // Number - The backdrop padding above & below the label in pixels\r\n      backdropPadding: 2,\r\n\r\n      // Boolean - if true, show point labels\r\n      display: true,\r\n\r\n      // Number - Point label font size in pixels\r\n      font: {\r\n        size: 10\r\n      },\r\n\r\n      // Function - Used to convert point labels\r\n      callback(label) {\r\n        return label;\r\n      },\r\n\r\n      // Number - Additionl padding between scale and pointLabel\r\n      padding: 5,\r\n\r\n      // Boolean - if true, center point labels to slices in polar chart\r\n      centerPointLabels: false\r\n    }\r\n  };\r\n\r\n  static defaultRoutes = {\r\n    'angleLines.color': 'borderColor',\r\n    'pointLabels.color': 'color',\r\n    'ticks.color': 'color'\r\n  };\r\n\r\n  static descriptors = {\r\n    angleLines: {\r\n      _fallback: 'grid'\r\n    }\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this.xCenter = undefined;\r\n    /** @type {number} */\r\n    this.yCenter = undefined;\r\n    /** @type {number} */\r\n    this.drawingArea = undefined;\r\n    /** @type {string[]} */\r\n    this._pointLabels = [];\r\n    this._pointLabelItems = [];\r\n  }\r\n\r\n  setDimensions() {\r\n    // Set the unconstrained dimension before label rotation\r\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\r\n    const w = this.width = this.maxWidth - padding.width;\r\n    const h = this.height = this.maxHeight - padding.height;\r\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\r\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\r\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const {min, max} = this.getMinMax(false);\r\n\r\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\r\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\r\n\r\n    // Common base implementation to handle min, max, beginAtZero\r\n    this.handleTickRangeOptions();\r\n  }\r\n\r\n  /**\r\n\t * Returns the maximum number of ticks based on the scale dimension\r\n\t * @protected\r\n\t */\r\n  computeTickLimit() {\r\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\r\n  }\r\n\r\n  generateTickLabels(ticks) {\r\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\r\n\r\n    // Point labels\r\n    this._pointLabels = this.getLabels()\r\n      .map((value, index) => {\r\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\r\n        return label || label === 0 ? label : '';\r\n      })\r\n      .filter((v, i) => this.chart.getDataVisibility(i));\r\n  }\r\n\r\n  fit() {\r\n    const opts = this.options;\r\n\r\n    if (opts.display && opts.pointLabels.display) {\r\n      fitWithPointLabels(this);\r\n    } else {\r\n      this.setCenterPoint(0, 0, 0, 0);\r\n    }\r\n  }\r\n\r\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\r\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\r\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\r\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\r\n  }\r\n\r\n  getIndexAngle(index) {\r\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\r\n    const startAngle = this.options.startAngle || 0;\r\n\r\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\r\n  }\r\n\r\n  getDistanceFromCenterForValue(value) {\r\n    if (isNullOrUndef(value)) {\r\n      return NaN;\r\n    }\r\n\r\n    // Take into account half font size + the yPadding of the top value\r\n    const scalingFactor = this.drawingArea / (this.max - this.min);\r\n    if (this.options.reverse) {\r\n      return (this.max - value) * scalingFactor;\r\n    }\r\n    return (value - this.min) * scalingFactor;\r\n  }\r\n\r\n  getValueForDistanceFromCenter(distance) {\r\n    if (isNullOrUndef(distance)) {\r\n      return NaN;\r\n    }\r\n\r\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\r\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\r\n  }\r\n\r\n  getPointLabelContext(index) {\r\n    const pointLabels = this._pointLabels || [];\r\n\r\n    if (index >= 0 && index < pointLabels.length) {\r\n      const pointLabel = pointLabels[index];\r\n      return createPointLabelContext(this.getContext(), index, pointLabel);\r\n    }\r\n  }\r\n\r\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\r\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\r\n    return {\r\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\r\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\r\n      angle\r\n    };\r\n  }\r\n\r\n  getPointPositionForValue(index, value) {\r\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\r\n  }\r\n\r\n  getBasePosition(index) {\r\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\r\n  }\r\n\r\n  getPointLabelPosition(index) {\r\n    const {left, top, right, bottom} = this._pointLabelItems[index];\r\n    return {\r\n      left,\r\n      top,\r\n      right,\r\n      bottom,\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawBackground() {\r\n    const {backgroundColor, grid: {circular}} = this.options;\r\n    if (backgroundColor) {\r\n      const ctx = this.ctx;\r\n      ctx.save();\r\n      ctx.beginPath();\r\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\r\n      ctx.closePath();\r\n      ctx.fillStyle = backgroundColor;\r\n      ctx.fill();\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawGrid() {\r\n    const ctx = this.ctx;\r\n    const opts = this.options;\r\n    const {angleLines, grid, border} = opts;\r\n    const labelCount = this._pointLabels.length;\r\n\r\n    let i, offset, position;\r\n\r\n    if (opts.pointLabels.display) {\r\n      drawPointLabels(this, labelCount);\r\n    }\r\n\r\n    if (grid.display) {\r\n      this.ticks.forEach((tick, index) => {\r\n        if (index !== 0) {\r\n          offset = this.getDistanceFromCenterForValue(tick.value);\r\n          const context = this.getContext(index);\r\n          const optsAtIndex = grid.setContext(context);\r\n          const optsAtIndexBorder = border.setContext(context);\r\n\r\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (angleLines.display) {\r\n      ctx.save();\r\n\r\n      for (i = labelCount - 1; i >= 0; i--) {\r\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\r\n        const {color, lineWidth} = optsAtIndex;\r\n\r\n        if (!lineWidth || !color) {\r\n          continue;\r\n        }\r\n\r\n        ctx.lineWidth = lineWidth;\r\n        ctx.strokeStyle = color;\r\n\r\n        ctx.setLineDash(optsAtIndex.borderDash);\r\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\r\n\r\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\r\n        position = this.getPointPosition(i, offset);\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.xCenter, this.yCenter);\r\n        ctx.lineTo(position.x, position.y);\r\n        ctx.stroke();\r\n      }\r\n\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawBorder() {}\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawLabels() {\r\n    const ctx = this.ctx;\r\n    const opts = this.options;\r\n    const tickOpts = opts.ticks;\r\n\r\n    if (!tickOpts.display) {\r\n      return;\r\n    }\r\n\r\n    const startAngle = this.getIndexAngle(0);\r\n    let offset, width;\r\n\r\n    ctx.save();\r\n    ctx.translate(this.xCenter, this.yCenter);\r\n    ctx.rotate(startAngle);\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    this.ticks.forEach((tick, index) => {\r\n      if (index === 0 && !opts.reverse) {\r\n        return;\r\n      }\r\n\r\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\r\n      const tickFont = toFont(optsAtIndex.font);\r\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\r\n\r\n      if (optsAtIndex.showLabelBackdrop) {\r\n        ctx.font = tickFont.string;\r\n        width = ctx.measureText(tick.label).width;\r\n        ctx.fillStyle = optsAtIndex.backdropColor;\r\n\r\n        const padding = toPadding(optsAtIndex.backdropPadding);\r\n        ctx.fillRect(\r\n          -width / 2 - padding.left,\r\n          -offset - tickFont.size / 2 - padding.top,\r\n          width + padding.width,\r\n          tickFont.size + padding.height\r\n        );\r\n      }\r\n\r\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\r\n        color: optsAtIndex.color,\r\n      });\r\n    });\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawTitle() {}\r\n}\r\n","import adapters from '../core/core.adapters';\r\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core';\r\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math';\r\nimport Scale from '../core/core.scale';\r\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection';\r\n\r\n/**\r\n * @typedef { import(\"../core/core.adapters\").TimeUnit } Unit\r\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\r\n * @typedef { import(\"../core/core.adapters\").DateAdapter } DateAdapter\r\n */\r\n\r\n/**\r\n * @type {Object<Unit, Interval>}\r\n */\r\nconst INTERVALS = {\r\n  millisecond: {common: true, size: 1, steps: 1000},\r\n  second: {common: true, size: 1000, steps: 60},\r\n  minute: {common: true, size: 60000, steps: 60},\r\n  hour: {common: true, size: 3600000, steps: 24},\r\n  day: {common: true, size: 86400000, steps: 30},\r\n  week: {common: false, size: 604800000, steps: 4},\r\n  month: {common: true, size: 2.628e9, steps: 12},\r\n  quarter: {common: false, size: 7.884e9, steps: 4},\r\n  year: {common: true, size: 3.154e10}\r\n};\r\n\r\n/**\r\n * @type {Unit[]}\r\n */\r\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n */\r\nfunction sorter(a, b) {\r\n  return a - b;\r\n}\r\n\r\n/**\r\n * @param {TimeScale} scale\r\n * @param {*} input\r\n * @return {number}\r\n */\r\nfunction parse(scale, input) {\r\n  if (isNullOrUndef(input)) {\r\n    return null;\r\n  }\r\n\r\n  const adapter = scale._adapter;\r\n  const {parser, round, isoWeekday} = scale._parseOpts;\r\n  let value = input;\r\n\r\n  if (typeof parser === 'function') {\r\n    value = parser(value);\r\n  }\r\n\r\n  // Only parse if its not a timestamp already\r\n  if (!isFinite(value)) {\r\n    value = typeof parser === 'string'\r\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\r\n      : adapter.parse(value);\r\n  }\r\n\r\n  if (value === null) {\r\n    return null;\r\n  }\r\n\r\n  if (round) {\r\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\r\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\r\n      : adapter.startOf(value, round);\r\n  }\r\n\r\n  return +value;\r\n}\r\n\r\n/**\r\n * Figures out what unit results in an appropriate number of auto-generated ticks\r\n * @param {Unit} minUnit\r\n * @param {number} min\r\n * @param {number} max\r\n * @param {number} capacity\r\n * @return {object}\r\n */\r\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\r\n  const ilen = UNITS.length;\r\n\r\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\r\n    const interval = INTERVALS[UNITS[i]];\r\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\r\n\r\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\r\n      return UNITS[i];\r\n    }\r\n  }\r\n\r\n  return UNITS[ilen - 1];\r\n}\r\n\r\n/**\r\n * Figures out what unit to format a set of ticks with\r\n * @param {TimeScale} scale\r\n * @param {number} numTicks\r\n * @param {Unit} minUnit\r\n * @param {number} min\r\n * @param {number} max\r\n * @return {Unit}\r\n */\r\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\r\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\r\n    const unit = UNITS[i];\r\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\r\n      return unit;\r\n    }\r\n  }\r\n\r\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\r\n}\r\n\r\n/**\r\n * @param {Unit} unit\r\n * @return {object}\r\n */\r\nfunction determineMajorUnit(unit) {\r\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\r\n    if (INTERVALS[UNITS[i]].common) {\r\n      return UNITS[i];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {object} ticks\r\n * @param {number} time\r\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\r\n */\r\nfunction addTick(ticks, time, timestamps) {\r\n  if (!timestamps) {\r\n    ticks[time] = true;\r\n  } else if (timestamps.length) {\r\n    const {lo, hi} = _lookup(timestamps, time);\r\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\r\n    ticks[timestamp] = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {TimeScale} scale\r\n * @param {object[]} ticks\r\n * @param {object} map\r\n * @param {Unit} majorUnit\r\n * @return {object[]}\r\n */\r\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\r\n  const adapter = scale._adapter;\r\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\r\n  const last = ticks[ticks.length - 1].value;\r\n  let major, index;\r\n\r\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\r\n    index = map[major];\r\n    if (index >= 0) {\r\n      ticks[index].major = true;\r\n    }\r\n  }\r\n  return ticks;\r\n}\r\n\r\n/**\r\n * @param {TimeScale} scale\r\n * @param {number[]} values\r\n * @param {Unit|undefined} [majorUnit]\r\n * @return {object[]}\r\n */\r\nfunction ticksFromTimestamps(scale, values, majorUnit) {\r\n  const ticks = [];\r\n  /** @type {Object<number,object>} */\r\n  const map = {};\r\n  const ilen = values.length;\r\n  let i, value;\r\n\r\n  for (i = 0; i < ilen; ++i) {\r\n    value = values[i];\r\n    map[value] = i;\r\n\r\n    ticks.push({\r\n      value,\r\n      major: false\r\n    });\r\n  }\r\n\r\n  // We set the major ticks separately from the above loop because calling startOf for every tick\r\n  // is expensive when there is a large number of ticks\r\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\r\n}\r\n\r\nexport default class TimeScale extends Scale {\r\n\r\n  static id = 'time';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    /**\r\n     * Scale boundary strategy (bypassed by min/max time options)\r\n     * - `data`: make sure data are fully visible, ticks outside are removed\r\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\r\n     * @see https://github.com/chartjs/Chart.js/pull/4556\r\n     * @since 2.7.0\r\n     */\r\n    bounds: 'data',\r\n\r\n    adapters: {},\r\n    time: {\r\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\r\n      unit: false, // false == automatic or override with week, month, year, etc.\r\n      round: false, // none, or override with week, month, year, etc.\r\n      isoWeekday: false, // override week start day\r\n      minUnit: 'millisecond',\r\n      displayFormats: {}\r\n    },\r\n    ticks: {\r\n      /**\r\n       * Ticks generation input values:\r\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\r\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\r\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\r\n       * @see https://github.com/chartjs/Chart.js/pull/4507\r\n       * @since 2.7.0\r\n       */\r\n      source: 'auto',\r\n\r\n      callback: false,\r\n\r\n      major: {\r\n        enabled: false\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t * @param {object} props\r\n\t */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /** @type {{data: number[], labels: number[], all: number[]}} */\r\n    this._cache = {\r\n      data: [],\r\n      labels: [],\r\n      all: []\r\n    };\r\n\r\n    /** @type {Unit} */\r\n    this._unit = 'day';\r\n    /** @type {Unit=} */\r\n    this._majorUnit = undefined;\r\n    this._offsets = {};\r\n    this._normalized = false;\r\n    this._parseOpts = undefined;\r\n  }\r\n\r\n  init(scaleOpts, opts = {}) {\r\n    const time = scaleOpts.time || (scaleOpts.time = {});\r\n    /** @type {DateAdapter} */\r\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\r\n\r\n    adapter.init(opts);\r\n\r\n    // Backward compatibility: before introducing adapter, `displayFormats` was\r\n    // supposed to contain *all* unit/string pairs but this can't be resolved\r\n    // when loading the scale (adapters are loaded afterward), so let's populate\r\n    // missing formats on update\r\n    mergeIf(time.displayFormats, adapter.formats());\r\n\r\n    this._parseOpts = {\r\n      parser: time.parser,\r\n      round: time.round,\r\n      isoWeekday: time.isoWeekday\r\n    };\r\n\r\n    super.init(scaleOpts);\r\n\r\n    this._normalized = opts.normalized;\r\n  }\r\n\r\n  /**\r\n\t * @param {*} raw\r\n\t * @param {number?} [index]\r\n\t * @return {number}\r\n\t */\r\n  parse(raw, index) { // eslint-disable-line no-unused-vars\r\n    if (raw === undefined) {\r\n      return null;\r\n    }\r\n    return parse(this, raw);\r\n  }\r\n\r\n  beforeLayout() {\r\n    super.beforeLayout();\r\n    this._cache = {\r\n      data: [],\r\n      labels: [],\r\n      all: []\r\n    };\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const options = this.options;\r\n    const adapter = this._adapter;\r\n    const unit = options.time.unit || 'day';\r\n    // eslint-disable-next-line prefer-const\r\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\r\n\r\n    /**\r\n\t\t * @param {object} bounds\r\n\t\t */\r\n    function _applyBounds(bounds) {\r\n      if (!minDefined && !isNaN(bounds.min)) {\r\n        min = Math.min(min, bounds.min);\r\n      }\r\n      if (!maxDefined && !isNaN(bounds.max)) {\r\n        max = Math.max(max, bounds.max);\r\n      }\r\n    }\r\n\r\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\r\n    if (!minDefined || !maxDefined) {\r\n      // Labels are always considered, when user did not force bounds\r\n      _applyBounds(this._getLabelBounds());\r\n\r\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\r\n      // data bounds are ignored (and don't need to be determined)\r\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\r\n        _applyBounds(this.getMinMax(false));\r\n      }\r\n    }\r\n\r\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\r\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\r\n\r\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\r\n    this.min = Math.min(min, max - 1);\r\n    this.max = Math.max(min + 1, max);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getLabelBounds() {\r\n    const arr = this.getLabelTimestamps();\r\n    let min = Number.POSITIVE_INFINITY;\r\n    let max = Number.NEGATIVE_INFINITY;\r\n\r\n    if (arr.length) {\r\n      min = arr[0];\r\n      max = arr[arr.length - 1];\r\n    }\r\n    return {min, max};\r\n  }\r\n\r\n  /**\r\n\t * @return {object[]}\r\n\t */\r\n  buildTicks() {\r\n    const options = this.options;\r\n    const timeOpts = options.time;\r\n    const tickOpts = options.ticks;\r\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\r\n\r\n    if (options.bounds === 'ticks' && timestamps.length) {\r\n      this.min = this._userMin || timestamps[0];\r\n      this.max = this._userMax || timestamps[timestamps.length - 1];\r\n    }\r\n\r\n    const min = this.min;\r\n    const max = this.max;\r\n\r\n    const ticks = _filterBetween(timestamps, min, max);\r\n\r\n    // PRIVATE\r\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\r\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\r\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\r\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\r\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\r\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\r\n      : determineMajorUnit(this._unit);\r\n    this.initOffsets(timestamps);\r\n\r\n    if (options.reverse) {\r\n      ticks.reverse();\r\n    }\r\n\r\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\r\n  }\r\n\r\n  afterAutoSkip() {\r\n    // Offsets for bar charts need to be handled with the auto skipped\r\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\r\n    if (this.options.offsetAfterAutoskip) {\r\n      this.initOffsets(this.ticks.map(tick => +tick.value));\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Returns the start and end offsets from edges in the form of {start, end}\r\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\r\n\t * They add extra margins on the both sides by scaling down the original scale.\r\n\t * Offsets are added when the `offset` option is true.\r\n\t * @param {number[]} timestamps\r\n\t * @protected\r\n\t */\r\n  initOffsets(timestamps = []) {\r\n    let start = 0;\r\n    let end = 0;\r\n    let first, last;\r\n\r\n    if (this.options.offset && timestamps.length) {\r\n      first = this.getDecimalForValue(timestamps[0]);\r\n      if (timestamps.length === 1) {\r\n        start = 1 - first;\r\n      } else {\r\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\r\n      }\r\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\r\n      if (timestamps.length === 1) {\r\n        end = last;\r\n      } else {\r\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\r\n      }\r\n    }\r\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\r\n    start = _limitValue(start, 0, limit);\r\n    end = _limitValue(end, 0, limit);\r\n\r\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\r\n  }\r\n\r\n  /**\r\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\r\n\t * `minor` unit using the given scale time `options`.\r\n\t * Important: this method can return ticks outside the min and max range, it's the\r\n\t * responsibility of the calling code to clamp values if needed.\r\n\t * @private\r\n\t */\r\n  _generate() {\r\n    const adapter = this._adapter;\r\n    const min = this.min;\r\n    const max = this.max;\r\n    const options = this.options;\r\n    const timeOpts = options.time;\r\n    // @ts-ignore\r\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\r\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\r\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\r\n    const hasWeekday = isNumber(weekday) || weekday === true;\r\n    const ticks = {};\r\n    let first = min;\r\n    let time, count;\r\n\r\n    // For 'week' unit, handle the first day of week option\r\n    if (hasWeekday) {\r\n      first = +adapter.startOf(first, 'isoWeek', weekday);\r\n    }\r\n\r\n    // Align first ticks on unit\r\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\r\n\r\n    // Prevent browser from freezing in case user options request millions of milliseconds\r\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\r\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\r\n    }\r\n\r\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\r\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\r\n      addTick(ticks, time, timestamps);\r\n    }\r\n\r\n    if (time === max || options.bounds === 'ticks' || count === 1) {\r\n      addTick(ticks, time, timestamps);\r\n    }\r\n\r\n    // @ts-ignore\r\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value\r\n\t * @return {string}\r\n\t */\r\n  getLabelForValue(value) {\r\n    const adapter = this._adapter;\r\n    const timeOpts = this.options.time;\r\n\r\n    if (timeOpts.tooltipFormat) {\r\n      return adapter.format(value, timeOpts.tooltipFormat);\r\n    }\r\n    return adapter.format(value, timeOpts.displayFormats.datetime);\r\n  }\r\n\r\n  /**\r\n\t * Function to format an individual tick mark\r\n\t * @param {number} time\r\n\t * @param {number} index\r\n\t * @param {object[]} ticks\r\n\t * @param {string|undefined} [format]\r\n\t * @return {string}\r\n\t * @private\r\n\t */\r\n  _tickFormatFunction(time, index, ticks, format) {\r\n    const options = this.options;\r\n    const formatter = options.ticks.callback;\r\n\r\n    if (formatter) {\r\n      return call(formatter, [time, index, ticks], this);\r\n    }\r\n\r\n    const formats = options.time.displayFormats;\r\n    const unit = this._unit;\r\n    const majorUnit = this._majorUnit;\r\n    const minorFormat = unit && formats[unit];\r\n    const majorFormat = majorUnit && formats[majorUnit];\r\n    const tick = ticks[index];\r\n    const major = majorUnit && majorFormat && tick && tick.major;\r\n\r\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\r\n  }\r\n\r\n  /**\r\n\t * @param {object[]} ticks\r\n\t */\r\n  generateTickLabels(ticks) {\r\n    let i, ilen, tick;\r\n\r\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\r\n      tick = ticks[i];\r\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\r\n\t * @return {number}\r\n\t */\r\n  getDecimalForValue(value) {\r\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\r\n\t * @return {number}\r\n\t */\r\n  getPixelForValue(value) {\r\n    const offsets = this._offsets;\r\n    const pos = this.getDecimalForValue(value);\r\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} pixel\r\n\t * @return {number}\r\n\t */\r\n  getValueForPixel(pixel) {\r\n    const offsets = this._offsets;\r\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\r\n    return this.min + pos * (this.max - this.min);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} label\r\n\t * @return {{w:number, h:number}}\r\n\t * @private\r\n\t */\r\n  _getLabelSize(label) {\r\n    const ticksOpts = this.options.ticks;\r\n    const tickLabelWidth = this.ctx.measureText(label).width;\r\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\r\n    const cosRotation = Math.cos(angle);\r\n    const sinRotation = Math.sin(angle);\r\n    const tickFontSize = this._resolveTickFontOptions(0).size;\r\n\r\n    return {\r\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\r\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {number} exampleTime\r\n\t * @return {number}\r\n\t * @private\r\n\t */\r\n  _getLabelCapacity(exampleTime) {\r\n    const timeOpts = this.options.time;\r\n    const displayFormats = timeOpts.displayFormats;\r\n\r\n    // pick the longest format (milliseconds) for guestimation\r\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\r\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\r\n    const size = this._getLabelSize(exampleLabel);\r\n    // subtract 1 - if offset then there's one less label than tick\r\n    // if not offset then one half label padding is added to each end leaving room for one less label\r\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\r\n    return capacity > 0 ? capacity : 1;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getDataTimestamps() {\r\n    let timestamps = this._cache.data || [];\r\n    let i, ilen;\r\n\r\n    if (timestamps.length) {\r\n      return timestamps;\r\n    }\r\n\r\n    const metas = this.getMatchingVisibleMetas();\r\n\r\n    if (this._normalized && metas.length) {\r\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\r\n    }\r\n\r\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\r\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\r\n    }\r\n\r\n    return (this._cache.data = this.normalize(timestamps));\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelTimestamps() {\r\n    const timestamps = this._cache.labels || [];\r\n    let i, ilen;\r\n\r\n    if (timestamps.length) {\r\n      return timestamps;\r\n    }\r\n\r\n    const labels = this.getLabels();\r\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\r\n      timestamps.push(parse(this, labels[i]));\r\n    }\r\n\r\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\r\n  }\r\n\r\n  /**\r\n\t * @param {number[]} values\r\n\t * @protected\r\n\t */\r\n  normalize(values) {\r\n    // It seems to be somewhat faster to do sorting first\r\n    return _arrayUnique(values.sort(sorter));\r\n  }\r\n}\r\n","import TimeScale from './scale.time';\r\nimport {_lookupByKey} from '../helpers/helpers.collection';\r\n\r\n/**\r\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\r\n * at edges are used for the interpolation.\r\n * @param {object} table\r\n * @param {number} val\r\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\r\n * @return {object}\r\n */\r\nfunction interpolate(table, val, reverse) {\r\n  let lo = 0;\r\n  let hi = table.length - 1;\r\n  let prevSource, nextSource, prevTarget, nextTarget;\r\n  if (reverse) {\r\n    if (val >= table[lo].pos && val <= table[hi].pos) {\r\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\r\n    }\r\n    ({pos: prevSource, time: prevTarget} = table[lo]);\r\n    ({pos: nextSource, time: nextTarget} = table[hi]);\r\n  } else {\r\n    if (val >= table[lo].time && val <= table[hi].time) {\r\n      ({lo, hi} = _lookupByKey(table, 'time', val));\r\n    }\r\n    ({time: prevSource, pos: prevTarget} = table[lo]);\r\n    ({time: nextSource, pos: nextTarget} = table[hi]);\r\n  }\r\n\r\n  const span = nextSource - prevSource;\r\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\r\n}\r\n\r\nclass TimeSeriesScale extends TimeScale {\r\n\r\n  static id = 'timeseries';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = TimeScale.defaults;\r\n\r\n  /**\r\n\t * @param {object} props\r\n\t */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /** @type {object[]} */\r\n    this._table = [];\r\n    /** @type {number} */\r\n    this._minPos = undefined;\r\n    /** @type {number} */\r\n    this._tableRange = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  initOffsets() {\r\n    const timestamps = this._getTimestampsForTable();\r\n    const table = this._table = this.buildLookupTable(timestamps);\r\n    this._minPos = interpolate(table, this.min);\r\n    this._tableRange = interpolate(table, this.max) - this._minPos;\r\n    super.initOffsets(timestamps);\r\n  }\r\n\r\n  /**\r\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\r\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\r\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\r\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\r\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\r\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\r\n\t * @param {number[]} timestamps\r\n\t * @return {object[]}\r\n\t * @protected\r\n\t */\r\n  buildLookupTable(timestamps) {\r\n    const {min, max} = this;\r\n    const items = [];\r\n    const table = [];\r\n    let i, ilen, prev, curr, next;\r\n\r\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\r\n      curr = timestamps[i];\r\n      if (curr >= min && curr <= max) {\r\n        items.push(curr);\r\n      }\r\n    }\r\n\r\n    if (items.length < 2) {\r\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\r\n      return [\r\n        {time: min, pos: 0},\r\n        {time: max, pos: 1}\r\n      ];\r\n    }\r\n\r\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n      next = items[i + 1];\r\n      prev = items[i - 1];\r\n      curr = items[i];\r\n\r\n      // only add points that breaks the scale linearity\r\n      if (Math.round((next + prev) / 2) !== curr) {\r\n        table.push({time: curr, pos: i / (ilen - 1)});\r\n      }\r\n    }\r\n    return table;\r\n  }\r\n\r\n  /**\r\n\t * Returns all timestamps\r\n\t * @return {number[]}\r\n\t * @private\r\n\t */\r\n  _getTimestampsForTable() {\r\n    let timestamps = this._cache.all || [];\r\n\r\n    if (timestamps.length) {\r\n      return timestamps;\r\n    }\r\n\r\n    const data = this.getDataTimestamps();\r\n    const label = this.getLabelTimestamps();\r\n    if (data.length && label.length) {\r\n      // If combining labels and data (data might not contain all labels),\r\n      // we need to recheck uniqueness and sort\r\n      timestamps = this.normalize(data.concat(label));\r\n    } else {\r\n      timestamps = data.length ? data : label;\r\n    }\r\n    timestamps = this._cache.all = timestamps;\r\n\r\n    return timestamps;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\r\n\t * @return {number}\r\n\t */\r\n  getDecimalForValue(value) {\r\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} pixel\r\n\t * @return {number}\r\n\t */\r\n  getValueForPixel(pixel) {\r\n    const offsets = this._offsets;\r\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\r\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\r\n  }\r\n}\r\n\r\nexport default TimeSeriesScale;\r\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-nocheck\r\n\r\n/**\r\n * @namespace Chart\r\n */\r\nimport Chart from './core/core.controller';\r\n\r\nimport * as helpers from './helpers';\r\nimport _adapters from './core/core.adapters';\r\nimport Animation from './core/core.animation';\r\nimport animator from './core/core.animator';\r\nimport Animations from './core/core.animations';\r\nimport * as controllers from './controllers';\r\nimport DatasetController from './core/core.datasetController';\r\nimport Element from './core/core.element';\r\nimport * as elements from './elements/index';\r\nimport Interaction from './core/core.interaction';\r\nimport layouts from './core/core.layouts';\r\nimport * as platforms from './platform/index';\r\nimport * as plugins from './plugins';\r\nimport registry from './core/core.registry';\r\nimport Scale from './core/core.scale';\r\nimport * as scales from './scales';\r\nimport Ticks from './core/core.ticks';\r\n\r\n// Register built-ins\r\nChart.register(controllers, scales, elements, plugins);\r\n\r\nChart.helpers = {...helpers};\r\nChart._adapters = _adapters;\r\nChart.Animation = Animation;\r\nChart.Animations = Animations;\r\nChart.animator = animator;\r\nChart.controllers = registry.controllers.items;\r\nChart.DatasetController = DatasetController;\r\nChart.Element = Element;\r\nChart.elements = elements;\r\nChart.Interaction = Interaction;\r\nChart.layouts = layouts;\r\nChart.platforms = platforms;\r\nChart.Scale = Scale;\r\nChart.Ticks = Ticks;\r\n\r\n// Compatibility with ESM extensions\r\nObject.assign(Chart, controllers, scales, elements, plugins, platforms);\r\nChart.Chart = Chart;\r\n\r\nif (typeof window !== 'undefined') {\r\n  window.Chart = Chart;\r\n}\r\n\r\nexport default Chart;\r\n\r\n"],"names":["id","uid","isNullOrUndef","value","Array","isArray","isNumberFinite","defaultValue","type","slice","isObject","Object","prototype","toString","call","i","len","Number","isFinite","fn","finiteOrDefault","valueOrDefault","v1","dimension","endsWith","parseFloat","callback","args","thisArg","apply","each","loopable","reverse","source","length","keys","k","target","isValidKey","_elementsEqual","a0","a1","tval","sval","merge","options","v0","datasetIndex","index","clone","merger","ilen","current","sources","create","klen","mergeIf","indexOf","key","_merger","v","o","y","parts","split","tmp","part","_mergerIf","resolveObjectKey","obj","_capitalize","str","hasOwnProperty","keyResolvers","x","e","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","PI","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","abs","epsilon","Math","almostEquals","roundedRange","round","range","niceFraction","niceRange","pow","floor","result","sqrt","_factorize","b","a","push","almostWhole","sort","isNaN","array","degrees","property","toDegrees","radians","min","max","toRadians","p","angle","distance","radialDistanceFromCenter","distanceBetweenPoints","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","_normalizeAngle","TAU","angleToStart","endToAngle","angleToEnd","_angleDiff","_limitValue","_lookup","table","cmp","mid","hi","lo","end","last","values","start","_rlookupByKey","defineProperty","enumerable","listener","arrayEvents","_chartjs","base","listeners","stub","method","splice","this","forEach","object","res","unlistenArrayEvents","Set","set","items","requestAnimFrame","window","requestAnimationFrame","ticking","debounce","timeout","delay","align","clearTimeout","setTimeout","meta","_alignStartEnd","_textX","left","right","rtl","count","_getStartAndCountOfVisiblePoints","points","animationsDisabled","pointCount","iScale","_parsed","axis","minDefined","maxDefined","getUserBounds","xScale","xmin","xmax","_lookupByKey","getPixelForValue","ymax","newRanges","assign","changed","Animator","constructor","_request","anims","numSteps","callbacks","chart","initial","_notify","date","duration","currentStep","_running","_charts","item","_active","remaining","draw","_total","tick","charts","get","running","complete","progress","event","Date","cur","_getAnims","has","now","reduce","acc","_duration","_refresh","lim","l","h","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","c","d","f","hex","h1","h2","eq","hexString","r","g","isShort","alpha","undefined","HUE_RE","hsl2rgbn","s","n","hsv2rgbn","hwb2rgbn","w","rgb","rgb2hsl","hueValue","calln","map","hsl2rgb","hue","hueParse","m","exec","p1","p2","hwb2rgb","hsv2rgb","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","names","nameParse","unpacked","tkeys","j","ok","nk","replace","parseInt","unpack","transparent","toLowerCase","RGB_RE","to","from","modHSL","ratio","proto","fromObject","input","functionParse","charAt","rgbParse","Color","ret","_rgb","_valid","valid","rgbString","hslString","mix","color","weight","c1","c2","w2","w1","interpolate","t","rgb1","rgb2","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","rotate","deg","index_esm","isPatternOrGradient","colorLib","getHoverColor","numbers","colors","intlCache","Map","formatNumber","num","locale","cacheKey","JSON","stringify","formatter","Intl","NumberFormat","getNumberFormat","format","formatters","notation","delta","numeric","tickValue","numDecimal","maximumFractionDigits","maxTick","ticks","calculateDelta","logDelta","minimumFractionDigits","remain","logarithmic","significand","overrides","descriptors","node","root","scope","getScope","Defaults","_descriptors","_appliers","events","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","font","family","size","style","lineHeight","hover","intersect","includeInvisible","ctx","hoverBorderColor","maintainAspectRatio","onHover","onClick","mode","scales","showLine","drawActiveElementsOnTop","describe","responsive","scale","defineProperties","route","name","targetScope","targetName","scopeObject","_scriptable","privateName","applyAnimationsDefaults","applyLayoutsDefaults","applyScaleDefaults","targetScopeObject","defaults","easing","loop","_fallback","_indexable","properties","active","animation","resize","show","animations","visible","hide","autoPadding","padding","top","bottom","display","offset","beginAtZero","drawOnChartArea","tickColor","grid","dash","dashOffset","width","tickWidth","_ctx","lineWidth","text","title","minRotation","mirror","labelOffset","maxRotation","Ticks","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","startsWith","parent","document","valueInPixels","domNode","getComputedStyle","element","ownerDocument","getStyle","getPropertyValue","styleValue","parentNode","parentProperty","defaultView","pos","el","styles","touches","suffix","offsetX","offsetY","box","useOffsetPos","height","rect","maxWidth","maxHeight","canvas","currentDevicePixelRatio","clientHeight","paddings","getPositionedStyle","borders","container","clientY","shadowRoot","borderBox","boxSizing","xOffset","yOffset","containerBorder","containerStyle","containerPadding","maintainHeight","aspectRatio","parseMaxStyle","containerSize","_getParentNode","margins","bbHeight","getContainerSize","bbWidth","pixelRatio","round1","forceStyle","retinaScale","forceRatio","passiveSupported","deviceHeight","deviceWidth","textWidth","longest","_longestText","arrayOfThings","cache","_measureText","data","gc","string","thing","garbageCollect","jlen","nestedThing","restore","gcLen","halfWidth","save","resetTransform","drawPointLegend","pixel","translate","clearCanvas","radius","clearRect","ellipse","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","sin","rad","lineTo","closePath","drawImage","arc","moveTo","cos","SQRT1_2","stroke","margin","area","clipArea","unclipArea","_steppedLineTo","midpoint","previous","fill","lines","point","line","setRenderOpts","opts","strokeStyle","flip","strokeWidth","fillText","cp1x","cp2x","cp1y","cp2y","renderText","strokeColor","decorateText","translation","bottomLeft","fillStyle","textAlign","textBaseline","metrics","yDecoration","strikethrough","beginPath","fillRect","oldColor","scopes","fallback","getTarget","override","Symbol","_cacheable","_scopes","_rootScopes","rootScopes","_createResolver","prefixes","Proxy","deleteProperty","prop","Reflect","getPrototypeOf","_cached","parsed","_resolveWithPrefixes","getOwnPropertyDescriptor","_stack","descriptorDefaults","ownKeys","getKeysFromAllScopes","storage","_storage","_resolveWithContext","_keys","configurable","_attachContext","proxy","subProxy","_proxy","_context","setContext","_allKeys","isIndexable","isFunction","_subProxy","isScriptable","receiver","Error","join","createSubResolver","resolveFallback","needsSubResolver","add","allScopes","defined","filter","arr","resolver","addScopesFromKey","_resolveArray","allKeys","resolve","_resolveScriptable","delete","scriptable","indexable","readKey","subGetTarget","parentScopes","parentFallback","resolveKeysFromAllScopes","addScopes","EPSILON","getPoint","skip","getValueAxis","indexAxis","splineCurve","firstPoint","middlePoint","afterPoint","next","d01","d12","s01","s12","fa","fb","pointAfter","valueAxis","pointsLen","pointCurrent","pointBefore","deltaK","monotoneAdjust","monotoneCompute","slopeDelta","mK","tauK","alphaK","betaK","squaredMagnitude","inAreaPrev","iPixel","vPixel","_isPointInArea","inArea","inAreaNext","prev","capBezierPoints","controlPoints","capControlPoint","atEdge","elasticIn","elasticOut","effects","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeOutBounce","easeInOutBounce","_steppedInterpolation","_bezierInterpolation","_pointInLine","cp2","cp1","LINE_HEIGHT","RegExp","FONT_STYLE","toLineHeight","match","matches","_readValueToProps","props","objProps","read","toTRBLCorners","inputs","info","cacheable","console","warn","minmax","change","getRtlAdapter","rectX","setWidth","xPlus","leftForLtr","itemWidth","getRightToLeftAdapter","_itemWidth","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","between","_angleBetween","compare","_isBetween","normalize","bounds","shouldStop","endIsBefore","startBound","endBound","propertyFn","segment","getSegment","prevValue","inside","subStart","shouldStart","_boundSegment","normalizeSegment","segments","sub","_computeSegments","segmentOptions","spanGaps","dir","splitByStyles","stop","findStartAndEnd","completeLoop","doSplitByStyles","solidSegments","_fullLoop","chartContext","_chart","getContext","addStyle","prevStyle","readStyle","st","borderCapStyle","borderWidth","borderDashOffset","p0DataIndex","p1DataIndex","pixelSize","fontStyle","fontFamily","binarySearch","metaset","controller","lookupMethod","_sorted","_reversePixels","_sharedOptions","getRange","metasets","handler","deltaX","getSortedVisibleDatasetMetas","position","isPointInArea","useFinalPosition","evaluateInteractionItems","chartArea","inRange","minDistance","useX","pt1","pt2","deltaY","useY","intersectsItem","center","getCenterPoint","distanceMetric","getRelativePosition","getNearestCartesianItems","getNearestRadialItems","getAxisItems","Interaction","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","layouts","stacks","wrap","includes","stack","stackWeight","vBoxMaxWidth","fullSize","hBoxMaxHeight","params","layout","factor","availableHeight","sortByWeight","boxPadding","maxPadding","updateDims","horizontal","updateMaxPadding","getPadding","newWidth","newHeight","widthChanged","heightChanged","other","handleMaxPadding","marginForPositions","positions","fitBoxes","boxes","refit","same","getMargins","refitBoxes","placeBoxes","userPadding","setBoxDims","placed","height1","width1","addBox","_layers","verticalBoxes","horizontalBoxes","layoutItem","minPadding","visibleVerticalBoxCount","availableWidth","layoutBoxes","buildStacks","centerHorizontal","centerVertical","concat","vertical","rightAndBottom","getCombinedMax","total","freeze","outerWidth","toPadding","updatePos","BasePlatform","acquireContext","releaseContext","BasicPlatform","config","touchend","EVENT_TYPES","pointerout","touchmove","pointerenter","pointerdown","pointermove","pointerup","pointerleave","renderHeight","renderWidth","isNullOrEmpty","nodeListContains","nodeList","eventListenerOptions","childList","subtree","observer","trigger","entry","addedNodes","entries","removedNodes","observe","drpListeningCharts","oldDevicePixelRatio","addEventListener","dpr","removeEventListener","onWindowResize","throttled","contentRect","releaseObserver","disconnect","addListener","clientWidth","createProxyAndListen","native","fromNativeEvent","EXPANDO_KEY","getAttribute","displayWidth","displayHeight","readUsedSize","initCanvas","proxies","createAttachObserver","createResizeObserver","getMaximumSize","attach","detach","_detectPlatform","_isDomSupported","OffscreenCanvas","DomPlatform","interpolators","boolean","number","c0","helpersColor","Animation","cfg","currentValue","_loop","_target","_prop","_from","_to","_promises","update","_start","elapsed","promises","Promise","_fn","rej","resolved","Animations","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","$animations","resolveTargetOptions","_createAnimations","$shared","anim","wait","all","awaitAll","then","allowedOverflow","yScale","filterVisible","otherValue","singleMode","dsIndex","convertObjectDataToArray","isStacked","stacked","indexScale","getOrCreateStack","stackKey","indexValue","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","iAxis","vAxis","_stacks","valueScale","getStackKey","itemStacks","_top","getFirstScaleId","createContext","shift","clearStacks","cloneIfNotShared","getSortedDatasetIndices","cached","shared","DatasetController","static","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","getMeta","datasetElementType","dataElementType","_parsing","_data","_objectData","linkScales","_stacked","addElements","updateIndex","_cachedMeta","isPluginEnabled","dataset","yid","rid","vAxisID","getScaleForId","chooseId","xid","xAxisID","yAxisID","rAxisID","iid","iAxisID","vid","rScale","getDataset","_update","_destroy","adata","oldStacked","listenArrayEvents","stackChanged","_dataCheck","resetNewElements","_resyncElements","parsePrimitiveData","scopeKeys","datasetScopeKeys","_type","getOptionScopes","_cachedDataOpts","sorted","labels","parse","singleScale","parseArrayData","parsedValue","parseObjectData","xAxisKey","otherScale","updateRangeFromParsed","yAxisKey","getParsed","getDataElement","applyStack","NaN","label","toClip","_getOtherScale","canStack","hidden","createStack","NEGATIVE_INFINITY","otherMax","otherMin","_skip","dataIndex","getMaxOverflow","getLabelAndValue","getLabelForValue","elementType","disabled","_drawStart","raw","resolveDataElementOptions","getSharedOptions","firstOpts","updateSharedOptions","sharedOptions","includeOptions","_resolveElementOptions","sharing","removeHoverStyle","setHoverStyle","resolveNamedOptions","arg2","numData","transition","_insertElements","_removeElements","datasetAnimationScopeKeys","move","isDirectUpdateMode","_animationsDisabled","removed","previouslySharedOptions","_setStyle","_resolveAnimations","_removeDatasetHoverStyle","_setDatasetHoverStyle","Element","tooltipPosition","getProps","hasValue","isNumber","final","autoSkip","tickLength","_tickSize","maxScale","_length","_maxLength","maxChart","majorIndices","newTicks","tickOpts","enabled","getMajorIndices","spacing","numMajorIndices","majorStart","ceil","ticksLimit","evenMajorSpacing","getEvenSpacing","factors","determineMaxTicks","avgMajorSpacing","first","majorEnd","diff","offsetFromEdge","edge","sample","numItems","increment","validIndex","_startPixel","getPixelForGridLine","offsetGridLines","_endPixel","lineValue","getPixelForTick","getTickMarkLength","drawTicks","titleY","positionAxisID","reverseAlign","Scale","super","paddingTop","paddingLeft","labelRotation","_margins","paddingBottom","_borderValue","_cache","_dataLimitsCached","_gridLineItems","_labelItems","init","_userMin","_suggestedMax","_userMax","_suggestedMin","_ticksLength","metas","getMinMax","sampleSize","paddingRight","getLabels","isHorizontal","xLabels","yLabels","afterBuildTicks","beforeUpdate","grace","beforeFit","fit","afterFit","endPixel","_labelSizes","beforeSetDimensions","setDimensions","afterSetDimensions","reversePixels","afterDataLimits","_range","_addGrace","beforeBuildTicks","buildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","afterUpdate","startPixel","_callHooks","_alignToPixels","alignToPixels","notifyPlugins","labelSizes","maxLabelDiagonal","beforeTickToLabelConversion","generateTickLabels","minSize","tickPadding","angleRadians","numTicks","labelHeight","_getLabelSizes","widest","labelWidth","_calculatePadding","maxLabelWidth","getTitleHeight","maxLabelHeight","asin","highest","offsetLeft","titleOpts","gridOpts","titleHeight","_handleMargins","isRotated","labelsBelowTicks","offsetRight","tickFont","_resolveTickFontOptions","widths","heights","afterTickToLabelConversion","_computeLabelSizes","decimal","_longestTextCache","caches","nestedLabel","widestLabelSize","highestLabelSize","fontString","optionTicks","autoSkipPadding","toFont","valueAt","idx","ticksLength","alignBorderValue","ty2","tl","getPixelForDecimal","_alignPixel","x2","maxTicksLimit","lineColor","optsAtIndex","tickBorderDashOffset","alignedLineValue","tx2","titleX","y2","titleArgs","y1","borderDash","tickBorderDash","borderValue","tickAndPadding","hTickAndPadding","borderOpts","border","axisWidth","axisHalfWidth","x1","_getYAxisLabelAlignment","tx1","ty1","lineCount","positionAxisID1","value1","limit","step","optsAtIndexBorder","textOffset","backdrop","_computeLabelItems","_getXAxisLabelAlignment","tickTextAlign","halfCount","textStrokeColor","textStrokeWidth","labelPadding","getLineWidthForValue","lineDashOffset","drawLine","lastLineWidth","_computeLabelArea","_isVisible","titleAlign","drawGrid","_computeGridLineItems","tz","gz","bz","drawBorder","axisID","isForType","isPrototypeOf","parentScope","register","registerDefaults","propertyParts","sourceName","sourceScope","routes","isIChartComponent","pop","routeDefaults","defaultRoutes","TypedRegistry","plugins","_typedRegistries","controllers","_each","remove","addControllers","addPlugins","getController","_get","getElement","getPlugin","reg","removeElements","removePlugins","component","camelMethod","removeScales","typedRegistry","arg","_getRegistryForType","PluginService","_init","descriptor","_createDescriptors","callCallback","plugin","hook","_oldCache","invalidate","previousDescriptors","localIds","registry","getOpts","local","i1","pluginOpts","allPlugins","createDescriptors","_notifyStateChanges","some","createResolver","getIndexAxis","datasetDefaults","determineAxis","scaleOptions","initOptions","chartDefaults","configScales","chartIndexAxis","scaleConf","error","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","mergeScaleConfig","initData","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","initConfig","_scopeCache","_resolverCache","clearCache","clear","datasetType","datasetElementScopeKeys","additionalOptionScopes","mainScope","keyLists","resetCache","_cachedScopes","needContext","subResolver","chartOptionScopes","subPrefixes","getResolver","hasFunction","KNOWN_POSITIONS","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","getChart","instances","intKey","inChartArea","invalidatePlugins","userConfig","existingChart","initialCanvas","updateConfig","_aspectRatio","_lastEvent","_plugins","$proxies","_hiddenIndices","attached","_doResize","_dataChanges","_listeners","_responsiveListeners","animator","listen","_initialize","_options","_resize","_resizeBeforeDraw","newSize","newRatio","axisOptions","onResize","scaleOpts","updated","render","dposition","buildOrUpdateScales","scaleClass","scaleType","dtype","hasUpdated","positionIsHorizontal","getScale","numMeta","_updateMetasets","_metasets","newControllers","getDatasetMeta","_sortedMetasets","order","isDatasetVisible","_dataset","_removeUnreferencedMetasets","ControllerClass","cancelable","reset","_resetElements","_minPadding","animsDisabled","_updateScales","_checkEventBindings","buildOrUpdateControllers","_updateHoverStyles","buildOrUpdateElements","removeBox","setsEqual","newEvents","_updateDatasets","_getUniformDataChanges","moveNumericKeys","_eventHandler","makeSet","ensureScalesHaveIDs","existingEvents","noArea","changes","datasetCount","changeSet","_updateLayout","ilen1","layers","_drawDataset","useClip","getDatasetArea","z","clip","getElementsAtEventForMode","_clip","toggleDataVisibility","getDataVisibility","modes","_updateVisibility","destroy","getVisibleDatasetCount","setDatasetVisibility","_remove","_destroyDatasetMeta","_stop","_add","detached","unbindEvents","toBase64Image","toDataURL","bindEvents","updateHoverStyle","deactivated","replay","activated","eventFilter","prefix","activeElements","lastActive","notify","lastEvent","isClick","abstract","formats","DateAdapterBase","members","endOf","computeMinSampleSize","$bar","visibleMetas","getAllParsedValues","_arrayUnique","getAllScaleValues","curr","updateMinAndPrev","parseValue","startValue","endValue","barStart","barEnd","_custom","parseFloatBar","parseArrayOrPrimitive","isFloatBar","custom","setBorderSkipped","borderSkipped","borderProps","enableBorderRadius","_bottom","parseEdge","orig","v2","startEnd","setInflateAmount","inflateAmount","DoughnutController","animateRotate","animateScale","circumference","generateLabels","legend","legendItem","innerRadius","outerRadius","getter","_getRotation","_getRotationExtents","getMaxBorderWidth","cutout","toPercentage","radiusLength","arcs","getMaxOffset","maxSize","chartWeight","startX","startY","startAngle","endX","endAngle","endY","calcMax","calcMin","maxX","maxY","minX","minY","ratioX","ratioY","getRatioAndOffset","maxRadius","toDimension","updateElements","_getVisibleDatasetWeightTotal","_getRingWeightOffset","animationOpts","centerX","_circumference","centerY","_getSharedOptions","updateElement","metaData","calculateCircumference","calculateTotal","ringWeightOffset","borderAlign","hoverBorderWidth","hoverOffset","categoryPercentage","barPercentage","grouped","_index_","_value_","iAxisKey","vAxisKey","initialize","bars","getBasePixel","ruler","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","_getStacks","skipNull","_getStackCount","_getStackIndex","pixels","barThickness","log","stackCount","baseValue","minBarLength","actualBase","floating","barSign","halfGrid","maxBarThickness","Infinity","percent","chunk","computeFlexCategoryTraits","thickness","computeFitCategoryTraits","stackIndex","rects","_scaleRangesChanged","_datasetIndex","_decimated","resolveDatasetElementOptions","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","lastPoint","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","cutoutPercentage","datasetStartAngle","xCenter","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","pointPosition","getPointPositionForValue","clipArc","pixelMargin","angleMargin","parseBorderRadius","angleDelta","innerLimit","halfThickness","computeOuterLimit","outerArcLimit","innerStart","outerStart","innerEnd","outerEnd","rThetaToXY","theta","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","avNogSpacingRadius","innerR","spacingOffset","angleOffset","pCenter","p4","innerEndAdjustedAngle","innerEndAdjustedRadius","pCenter2","innerStartAdjustedAngle","drawArc","fullCircles","p8","pCenter3","outerStartY","outerStartX","outerEndX","outerEndY","pathArc","borderJoinStyle","inner","borderRadius","lineJoin","drawFullCircleBorders","getLineMethod","pathVars","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","stepped","tension","cubicInterpolationMode","lastY","prevX","avgX","countX","pointIndex","useFastPath","truncX","strokePathWithCache","drawX","path","strokePathDirect","fastPathSegment","usePath2D","_path","Path2D","segmentMethod","_getSegmentMethod","LineElement","_updateBezierControlPoints","_points","_pointsUpdated","interpolated","_segments","_boundSegments","hitRadius","getBarBounds","bar","half","skipOrLimit","boundingRects","toTRBL","maxH","maxW","enableBorder","topLeft","topRight","maxR","bottomRight","outer","skipX","hasRadius","skipY","amount","refRect","chartX","withinRadius","chartY","halfRadius","betweenAngles","rAdjust","halfAngle","fix","radiusOffset","hoverRadius","mouseX","mouseY","inXRange","drawPoint","addRectPath","inflateRect","addRoundedRectPath","addNormalRectPath","inYRange","cleanDecimatedDataset","cleanDecimatedData","algorithm","xAxis","parsing","getStartAndCountOfVisiblePointsSimplified","threshold","decimated","samples","sampledIndex","bucketWidth","endIndex","avgRangeStart","nextA","avgRangeEnd","avgY","avgRangeLength","pointAx","rangeOffs","maxArea","rangeTo","maxAreaPoint","minMaxDecimation","lttbDecimation","minIndex","maxIndex","startIndex","xMax","xMin","lastIndex","intermediateIndex1","intermediateIndex2","_getBounds","_findSegmentEnd","_getEdge","boundary","linePoints","_resolveTarget","propagate","visited","_decodeFill","parseFillOption","firstCh","decodeTargetIndex","sourcePoint","linesBelow","postponed","pointValue","findPoint","simpleArc","_getTarget","getLineByIndex","below","unshift","addPointsBelow","sourcePoints","_buildStackLine","computeLinearBoundary","getBaseValue","_getTargetPixel","computeCircularBoundary","_drawfill","lineOpts","fillOption","above","clipVertical","doFill","clipY","lineLoop","tpoints","targetSegments","tgt","subBounds","fillSources","fillSource","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","drawTime","updateControlPoints","beforeDatasetsDraw","$filler","_shouldApplyFill","beforeDatasetDraw","labelOpts","fontSize","boxHeight","boxWidth","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","_hoveredItem","lineWidths","buildLabels","legendItems","labelFont","_fitRows","getBoxSize","_fitCols","legendHitBoxes","row","measureText","hitboxes","totalHeight","_itemHeight","columnSizes","heightLimit","totalWidth","currentColHeight","currentColWidth","legendItemText","fontLineHeight","calculateLegendItemHeight","calculateItemHeight","col","rtlHelper","adjustHitBoxes","hitbox","hitbox1","defaultColor","_draw","drawLegendBox","cursor","drawTitle","lineCap","textDirection","fontColor","realX","SQRT2","setLineDash","lineDash","halfFontSize","drawOptions","yBoxTop","xBoxLeft","titleFont","topPaddingPlusHalfFontSize","titlePadding","_computeTitleHeight","_toLeftRightCenter","_getLegendItemAt","lh","isListened","hoveredItem","hitBox","onLeave","sameItem","calculateItemSize","calculateItemWidth","_element","_args","ci","handleEvent","usePointStyle","useBorderRadius","_getSortedDatasetMetas","Title","_padding","textSize","_drawArgs","fontOpts","plugin_title","titleBlock","createTitle","WeakMap","plugin_subtitle","positioners","average","nearest","nearestElement","eventPosition","tp","toPush","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","tooltip","getTooltipSize","body","footer","footerMarginTop","maxLineWidth","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","footerSpacing","widthPadding","determineYAlign","displayColors","doesNotFitWithAlign","caretSize","determineXAlign","yAlign","xAlign","chartWidth","caret","caretPadding","determineAlignment","alignment","pushOrConcat","paddingAndSize","beforeTitle","tooltipItems","noop","getAlignedX","getBeforeAfterBodyLines","splitNewlines","tooltipItem","defaultCallbacks","formattedValue","labelCount","labelTextColor","labelPointStyle","beforeFooter","bodyColor","afterLabel","invokeCallbackWithFallback","opacity","_eventPosition","_cachedAnimations","labelPointStyles","labelTextColors","scoped","bodyItems","afterFooter","afterTitle","getBeforeBody","overrideCallbacks","labelColors","_createItems","getBody","itemSort","caretX","caretY","external","drawCaret","getCaretPosition","getTitle","ptX","ptY","tooltipPoint","y3","getFooter","_size","caretPosition","_tooltipItems","x3","pt","colorY","innerX","rtlColorX","multiKeyBackground","bodySpacing","bodyAlign","bodyLineHeight","fillLineOfText","xLinePadding","bodyAlignForCalculation","textColor","outerX","drawFooter","tooltipSize","quadraticCurveTo","animX","footerAlign","footerColor","animY","positionAndSize","getBackgroundPoint","drawBackground","drawBody","_updateAnimationTarget","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","Tooltip","afterInit","_ignoreReplayEvents","afterDraw","_getActiveElements","_willRender","afterEvent","findOrAddLabel","addedLabels","addIfString","lastIndexOf","_getLabelForValue","relativeLabelSize","minSpacing","LinearScaleBase","_endValue","_valueRange","minSign","setMax","handleTickRangeOptions","setMin","maxSign","maxTicks","stepSize","getTickLimit","precision","dataRange","_setMinAndMaxByKey","MIN_SPACING","rmax","unit","maxSpaces","rmin","countDefined","numSpaces","niceMax","niceNum","niceMin","decimalPlaces","includeBounds","_startValue","generateTicks","LinearScale","determineDataLimits","computeTickLimit","getValueForPixel","log10Floor","changeExponent","isMajor","tickVal","steps","rangeExp","rangeStep","generationOptions","exp","minExp","lastTick","LogarithmicScale","_zero","getDecimalForPixel","getTickBackdropHeight","determineLimits","fitWithPointLabels","valueCount","pointLabelOpts","additionalAngle","centerPointLabels","getPointPosition","plFont","hLimits","vLimits","setCenterPoint","limits","_pointLabelItems","updateLimits","extra","outerDistance","pointLabelPosition","getTextAlignForAngle","leftForTextAlign","buildPointLabelItems","pathRadiusLine","yCenter","drawRadiusLine","RadialLinearScale","angleLines","drawingArea","_pointLabels","rightMovement","bottomMovement","angleMultiplier","topMovement","leftMovement","scalingFactor","getPointLabelContext","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","drawPointLabels","backdropLeft","backdropTop","backdropWidth","backdropHeight","gridLineOpts","drawLabels","second","INTERVALS","common","year","adapter","_adapter","parser","isoWeekday","startOf","minUnit","capacity","UNITS","interval","MAX_SAFE_INTEGER","addTick","majorUnit","timestamps","time","adapters","_normalized","setMajorTicks","_applyBounds","_majorUnit","_offsets","_date","displayFormats","_parseOpts","timeOpts","normalized","initOffsets","getDecimalForValue","_getLabelBounds","getLabelTimestamps","_unit","determineUnitForAutoTicks","_getLabelCapacity","determineUnitForFormatting","determineMajorUnit","ticksFromTimestamps","afterAutoSkip","offsets","cosRotation","sinRotation","exampleLabel","_tickFormatFunction","exampleTime","hasWeekday","getDataTimestamps","tooltipFormat","datetime","prevSource","nextSource","prevTarget","nextTarget","TimeScale","span","_table","_minPos","_tableRange","added","_addedLabels","Chart","helpers","platforms"],"mappings":"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"}